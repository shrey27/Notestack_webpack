/*! For license information please see vendor.103678cbfa8b80277c7a.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpure_js_app_starter=self.webpackChunkpure_js_app_starter||[]).push([[736],{4444:function(e,t,n){n.d(t,{BH:function(){return a},L:function(){return s},LL:function(){return v},Mn:function(){return p},ZR:function(){return y},b$:function(){return h},d:function(){return f},eu:function(){return g},hl:function(){return m},m9:function(){return O},ne:function(){return k},pd:function(){return T},ru:function(){return c},tV:function(){return o},uI:function(){return u},vZ:function(){return w},w1:function(){return d},xO:function(){return _},xb:function(){return b},z$:function(){return l},zd:function(){return C}});const r=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},i={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let t=0;t<e.length;t+=3){const i=e[t],s=t+1<e.length,o=s?e[t+1]:0,a=t+2<e.length,l=a?e[t+2]:0,u=i>>2,c=(3&i)<<4|o>>4;let h=(15&o)<<2|l>>6,f=63&l;a||(f=64,s||(h=64)),r.push(n[u],n[c],n[h],n[f])}return r.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(r(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,r=0;for(;n<e.length;){const i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){const s=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&s)}else if(i>239&&i<365){const s=((7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(s>>10)),t[r++]=String.fromCharCode(56320+(1023&s))}else{const s=e[n++],o=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&s)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let t=0;t<e.length;){const i=n[e.charAt(t++)],s=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==i||null==s||null==o||null==a)throw Error();const l=i<<2|s>>4;if(r.push(l),64!==o){const e=s<<4&240|o>>2;if(r.push(e),64!==a){const e=o<<6&192|a;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},s=function(e){return function(e){const t=r(e);return i.encodeByteArray(t,!0)}(e).replace(/\./g,"")},o=function(e){try{return i.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};class a{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function l(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function u(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(l())}function c(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function h(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function f(){return l().indexOf("Electron/")>=0}function d(){const e=l();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function p(){return l().indexOf("MSAppHost/")>=0}function m(){return"object"==typeof indexedDB}function g(){return new Promise(((e,t)=>{try{let n=!0;const r="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(r);i.onsuccess=()=>{i.result.close(),n||self.indexedDB.deleteDatabase(r),e(!0)},i.onupgradeneeded=()=>{n=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}class y extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,y.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,v.prototype.create)}}class v{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},r=`${this.service}/${e}`,i=this.errors[e],s=i?function(e,t){return e.replace(A,((e,n)=>{const r=t[n];return null!=r?String(r):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${s} (${r}).`;return new y(r,o,n)}}const A=/\{\$([^}]+)}/g;function b(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function w(e,t){if(e===t)return!0;const n=Object.keys(e),r=Object.keys(t);for(const i of n){if(!r.includes(i))return!1;const n=e[i],s=t[i];if(E(n)&&E(s)){if(!w(n,s))return!1}else if(n!==s)return!1}for(const e of r)if(!n.includes(e))return!1;return!0}function E(e){return null!==e&&"object"==typeof e}function _(e){const t=[];for(const[n,r]of Object.entries(e))Array.isArray(r)?r.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(r));return t.length?"&"+t.join("&"):""}function C(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,r]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(r)}})),t}function T(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)}function k(e,t){const n=new S(e,t);return n.subscribe.bind(n)}class S{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let r;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");r=function(e,t){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===r.next&&(r.next=I),void 0===r.error&&(r.error=I),void 0===r.complete&&(r.complete=I);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?r.error(this.finalError):r.complete()}catch(e){}})),this.observers.push(r),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function I(){}function O(e){return e&&e._delegate?e._delegate:e}},427:function(e,t,n){function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function i(e){return!!e&&!!e[H]}function s(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===q}(e)||Array.isArray(e)||!!e[$]||!!e.constructor[$]||h(e)||f(e))}function o(e,t,n){void 0===n&&(n=!1),0===a(e)?(n?Object.keys:W)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function a(e){var t=e[H];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:h(e)?2:f(e)?3:0}function l(e,t){return 2===a(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function u(e,t,n){var r=a(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function c(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function h(e){return V&&e instanceof Map}function f(e){return j&&e instanceof Set}function d(e){return e.o||e.t}function p(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=K(e);delete t[H];for(var n=W(t),r=0;r<n.length;r++){var i=n[r],s=t[i];!1===s.writable&&(s.writable=!0,s.configurable=!0),(s.get||s.set)&&(t[i]={configurable:!0,writable:!0,enumerable:s.enumerable,value:e[i]})}return Object.create(Object.getPrototypeOf(e),t)}function m(e,t){return void 0===t&&(t=!1),y(e)||i(e)||!s(e)||(a(e)>1&&(e.set=e.add=e.clear=e.delete=g),Object.freeze(e),t&&o(e,(function(e,t){return m(t,!0)}),!0)),e}function g(){r(2)}function y(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function v(e){var t=G[e];return t||r(18,e),t}function A(){return F}function b(e,t){t&&(v("Patches"),e.u=[],e.s=[],e.v=t)}function w(e){E(e),e.p.forEach(C),e.p=null}function E(e){e===F&&(F=e.l)}function _(e){return F={p:[],l:F,h:e,m:!0,_:0}}function C(e){var t=e[H];0===t.i||1===t.i?t.j():t.O=!0}function T(e,t){t._=t.p.length;var n=t.p[0],i=void 0!==e&&e!==n;return t.h.g||v("ES5").S(t,e,i),i?(n[H].P&&(w(t),r(4)),s(e)&&(e=k(t,e),t.l||I(t,e)),t.u&&v("Patches").M(n[H].t,e,t.u,t.s)):e=k(t,n,[]),w(t),t.u&&t.v(t.u,t.s),e!==B?e:void 0}function k(e,t,n){if(y(t))return t;var r=t[H];if(!r)return o(t,(function(i,s){return S(e,r,t,i,s,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return I(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var i=4===r.i||5===r.i?r.o=p(r.k):r.o;o(3===r.i?new Set(i):i,(function(t,s){return S(e,r,i,t,s,n)})),I(e,i,!1),n&&e.u&&v("Patches").R(r,n,e.u,e.s)}return r.o}function S(e,t,n,r,o,a){if(i(o)){var c=k(e,o,a&&t&&3!==t.i&&!l(t.D,r)?a.concat(r):void 0);if(u(n,r,c),!i(c))return;e.m=!1}if(s(o)&&!y(o)){if(!e.h.F&&e._<1)return;k(e,o),t&&t.A.l||I(e,o)}}function I(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&m(t,n)}function O(e,t){var n=e[H];return(n?d(n):e)[t]}function N(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function x(e){e.P||(e.P=!0,e.l&&x(e.l))}function P(e){e.o||(e.o=p(e.t))}function D(e,t,n){var r=h(t)?v("MapSet").N(t,n):f(t)?v("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:A(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},i=r,s=Q;n&&(i=[r],s=J);var o=Proxy.revocable(i,s),a=o.revoke,l=o.proxy;return r.k=l,r.j=a,l}(t,n):v("ES5").J(t,n);return(n?n.A:A()).p.push(r),r}function R(e){return i(e)||r(22,e),function e(t){if(!s(t))return t;var n,r=t[H],i=a(t);if(r){if(!r.P&&(r.i<4||!v("ES5").K(r)))return r.t;r.I=!0,n=L(t,i),r.I=!1}else n=L(t,i);return o(n,(function(t,i){r&&function(e,t){return 2===a(e)?e.get(t):e[t]}(r.t,t)===i||u(n,t,e(i))})),3===i?new Set(n):n}(e)}function L(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return p(e)}n.d(t,{xC:function(){return Ne},hg:function(){return Ue},oM:function(){return De}});var M,F,U="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),V="undefined"!=typeof Map,j="undefined"!=typeof Set,z="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,B=U?Symbol.for("immer-nothing"):((M={})["immer-nothing"]=!0,M),$=U?Symbol.for("immer-draftable"):"__$immer_draftable",H=U?Symbol.for("immer-state"):"__$immer_state",q=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),W="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,K=Object.getOwnPropertyDescriptors||function(e){var t={};return W(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},G={},Q={get:function(e,t){if(t===H)return e;var n=d(e);if(!l(n,t))return function(e,t,n){var r,i=N(t,n);return i?"value"in i?i.value:null===(r=i.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!s(r)?r:r===O(e.t,t)?(P(e),e.o[t]=D(e.A.h,r,e)):r},has:function(e,t){return t in d(e)},ownKeys:function(e){return Reflect.ownKeys(d(e))},set:function(e,t,n){var r=N(d(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var i=O(d(e),t),s=null==i?void 0:i[H];if(s&&s.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(c(n,i)&&(void 0!==n||l(e.t,t)))return!0;P(e),x(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==O(e.t,t)||t in e.t?(e.D[t]=!1,P(e),x(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=d(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},J={};o(Q,(function(e,t){J[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),J.deleteProperty=function(e,t){return J.set.call(this,e,t,void 0)},J.set=function(e,t,n){return Q.set.call(this,e[0],t,n,e[0])};var X=function(){function e(e){var t=this;this.g=z,this.F=!0,this.produce=function(e,n,i){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var a=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),s=1;s<r;s++)i[s-1]=arguments[s];return a.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(i))}))}}var l;if("function"!=typeof n&&r(6),void 0!==i&&"function"!=typeof i&&r(7),s(e)){var u=_(t),c=D(t,e,void 0),h=!0;try{l=n(c),h=!1}finally{h?w(u):E(u)}return"undefined"!=typeof Promise&&l instanceof Promise?l.then((function(e){return b(u,i),T(e,u)}),(function(e){throw w(u),e})):(b(u,i),T(l,u))}if(!e||"object"!=typeof e){if(void 0===(l=n(e))&&(l=e),l===B&&(l=void 0),t.F&&m(l,!0),i){var f=[],d=[];v("Patches").M(e,l,f,d),i(f,d)}return l}r(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,i=Array(r>1?r-1:0),s=1;s<r;s++)i[s-1]=arguments[s];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(i))}))};var r,i,s=t.produce(e,n,(function(e,t){r=e,i=t}));return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(e){return[e,r,i]})):[s,r,i]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){s(e)||r(8),i(e)&&(e=R(e));var t=_(this),n=D(this,e,void 0);return n[H].C=!0,E(t),n},t.finishDraft=function(e,t){var n=(e&&e[H]).A;return b(n,t),T(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!z&&r(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var s=v("Patches").$;return i(e)?s(e,t):this.produce(e,(function(e){return s(e,t)}))},e}(),Y=new X,Z=Y.produce,ee=(Y.produceWithPatches.bind(Y),Y.setAutoFreeze.bind(Y),Y.setUseProxies.bind(Y),Y.applyPatches.bind(Y),Y.createDraft.bind(Y),Y.finishDraft.bind(Y),Z);function te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ne(Object(n),!0).forEach((function(t){te(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ie(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var se="function"==typeof Symbol&&Symbol.observable||"@@observable",oe=function(){return Math.random().toString(36).substring(7).split("").join(".")},ae={INIT:"@@redux/INIT"+oe(),REPLACE:"@@redux/REPLACE"+oe(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+oe()}};function le(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function ue(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(ie(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(ie(1));return n(ue)(e,t)}if("function"!=typeof e)throw new Error(ie(2));var i=e,s=t,o=[],a=o,l=!1;function u(){a===o&&(a=o.slice())}function c(){if(l)throw new Error(ie(3));return s}function h(e){if("function"!=typeof e)throw new Error(ie(4));if(l)throw new Error(ie(5));var t=!0;return u(),a.push(e),function(){if(t){if(l)throw new Error(ie(6));t=!1,u();var n=a.indexOf(e);a.splice(n,1),o=null}}}function f(e){if(!le(e))throw new Error(ie(7));if(void 0===e.type)throw new Error(ie(8));if(l)throw new Error(ie(9));try{l=!0,s=i(s,e)}finally{l=!1}for(var t=o=a,n=0;n<t.length;n++)(0,t[n])();return e}function d(e){if("function"!=typeof e)throw new Error(ie(10));i=e,f({type:ae.REPLACE})}function p(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(ie(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[se]=function(){return this},e}return f({type:ae.INIT}),(r={dispatch:f,subscribe:h,getState:c,replaceReducer:d})[se]=p,r}function ce(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function he(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(ie(15))},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},s=t.map((function(e){return e(i)}));return r=ce.apply(void 0,s)(n.dispatch),re(re({},n),{},{dispatch:r})}}}function fe(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}var de=fe();de.withExtraArgument=fe;var pe,me=de,ge=(pe=function(e,t){return pe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},pe(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}pe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),ye=function(e,t){for(var n=0,r=t.length,i=e.length;n<r;n++,i++)e[i]=t[n];return e},ve=Object.defineProperty,Ae=Object.defineProperties,be=Object.getOwnPropertyDescriptors,we=Object.getOwnPropertySymbols,Ee=Object.prototype.hasOwnProperty,_e=Object.prototype.propertyIsEnumerable,Ce=function(e,t,n){return t in e?ve(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Te=function(e,t){for(var n in t||(t={}))Ee.call(t,n)&&Ce(e,n,t[n]);if(we)for(var r=0,i=we(t);r<i.length;r++)n=i[r],_e.call(t,n)&&Ce(e,n,t[n]);return e},ke=function(e,t){return Ae(e,be(t))},Se="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?ce:ce.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Ie=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var i=e.apply(this,n)||this;return Object.setPrototypeOf(i,t.prototype),i}return ge(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,ye([void 0],e[0].concat(this)))):new(t.bind.apply(t,ye([void 0],e.concat(this))))},t}(Array);function Oe(e){return s(e)?ee(e,(function(){})):e}function Ne(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new Ie);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(me):r.push(me.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},i=r.reducer,s=void 0===i?void 0:i,o=r.middleware,a=void 0===o?n():o,l=r.devTools,u=void 0===l||l,c=r.preloadedState,h=void 0===c?void 0:c,f=r.enhancers,d=void 0===f?void 0:f;if("function"==typeof s)t=s;else{if(!function(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}(s))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];"function"==typeof e[i]&&(n[i]=e[i])}var s,o=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:ae.INIT}))throw new Error(ie(12));if(void 0===n(void 0,{type:ae.PROBE_UNKNOWN_ACTION()}))throw new Error(ie(13))}))}(n)}catch(e){s=e}return function(e,t){if(void 0===e&&(e={}),s)throw s;for(var r=!1,i={},a=0;a<o.length;a++){var l=o[a],u=n[l],c=e[l],h=u(c,t);if(void 0===h)throw t&&t.type,new Error(ie(14));i[l]=h,r=r||h!==c}return(r=r||o.length!==Object.keys(e).length)?i:e}}(s)}var p=a;"function"==typeof p&&(p=p(n));var m=he.apply(void 0,p),g=ce;u&&(g=Se(Te({trace:!1},"object"==typeof u&&u)));var y=[m];return Array.isArray(d)?y=ye([m],d):"function"==typeof d&&(y=d(y)),ue(t,h,g.apply(void 0,y))}function xe(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var i=t.apply(void 0,n);if(!i)throw new Error("prepareAction did not return an object");return Te(Te({type:e,payload:i.payload},"meta"in i&&{meta:i.meta}),"error"in i&&{error:i.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Pe(e){var t,n={},r=[],i={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,i},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),i},addDefaultCase:function(e){return t=e,i}};return e(i),[n,r,t]}function De(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:Oe(e.initialState),o=e.reducers||{},a=Object.keys(o),l={},u={},c={};function h(){var t="function"==typeof e.extraReducers?Pe(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,a=t[1],l=void 0===a?[]:a,c=t[2],h=void 0===c?void 0:c,f=Te(Te({},o),u);return function(e,t,n,r){void 0===n&&(n=[]);var o,a="function"==typeof t?Pe(t):[t,n,r],l=a[0],u=a[1],c=a[2];if(function(e){return"function"==typeof e}(e))o=function(){return Oe(e())};else{var h=Oe(e);o=function(){return h}}function f(e,t){void 0===e&&(e=o());var n=ye([l[t.type]],u.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[c]),n.reduce((function(e,n){if(n){var r;if(i(e))return void 0===(r=n(e,t))?e:r;if(s(e))return ee(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return f.getInitialState=o,f}(r,f,l,h)}return a.forEach((function(e){var n,r,i=o[e],s=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,l[e]=n,u[s]=n,c[e]=r?xe(s,r):xe(s)})),{name:t,reducer:function(e,t){return n||(n=h()),n(e,t)},actions:c,caseReducers:l,getInitialState:function(){return n||(n=h()),n.getInitialState()}}}var Re=["name","message","stack","code"],Le=function(e,t){this.payload=e,this.meta=t},Me=function(e,t){this.payload=e,this.meta=t},Fe=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=Re;n<r.length;n++){var i=r[n];"string"==typeof e[i]&&(t[i]=e[i])}return t}return{message:String(e)}};function Ue(e,t,n){var r=xe(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:ke(Te({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),i=xe(e+"/pending",(function(e,t,n){return{payload:void 0,meta:ke(Te({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),s=xe(e+"/rejected",(function(e,t,r,i,s){return{payload:i,error:(n&&n.serializeError||Fe)(e||"Rejected"),meta:ke(Te({},s||{}),{arg:r,requestId:t,rejectedWithValue:!!i,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),o="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(a,l,u){var c,h=(null==n?void 0:n.idGenerator)?n.idGenerator(e):function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),f=new o,d=new Promise((function(e,t){return f.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:c||"Aborted"})}))})),p=!1,m=function(){return o=this,c=null,m=function(){var o,c,m,g,y;return function(e,t){var n,r,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}(this,(function(v){switch(v.label){case 0:return v.trys.push([0,4,,5]),null===(A=g=null==(o=null==n?void 0:n.condition)?void 0:o.call(n,e,{getState:l,extra:u}))||"object"!=typeof A||"function"!=typeof A.then?[3,2]:[4,g];case 1:g=v.sent(),v.label=2;case 2:if(!1===g)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return p=!0,a(i(h,e,null==(c=null==n?void 0:n.getPendingMeta)?void 0:c.call(n,{requestId:h,arg:e},{getState:l,extra:u}))),[4,Promise.race([d,Promise.resolve(t(e,{dispatch:a,getState:l,extra:u,requestId:h,signal:f.signal,rejectWithValue:function(e,t){return new Le(e,t)},fulfillWithValue:function(e,t){return new Me(e,t)}})).then((function(t){if(t instanceof Le)throw t;return t instanceof Me?r(t.payload,h,e,t.meta):r(t,h,e)}))])];case 3:return m=v.sent(),[3,5];case 4:return y=v.sent(),m=y instanceof Le?s(null,h,e,y.payload,y.meta):s(y,h,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&s.match(m)&&m.meta.condition||a(m),[2,m]}var A}))},new Promise((function(e,t){var n=function(e){try{i(m.next(e))}catch(e){t(e)}},r=function(e){try{i(m.throw(e))}catch(e){t(e)}},i=function(t){return t.done?e(t.value):Promise.resolve(t.value).then(n,r)};i((m=m.apply(o,c)).next())}));var o,c,m}();return Object.assign(m,{abort:function(e){p&&(c=e,f.abort())},requestId:h,arg:e,unwrap:function(){return m.then(Ve)}})}}),{pending:i,rejected:s,fulfilled:r,typePrefix:e})}function Ve(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}Object.assign;var je="listenerMiddleware";xe(je+"/add"),xe(je+"/removeAll"),xe(je+"/remove"),function(){function e(e,t){var n=s[e];return n?n.enumerable=t:s[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[H];return Q.get(t,e)},set:function(t){var n=this[H];Q.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var i=e[t][H];if(!i.P)switch(i.i){case 5:r(i)&&x(i);break;case 4:n(i)&&x(i)}}}function n(e){for(var t=e.t,n=e.k,r=W(n),i=r.length-1;i>=0;i--){var s=r[i];if(s!==H){var o=t[s];if(void 0===o&&!l(t,s))return!0;var a=n[s],u=a&&a[H];if(u?u.t!==o:!c(a,o))return!0}}var h=!!t[H];return r.length!==W(t).length+(h?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var s={};!function(e,t){G[e]||(G[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),i=function(t,n){if(t){for(var r=Array(n.length),i=0;i<n.length;i++)Object.defineProperty(r,""+i,e(i,!0));return r}var s=K(n);delete s[H];for(var o=W(s),a=0;a<o.length;a++){var l=o[a];s[l]=e(l,t||!!s[l].enumerable)}return Object.create(Object.getPrototypeOf(n),s)}(r,t),s={i:r?5:4,A:n?n.A:A(),P:!1,I:!1,D:{},l:n,t:t,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,H,{value:s,writable:!0}),i},S:function(e,n,s){s?i(n)&&n[H].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[H];if(n){var i=n.t,s=n.k,a=n.D,u=n.i;if(4===u)o(s,(function(t){t!==H&&(void 0!==i[t]||l(i,t)?a[t]||e(s[t]):(a[t]=!0,x(n)))})),o(i,(function(e){void 0!==s[e]||l(s,e)||(a[e]=!1,x(n))}));else if(5===u){if(r(n)&&(x(n),a.length=!0),s.length<i.length)for(var c=s.length;c<i.length;c++)a[c]=!1;else for(var h=i.length;h<s.length;h++)a[h]=!0;for(var f=Math.min(s.length,i.length),d=0;d<f;d++)s.hasOwnProperty(d)||(a[d]=!0),void 0===a[d]&&e(s[d])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}()},5982:function(e,t,n){var r=n(4015),i=n.n(r),s=n(3645),o=n.n(s)()(i());o.push([e.id,":root {\n  --toastify-color-light: #fff;\n  --toastify-color-dark: #121212;\n  --toastify-color-info: #3498db;\n  --toastify-color-success: #07bc0c;\n  --toastify-color-warning: #f1c40f;\n  --toastify-color-error: #e74c3c;\n  --toastify-color-transparent: rgba(255, 255, 255, 0.7);\n  --toastify-icon-color-info: var(--toastify-color-info);\n  --toastify-icon-color-success: var(--toastify-color-success);\n  --toastify-icon-color-warning: var(--toastify-color-warning);\n  --toastify-icon-color-error: var(--toastify-color-error);\n  --toastify-toast-width: 320px;\n  --toastify-toast-background: #fff;\n  --toastify-toast-min-height: 64px;\n  --toastify-toast-max-height: 800px;\n  --toastify-font-family: sans-serif;\n  --toastify-z-index: 9999;\n  --toastify-text-color-light: #757575;\n  --toastify-text-color-dark: #fff;\n  --toastify-text-color-info: #fff;\n  --toastify-text-color-success: #fff;\n  --toastify-text-color-warning: #fff;\n  --toastify-text-color-error: #fff;\n  --toastify-spinner-color: #616161;\n  --toastify-spinner-color-empty-area: #e0e0e0;\n  --toastify-color-progress-light: linear-gradient(\n    to right,\n    #4cd964,\n    #5ac8fa,\n    #007aff,\n    #34aadc,\n    #5856d6,\n    #ff2d55\n  );\n  --toastify-color-progress-dark: #bb86fc;\n  --toastify-color-progress-info: var(--toastify-color-info);\n  --toastify-color-progress-success: var(--toastify-color-success);\n  --toastify-color-progress-warning: var(--toastify-color-warning);\n  --toastify-color-progress-error: var(--toastify-color-error);\n}\n\n.Toastify__toast-container {\n  z-index: var(--toastify-z-index);\n  -webkit-transform: translate3d(0, 0, var(--toastify-z-index) px);\n  position: fixed;\n  padding: 4px;\n  width: var(--toastify-toast-width);\n  box-sizing: border-box;\n  color: #fff;\n}\n.Toastify__toast-container--top-left {\n  top: 1em;\n  left: 1em;\n}\n.Toastify__toast-container--top-center {\n  top: 1em;\n  left: 50%;\n  transform: translateX(-50%);\n}\n.Toastify__toast-container--top-right {\n  top: 1em;\n  right: 1em;\n}\n.Toastify__toast-container--bottom-left {\n  bottom: 1em;\n  left: 1em;\n}\n.Toastify__toast-container--bottom-center {\n  bottom: 1em;\n  left: 50%;\n  transform: translateX(-50%);\n}\n.Toastify__toast-container--bottom-right {\n  bottom: 1em;\n  right: 1em;\n}\n\n@media only screen and (max-width : 480px) {\n  .Toastify__toast-container {\n    width: 100vw;\n    padding: 0;\n    left: 0;\n    margin: 0;\n  }\n  .Toastify__toast-container--top-left, .Toastify__toast-container--top-center, .Toastify__toast-container--top-right {\n    top: 0;\n    transform: translateX(0);\n  }\n  .Toastify__toast-container--bottom-left, .Toastify__toast-container--bottom-center, .Toastify__toast-container--bottom-right {\n    bottom: 0;\n    transform: translateX(0);\n  }\n  .Toastify__toast-container--rtl {\n    right: 0;\n    left: initial;\n  }\n}\n.Toastify__toast {\n  position: relative;\n  min-height: var(--toastify-toast-min-height);\n  box-sizing: border-box;\n  margin-bottom: 1rem;\n  padding: 8px;\n  border-radius: 4px;\n  box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1), 0 2px 15px 0 rgba(0, 0, 0, 0.05);\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: justify;\n      justify-content: space-between;\n  max-height: var(--toastify-toast-max-height);\n  overflow: hidden;\n  font-family: var(--toastify-font-family);\n  cursor: pointer;\n  direction: ltr;\n}\n.Toastify__toast--rtl {\n  direction: rtl;\n}\n.Toastify__toast-body {\n  margin: auto 0;\n  -ms-flex: 1 1 auto;\n      flex: 1 1 auto;\n  padding: 6px;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n      align-items: center;\n}\n.Toastify__toast-body > div:last-child {\n  -ms-flex: 1;\n      flex: 1;\n}\n.Toastify__toast-icon {\n  -webkit-margin-end: 10px;\n          margin-inline-end: 10px;\n  width: 20px;\n  -ms-flex-negative: 0;\n      flex-shrink: 0;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.Toastify--animate {\n  animation-fill-mode: both;\n  animation-duration: 0.7s;\n}\n\n.Toastify--animate-icon {\n  animation-fill-mode: both;\n  animation-duration: 0.3s;\n}\n\n@media only screen and (max-width : 480px) {\n  .Toastify__toast {\n    margin-bottom: 0;\n    border-radius: 0;\n  }\n}\n.Toastify__toast-theme--dark {\n  background: var(--toastify-color-dark);\n  color: var(--toastify-text-color-dark);\n}\n.Toastify__toast-theme--light {\n  background: var(--toastify-color-light);\n  color: var(--toastify-text-color-light);\n}\n.Toastify__toast-theme--colored.Toastify__toast--default {\n  background: var(--toastify-color-light);\n  color: var(--toastify-text-color-light);\n}\n.Toastify__toast-theme--colored.Toastify__toast--info {\n  color: var(--toastify-text-color-info);\n  background: var(--toastify-color-info);\n}\n.Toastify__toast-theme--colored.Toastify__toast--success {\n  color: var(--toastify-text-color-success);\n  background: var(--toastify-color-success);\n}\n.Toastify__toast-theme--colored.Toastify__toast--warning {\n  color: var(--toastify-text-color-warning);\n  background: var(--toastify-color-warning);\n}\n.Toastify__toast-theme--colored.Toastify__toast--error {\n  color: var(--toastify-text-color-error);\n  background: var(--toastify-color-error);\n}\n\n.Toastify__progress-bar-theme--light {\n  background: var(--toastify-color-progress-light);\n}\n.Toastify__progress-bar-theme--dark {\n  background: var(--toastify-color-progress-dark);\n}\n.Toastify__progress-bar--info {\n  background: var(--toastify-color-progress-info);\n}\n.Toastify__progress-bar--success {\n  background: var(--toastify-color-progress-success);\n}\n.Toastify__progress-bar--warning {\n  background: var(--toastify-color-progress-warning);\n}\n.Toastify__progress-bar--error {\n  background: var(--toastify-color-progress-error);\n}\n.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info, .Toastify__progress-bar-theme--colored.Toastify__progress-bar--success, .Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning, .Toastify__progress-bar-theme--colored.Toastify__progress-bar--error {\n  background: var(--toastify-color-transparent);\n}\n\n.Toastify__close-button {\n  color: #fff;\n  background: transparent;\n  outline: none;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n  opacity: 0.7;\n  transition: 0.3s ease;\n  -ms-flex-item-align: start;\n      align-self: flex-start;\n}\n.Toastify__close-button--light {\n  color: #000;\n  opacity: 0.3;\n}\n.Toastify__close-button > svg {\n  fill: currentColor;\n  height: 16px;\n  width: 14px;\n}\n.Toastify__close-button:hover, .Toastify__close-button:focus {\n  opacity: 1;\n}\n\n@keyframes Toastify__trackProgress {\n  0% {\n    transform: scaleX(1);\n  }\n  100% {\n    transform: scaleX(0);\n  }\n}\n.Toastify__progress-bar {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 5px;\n  z-index: var(--toastify-z-index);\n  opacity: 0.7;\n  transform-origin: left;\n}\n.Toastify__progress-bar--animated {\n  animation: Toastify__trackProgress linear 1 forwards;\n}\n.Toastify__progress-bar--controlled {\n  transition: transform 0.2s;\n}\n.Toastify__progress-bar--rtl {\n  right: 0;\n  left: initial;\n  transform-origin: right;\n}\n\n.Toastify__spinner {\n  width: 20px;\n  height: 20px;\n  box-sizing: border-box;\n  border: 2px solid;\n  border-radius: 100%;\n  border-color: var(--toastify-spinner-color-empty-area);\n  border-right-color: var(--toastify-spinner-color);\n  animation: Toastify__spin 0.65s linear infinite;\n}\n\n@keyframes Toastify__bounceInRight {\n  from, 60%, 75%, 90%, to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n  from {\n    opacity: 0;\n    transform: translate3d(3000px, 0, 0);\n  }\n  60% {\n    opacity: 1;\n    transform: translate3d(-25px, 0, 0);\n  }\n  75% {\n    transform: translate3d(10px, 0, 0);\n  }\n  90% {\n    transform: translate3d(-5px, 0, 0);\n  }\n  to {\n    transform: none;\n  }\n}\n@keyframes Toastify__bounceOutRight {\n  20% {\n    opacity: 1;\n    transform: translate3d(-20px, 0, 0);\n  }\n  to {\n    opacity: 0;\n    transform: translate3d(2000px, 0, 0);\n  }\n}\n@keyframes Toastify__bounceInLeft {\n  from, 60%, 75%, 90%, to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n  0% {\n    opacity: 0;\n    transform: translate3d(-3000px, 0, 0);\n  }\n  60% {\n    opacity: 1;\n    transform: translate3d(25px, 0, 0);\n  }\n  75% {\n    transform: translate3d(-10px, 0, 0);\n  }\n  90% {\n    transform: translate3d(5px, 0, 0);\n  }\n  to {\n    transform: none;\n  }\n}\n@keyframes Toastify__bounceOutLeft {\n  20% {\n    opacity: 1;\n    transform: translate3d(20px, 0, 0);\n  }\n  to {\n    opacity: 0;\n    transform: translate3d(-2000px, 0, 0);\n  }\n}\n@keyframes Toastify__bounceInUp {\n  from, 60%, 75%, 90%, to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0);\n  }\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0);\n  }\n  75% {\n    transform: translate3d(0, 10px, 0);\n  }\n  90% {\n    transform: translate3d(0, -5px, 0);\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes Toastify__bounceOutUp {\n  20% {\n    transform: translate3d(0, -10px, 0);\n  }\n  40%, 45% {\n    opacity: 1;\n    transform: translate3d(0, 20px, 0);\n  }\n  to {\n    opacity: 0;\n    transform: translate3d(0, -2000px, 0);\n  }\n}\n@keyframes Toastify__bounceInDown {\n  from, 60%, 75%, 90%, to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n  0% {\n    opacity: 0;\n    transform: translate3d(0, -3000px, 0);\n  }\n  60% {\n    opacity: 1;\n    transform: translate3d(0, 25px, 0);\n  }\n  75% {\n    transform: translate3d(0, -10px, 0);\n  }\n  90% {\n    transform: translate3d(0, 5px, 0);\n  }\n  to {\n    transform: none;\n  }\n}\n@keyframes Toastify__bounceOutDown {\n  20% {\n    transform: translate3d(0, 10px, 0);\n  }\n  40%, 45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0);\n  }\n}\n.Toastify__bounce-enter--top-left, .Toastify__bounce-enter--bottom-left {\n  animation-name: Toastify__bounceInLeft;\n}\n.Toastify__bounce-enter--top-right, .Toastify__bounce-enter--bottom-right {\n  animation-name: Toastify__bounceInRight;\n}\n.Toastify__bounce-enter--top-center {\n  animation-name: Toastify__bounceInDown;\n}\n.Toastify__bounce-enter--bottom-center {\n  animation-name: Toastify__bounceInUp;\n}\n\n.Toastify__bounce-exit--top-left, .Toastify__bounce-exit--bottom-left {\n  animation-name: Toastify__bounceOutLeft;\n}\n.Toastify__bounce-exit--top-right, .Toastify__bounce-exit--bottom-right {\n  animation-name: Toastify__bounceOutRight;\n}\n.Toastify__bounce-exit--top-center {\n  animation-name: Toastify__bounceOutUp;\n}\n.Toastify__bounce-exit--bottom-center {\n  animation-name: Toastify__bounceOutDown;\n}\n\n@keyframes Toastify__zoomIn {\n  from {\n    opacity: 0;\n    transform: scale3d(0.3, 0.3, 0.3);\n  }\n  50% {\n    opacity: 1;\n  }\n}\n@keyframes Toastify__zoomOut {\n  from {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n    transform: scale3d(0.3, 0.3, 0.3);\n  }\n  to {\n    opacity: 0;\n  }\n}\n.Toastify__zoom-enter {\n  animation-name: Toastify__zoomIn;\n}\n\n.Toastify__zoom-exit {\n  animation-name: Toastify__zoomOut;\n}\n\n@keyframes Toastify__flipIn {\n  from {\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    animation-timing-function: ease-in;\n    opacity: 0;\n  }\n  40% {\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    animation-timing-function: ease-in;\n  }\n  60% {\n    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\n    opacity: 1;\n  }\n  80% {\n    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);\n  }\n  to {\n    transform: perspective(400px);\n  }\n}\n@keyframes Toastify__flipOut {\n  from {\n    transform: perspective(400px);\n  }\n  30% {\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    opacity: 1;\n  }\n  to {\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    opacity: 0;\n  }\n}\n.Toastify__flip-enter {\n  animation-name: Toastify__flipIn;\n}\n\n.Toastify__flip-exit {\n  animation-name: Toastify__flipOut;\n}\n\n@keyframes Toastify__slideInRight {\n  from {\n    transform: translate3d(110%, 0, 0);\n    visibility: visible;\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes Toastify__slideInLeft {\n  from {\n    transform: translate3d(-110%, 0, 0);\n    visibility: visible;\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes Toastify__slideInUp {\n  from {\n    transform: translate3d(0, 110%, 0);\n    visibility: visible;\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes Toastify__slideInDown {\n  from {\n    transform: translate3d(0, -110%, 0);\n    visibility: visible;\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes Toastify__slideOutRight {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    visibility: hidden;\n    transform: translate3d(110%, 0, 0);\n  }\n}\n@keyframes Toastify__slideOutLeft {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    visibility: hidden;\n    transform: translate3d(-110%, 0, 0);\n  }\n}\n@keyframes Toastify__slideOutDown {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    visibility: hidden;\n    transform: translate3d(0, 500px, 0);\n  }\n}\n@keyframes Toastify__slideOutUp {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    visibility: hidden;\n    transform: translate3d(0, -500px, 0);\n  }\n}\n.Toastify__slide-enter--top-left, .Toastify__slide-enter--bottom-left {\n  animation-name: Toastify__slideInLeft;\n}\n.Toastify__slide-enter--top-right, .Toastify__slide-enter--bottom-right {\n  animation-name: Toastify__slideInRight;\n}\n.Toastify__slide-enter--top-center {\n  animation-name: Toastify__slideInDown;\n}\n.Toastify__slide-enter--bottom-center {\n  animation-name: Toastify__slideInUp;\n}\n\n.Toastify__slide-exit--top-left, .Toastify__slide-exit--bottom-left {\n  animation-name: Toastify__slideOutLeft;\n}\n.Toastify__slide-exit--top-right, .Toastify__slide-exit--bottom-right {\n  animation-name: Toastify__slideOutRight;\n}\n.Toastify__slide-exit--top-center {\n  animation-name: Toastify__slideOutUp;\n}\n.Toastify__slide-exit--bottom-center {\n  animation-name: Toastify__slideOutDown;\n}\n\n@keyframes Toastify__spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/*# sourceMappingURL=ReactToastify.css.map */","",{version:3,sources:["webpack://./node_modules/react-toastify/scss/_variables.scss","webpack://./node_modules/react-toastify/dist/ReactToastify.css","webpack://./node_modules/react-toastify/scss/_toastContainer.scss","webpack://./node_modules/react-toastify/scss/_toast.scss","webpack://./node_modules/react-toastify/scss/_theme.scss","webpack://./node_modules/react-toastify/scss/_closeButton.scss","webpack://./node_modules/react-toastify/scss/_progressBar.scss","webpack://./node_modules/react-toastify/scss/_icons.scss","webpack://./node_modules/react-toastify/scss/animations/_bounce.scss","webpack://./node_modules/react-toastify/scss/animations/_zoom.scss","webpack://./node_modules/react-toastify/scss/animations/_flip.scss","webpack://./node_modules/react-toastify/scss/animations/_slide.scss","webpack://./node_modules/react-toastify/scss/animations/_spin.scss"],names:[],mappings:"AAGA;EACE,4BAAA;EACA,8BAAA;EACA,8BAAA;EACA,iCAAA;EACA,iCAAA;EACA,+BAAA;EACA,sDAAA;EAEA,sDAAA;EACA,4DAAA;EACA,4DAAA;EACA,wDAAA;EAEA,6BAAA;EACA,iCAAA;EACA,iCAAA;EACA,kCAAA;EACA,kCAAA;EACA,wBAAA;EAEA,oCAAA;EACA,gCAAA;EAGA,gCAAA;EACA,mCAAA;EACA,mCAAA;EACA,iCAAA;EAEA,iCAAA;EACA,4CAAA;EAGA;;;;;;;;GAAA;EAUA,uCAAA;EACA,0DAAA;EACA,gEAAA;EACA,gEAAA;EACA,4DAAA;ACXF;;ACxCA;EACE,gCAAA;EACA,gEAAA;EACA,eAAA;EACA,YAAA;EACA,kCAAA;EACA,sBAAA;EACA,WAAA;AD2CF;AC1CE;EACE,QAAA;EACA,SAAA;AD4CJ;AC1CE;EACE,QAAA;EACA,SAAA;EACA,2BAAA;AD4CJ;AC1CE;EACE,QAAA;EACA,UAAA;AD4CJ;AC1CE;EACE,WAAA;EACA,SAAA;AD4CJ;AC1CE;EACE,WAAA;EACA,SAAA;EACA,2BAAA;AD4CJ;AC1CE;EACE,WAAA;EACA,UAAA;AD4CJ;;ACxCA;EACE;IACE,YAAA;IACA,UAAA;IACA,OAAA;IACA,SAAA;ED2CF;EC1CE;IAGE,MAAA;IACA,wBAAA;ED0CJ;ECxCE;IAGE,SAAA;IACA,wBAAA;EDwCJ;ECtCE;IACE,QAAA;IACA,aAAA;EDwCJ;AACF;AEjGA;EACE,kBAAA;EACA,4CAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,kBAAA;EACA,6EAAA;EACA,oBAAA;EAAA,aAAA;EACA,sBAAA;MAAA,8BAAA;EACA,4CAAA;EACA,gBAAA;EACA,wCAAA;EACA,eAAA;EACA,cAAA;AFmGF;AElGE;EACE,cAAA;AFoGJ;AElGE;EACE,cAAA;EACA,kBAAA;MAAA,cAAA;EACA,YAAA;EACA,oBAAA;EAAA,aAAA;EACA,sBAAA;MAAA,mBAAA;AFoGJ;AEnGI;EACE,WAAA;MAAA,OAAA;AFqGN;AElGE;EACE,wBAAA;UAAA,uBAAA;EACA,WAAA;EACA,oBAAA;MAAA,cAAA;EACA,oBAAA;EAAA,aAAA;AFoGJ;;AEhGA;EACE,yBAAA;EACA,wBAAA;AFmGF;;AEhGA;EACE,yBAAA;EACA,wBAAA;AFmGF;;AEhGA;EACE;IACE,gBAAA;IACA,gBAAA;EFmGF;AACF;AGpJE;EACE,sCAAA;EACA,sCAAA;AHsJJ;AGpJE;EACE,uCAAA;EACA,uCAAA;AHsJJ;AGpJE;EACE,uCAAA;EACA,uCAAA;AHsJJ;AGpJE;EACE,sCAAA;EACA,sCAAA;AHsJJ;AGpJE;EACE,yCAAA;EACA,yCAAA;AHsJJ;AGpJE;EACE,yCAAA;EACA,yCAAA;AHsJJ;AGpJE;EACE,uCAAA;EACA,uCAAA;AHsJJ;;AGjJE;EACE,gDAAA;AHoJJ;AGlJE;EACE,+CAAA;AHoJJ;AGlJE;EACE,+CAAA;AHoJJ;AGlJE;EACE,kDAAA;AHoJJ;AGlJE;EACE,kDAAA;AHoJJ;AGlJE;EACE,gDAAA;AHoJJ;AGlJE;EAIE,6CAAA;AHiJJ;;AIvMA;EACE,WAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,UAAA;EACA,eAAA;EACA,YAAA;EACA,qBAAA;EACA,0BAAA;MAAA,sBAAA;AJ0MF;AIxME;EACE,WAAA;EACA,YAAA;AJ0MJ;AIvME;EACE,kBAAA;EACA,YAAA;EACA,WAAA;AJyMJ;AItME;EAEE,UAAA;AJuMJ;;AK/NA;EACE;IACE,oBAAA;ELkOF;EKhOA;IACE,oBAAA;ELkOF;AACF;AK/NA;EACE,kBAAA;EACA,SAAA;EACA,OAAA;EACA,WAAA;EACA,WAAA;EACA,gCAAA;EACA,YAAA;EACA,sBAAA;ALiOF;AK/NE;EACE,oDAAA;ALiOJ;AK9NE;EACE,0BAAA;ALgOJ;AK7NE;EACE,QAAA;EACA,aAAA;EACA,uBAAA;AL+NJ;;AM7PA;EACE,WAAA;EACA,YAAA;EACA,sBAAA;EACA,iBAAA;EACA,mBAAA;EACA,sDAAA;EACA,iDAAA;EACA,+CAAA;ANgQF;;AOpQA;EACE;IAJA,8DAAA;EP4QA;EOjQA;IACE,UAAA;IACA,oCAAA;EPmQF;EOjQA;IACE,UAAA;IACA,mCAAA;EPmQF;EOjQA;IACE,kCAAA;EPmQF;EOjQA;IACE,kCAAA;EPmQF;EOjQA;IACE,eAAA;EPmQF;AACF;AOhQA;EACE;IACE,UAAA;IACA,mCAAA;EPkQF;EOhQA;IACE,UAAA;IACA,oCAAA;EPkQF;AACF;AO/PA;EACE;IA1CA,8DAAA;EP4SA;EO3PA;IACE,UAAA;IACA,qCAAA;EP6PF;EO3PA;IACE,UAAA;IACA,kCAAA;EP6PF;EO3PA;IACE,mCAAA;EP6PF;EO3PA;IACE,iCAAA;EP6PF;EO3PA;IACE,eAAA;EP6PF;AACF;AO1PA;EACE;IACE,UAAA;IACA,kCAAA;EP4PF;EO1PA;IACE,UAAA;IACA,qCAAA;EP4PF;AACF;AOzPA;EACE;IAhFA,8DAAA;EP4UA;EOrPA;IACE,UAAA;IACA,oCAAA;EPuPF;EOrPA;IACE,UAAA;IACA,mCAAA;EPuPF;EOrPA;IACE,kCAAA;EPuPF;EOrPA;IACE,kCAAA;EPuPF;EOrPA;IACE,+BAAA;EPuPF;AACF;AOpPA;EACE;IACE,mCAAA;EPsPF;EOpPA;IAEE,UAAA;IACA,kCAAA;EPqPF;EOnPA;IACE,UAAA;IACA,qCAAA;EPqPF;AACF;AOlPA;EACE;IA1HA,8DAAA;EP+WA;EO9OA;IACE,UAAA;IACA,qCAAA;EPgPF;EO9OA;IACE,UAAA;IACA,kCAAA;EPgPF;EO9OA;IACE,mCAAA;EPgPF;EO9OA;IACE,iCAAA;EPgPF;EO9OA;IACE,eAAA;EPgPF;AACF;AO7OA;EACE;IACE,kCAAA;EP+OF;EO7OA;IAEE,UAAA;IACA,mCAAA;EP8OF;EO5OA;IACE,UAAA;IACA,oCAAA;EP8OF;AACF;AO1OE;EAEE,sCAAA;AP2OJ;AOzOE;EAEE,uCAAA;AP0OJ;AOxOE;EACE,sCAAA;AP0OJ;AOxOE;EACE,oCAAA;AP0OJ;;AOrOE;EAEE,uCAAA;APuOJ;AOrOE;EAEE,wCAAA;APsOJ;AOpOE;EACE,qCAAA;APsOJ;AOpOE;EACE,uCAAA;APsOJ;;AQxaA;EACE;IACE,UAAA;IACA,iCAAA;ER2aF;EQzaA;IACE,UAAA;ER2aF;AACF;AQxaA;EACE;IACE,UAAA;ER0aF;EQxaA;IACE,UAAA;IACA,iCAAA;ER0aF;EQxaA;IACE,UAAA;ER0aF;AACF;AQvaA;EACE,gCAAA;ARyaF;;AQtaA;EACE,iCAAA;ARyaF;;ASrcA;EACE;IACE,sDAAA;IACA,kCAAA;IACA,UAAA;ETwcF;EStcA;IACE,uDAAA;IACA,kCAAA;ETwcF;EStcA;IACE,sDAAA;IACA,UAAA;ETwcF;EStcA;IACE,sDAAA;ETwcF;EStcA;IACE,6BAAA;ETwcF;AACF;ASrcA;EACE;IACE,6BAAA;ETucF;ESrcA;IACE,uDAAA;IACA,UAAA;ETucF;ESrcA;IACE,sDAAA;IACA,UAAA;ETucF;AACF;ASpcA;EACE,gCAAA;ATscF;;ASncA;EACE,iCAAA;ATscF;;AU3eA;EACE;IACE,kCAAA;IACA,mBAAA;EV8eF;EU5eA;IARA,+BAAA;EVufA;AACF;AU3eA;EACE;IACE,mCAAA;IACA,mBAAA;EV6eF;EU3eA;IAlBA,+BAAA;EVggBA;AACF;AU1eA;EACE;IACE,kCAAA;IACA,mBAAA;EV4eF;EU1eA;IA5BA,+BAAA;EVygBA;AACF;AUzeA;EACE;IACE,mCAAA;IACA,mBAAA;EV2eF;EUzeA;IAtCA,+BAAA;EVkhBA;AACF;AUxeA;EACE;IA5CA,+BAAA;EVuhBA;EUxeA;IACE,kBAAA;IACA,kCAAA;EV0eF;AACF;AUveA;EACE;IAtDA,+BAAA;EVgiBA;EUveA;IACE,kBAAA;IACA,mCAAA;EVyeF;AACF;AUteA;EACE;IAhEA,+BAAA;EVyiBA;EUteA;IACE,kBAAA;IACA,mCAAA;EVweF;AACF;AUreA;EACE;IA1EA,+BAAA;EVkjBA;EUreA;IACE,kBAAA;IACA,oCAAA;EVueF;AACF;AUneE;EAEE,qCAAA;AVoeJ;AUleE;EAEE,sCAAA;AVmeJ;AUjeE;EACE,qCAAA;AVmeJ;AUjeE;EACE,mCAAA;AVmeJ;;AU9dE;EAEE,sCAAA;AVgeJ;AU9dE;EAEE,uCAAA;AV+dJ;AU7dE;EACE,oCAAA;AV+dJ;AU7dE;EACE,sCAAA;AV+dJ;;AWjlBA;EACE;IACE,uBAAA;EXolBF;EWllBA;IACE,yBAAA;EXolBF;AACF;;AAYA,4CAA4C",sourceRoot:""}]),t.Z=o},3645:function(e){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var s=0;s<this.length;s++){var o=this[s][0];null!=o&&(i[o]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},4015:function(e){function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,i=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,i,s=[],o=!0,a=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(s.push(r.value),!t||s.length!==t);o=!0);}catch(e){a=!0,i=e}finally{try{o||null==n.return||n.return()}finally{if(a)throw i}}return s}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=i[1],o=i[3];if(!o)return s;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(l," */"),c=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[s].concat(c).concat([u]).join("\n")}return[s].join("\n")}},5503:function(e,t,n){n.d(t,{ZF:function(){return r.ZF}});var r=n(389);(0,r.KN)("firebase","9.9.1","app")},2724:function(e,t,n){n.d(t,{Xb:function(){return Ie},v0:function(){return Rt},e5:function(){return Oe},w7:function(){return Ne}});var r=n(4444),i=n(389);function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}Object.create,Object.create;var o=n(3333),a=n(8463);const l=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},u=new r.LL("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),c=new o.Yd("@firebase/auth");function h(e,...t){c.logLevel<=o.in.ERROR&&c.error(`Auth (${i.Jn}): ${e}`,...t)}function f(e,...t){throw p(e,...t)}function d(e,...t){return p(e,...t)}function p(e,...t){if("string"!=typeof e){const n=t[0],r=[...t.slice(1)];return r[0]&&(r[0].appName=e.name),e._errorFactory.create(n,...r)}return u.create(e,...t)}function m(e,t,...n){if(!e)throw p(t,...n)}function g(e){const t="INTERNAL ASSERTION FAILED: "+e;throw h(t),new Error(t)}function y(e,t){e||g(t)}const v=new Map;function A(e){y(e instanceof Function,"Expected a class definition");let t=v.get(e);return t?(y(t instanceof e,"Instance stored in cache mismatched with class"),t):(t=new e,v.set(e,t),t)}function b(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function w(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}class E{constructor(e,t){this.shortDelay=e,this.longDelay=t,y(t>e,"Short delay should be less than long delay!"),this.isMobile=(0,r.uI)()||(0,r.b$)()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===w()||"https:"===w()||(0,r.ru)()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function _(e,t){y(e.emulator,"Emulator should always be set here");const{url:n}=e.emulator;return t?`${n}${t.startsWith("/")?t.slice(1):t}`:n}class C{static initialize(e,t,n){this.fetchImpl=e,t&&(this.headersImpl=t),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void g("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void g("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void g("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const T={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error"},k=new E(3e4,6e4);function S(e,t){return e.tenantId&&!t.tenantId?Object.assign(Object.assign({},t),{tenantId:e.tenantId}):t}async function I(e,t,n,i,s={}){return O(e,s,(async()=>{let s={},o={};i&&("GET"===t?o=i:s={body:JSON.stringify(i)});const a=(0,r.xO)(Object.assign({key:e.config.apiKey},o)).slice(1),l=await e._getAdditionalHeaders();return l["Content-Type"]="application/json",e.languageCode&&(l["X-Firebase-Locale"]=e.languageCode),C.fetch()(x(e,e.config.apiHost,n,a),Object.assign({method:t,headers:l,referrerPolicy:"no-referrer"},s))}))}async function O(e,t,n){e._canInitEmulator=!1;const i=Object.assign(Object.assign({},T),t);try{const t=new P(e),s=await Promise.race([n(),t.promise]);t.clearNetworkTimeout();const o=await s.json();if("needConfirmation"in o)throw D(e,"account-exists-with-different-credential",o);if(s.ok&&!("errorMessage"in o))return o;{const t=s.ok?o.errorMessage:o.error.message,[n,a]=t.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw D(e,"credential-already-in-use",o);if("EMAIL_EXISTS"===n)throw D(e,"email-already-in-use",o);if("USER_DISABLED"===n)throw D(e,"user-disabled",o);const u=i[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(a)throw function(e,t,n){const i=Object.assign(Object.assign({},l()),{[t]:n});return new r.LL("auth","Firebase",i).create(t,{appName:e.name})}(e,u,a);f(e,u)}}catch(t){if(t instanceof r.ZR)throw t;f(e,"network-request-failed")}}async function N(e,t,n,r,i={}){const s=await I(e,t,n,r,i);return"mfaPendingCredential"in s&&f(e,"multi-factor-auth-required",{_serverResponse:s}),s}function x(e,t,n,r){const i=`${t}${n}?${r}`;return e.config.emulator?_(e.config,i):`${e.config.apiScheme}://${i}`}class P{constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,t)=>{this.timer=setTimeout((()=>t(d(this.auth,"network-request-failed"))),k.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function D(e,t,n){const r={appName:e.name};n.email&&(r.email=n.email),n.phoneNumber&&(r.phoneNumber=n.phoneNumber);const i=d(e,t,r);return i.customData._tokenResponse=n,i}function R(e){if(e)try{const t=new Date(Number(e));if(!isNaN(t.getTime()))return t.toUTCString()}catch(e){}}function L(e){return 1e3*Number(e)}function M(e){var t;const[n,i,s]=e.split(".");if(void 0===n||void 0===i||void 0===s)return h("JWT malformed, contained fewer than 3 sections"),null;try{const e=(0,r.tV)(i);return e?JSON.parse(e):(h("Failed to decode base64 JWT payload"),null)}catch(e){return h("Caught error parsing JWT payload as JSON",null===(t=e)||void 0===t?void 0:t.toString()),null}}async function F(e,t,n=!1){if(n)return t;try{return await t}catch(t){throw t instanceof r.ZR&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(t)&&e.auth.currentUser===e&&await e.auth.signOut(),t}}class U{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var t;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(t=this.user.stsTokenManager.expirationTime)&&void 0!==t?t:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const t=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),t)}async iteration(){var e;try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===(null===(e=t)||void 0===e?void 0:e.code)&&this.schedule(!0))}this.schedule()}}class V{constructor(e,t){this.createdAt=e,this.lastLoginAt=t,this._initializeTime()}_initializeTime(){this.lastSignInTime=R(this.lastLoginAt),this.creationTime=R(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function j(e){var t;const n=e.auth,r=await e.getIdToken(),i=await F(e,async function(e,t){return I(e,"POST","/v1/accounts:lookup",t)}(n,{idToken:r}));m(null==i?void 0:i.users.length,n,"internal-error");const o=i.users[0];e._notifyReloadListener(o);const a=(null===(t=o.providerUserInfo)||void 0===t?void 0:t.length)?o.providerUserInfo.map((e=>{var{providerId:t}=e,n=s(e,["providerId"]);return{providerId:t,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],l=(u=e.providerData,c=a,[...u.filter((e=>!c.some((t=>t.providerId===e.providerId)))),...c]);var u,c;const h=e.isAnonymous,f=!(e.email&&o.passwordHash||(null==l?void 0:l.length)),d=!!h&&f,p={uid:o.localId,displayName:o.displayName||null,photoURL:o.photoUrl||null,email:o.email||null,emailVerified:o.emailVerified||!1,phoneNumber:o.phoneNumber||null,tenantId:o.tenantId||null,providerData:l,metadata:new V(o.createdAt,o.lastLoginAt),isAnonymous:d};Object.assign(e,p)}class z{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){m(e.idToken,"internal-error"),m(void 0!==e.idToken,"internal-error"),m(void 0!==e.refreshToken,"internal-error");const t="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):function(e){const t=M(e);return m(t,"internal-error"),m(void 0!==t.exp,"internal-error"),m(void 0!==t.iat,"internal-error"),Number(t.exp)-Number(t.iat)}(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,t)}async getToken(e,t=!1){return m(!this.accessToken||this.refreshToken,e,"user-token-expired"),t||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,t){const{accessToken:n,refreshToken:i,expiresIn:s}=await async function(e,t){const n=await O(e,{},(async()=>{const n=(0,r.xO)({grant_type:"refresh_token",refresh_token:t}).slice(1),{tokenApiHost:i,apiKey:s}=e.config,o=x(e,i,"/v1/token",`key=${s}`),a=await e._getAdditionalHeaders();return a["Content-Type"]="application/x-www-form-urlencoded",C.fetch()(o,{method:"POST",headers:a,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(e,t);this.updateTokensAndExpiration(n,i,Number(s))}updateTokensAndExpiration(e,t,n){this.refreshToken=t||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(e,t){const{refreshToken:n,accessToken:r,expirationTime:i}=t,s=new z;return n&&(m("string"==typeof n,"internal-error",{appName:e}),s.refreshToken=n),r&&(m("string"==typeof r,"internal-error",{appName:e}),s.accessToken=r),i&&(m("number"==typeof i,"internal-error",{appName:e}),s.expirationTime=i),s}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new z,this.toJSON())}_performRefresh(){return g("not implemented")}}function B(e,t){m("string"==typeof e||void 0===e,"internal-error",{appName:t})}class ${constructor(e){var{uid:t,auth:n,stsTokenManager:r}=e,i=s(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new U(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=t,this.auth=n,this.stsTokenManager=r,this.accessToken=r.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.emailVerified=i.emailVerified||!1,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.tenantId=i.tenantId||null,this.providerData=i.providerData?[...i.providerData]:[],this.metadata=new V(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(e){const t=await F(this,this.stsTokenManager.getToken(this.auth,e));return m(t,this.auth,"internal-error"),this.accessToken!==t&&(this.accessToken=t,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),t}getIdTokenResult(e){return async function(e,t=!1){const n=(0,r.m9)(e),i=await n.getIdToken(t),s=M(i);m(s&&s.exp&&s.auth_time&&s.iat,n.auth,"internal-error");const o="object"==typeof s.firebase?s.firebase:void 0,a=null==o?void 0:o.sign_in_provider;return{claims:s,token:i,authTime:R(L(s.auth_time)),issuedAtTime:R(L(s.iat)),expirationTime:R(L(s.exp)),signInProvider:a||null,signInSecondFactor:(null==o?void 0:o.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const t=(0,r.m9)(e);await j(t),await t.auth._persistUserIfCurrent(t),t.auth._notifyListenersIfCurrent(t)}(this)}_assign(e){this!==e&&(m(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){return new $(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(e){m(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,t=!1){let n=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),n=!0),t&&await j(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const e=await this.getIdToken();return await F(this,async function(e,t){return I(e,"POST","/v1/accounts:delete",t)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,t){var n,r,i,s,o,a,l,u;const c=null!==(n=t.displayName)&&void 0!==n?n:void 0,h=null!==(r=t.email)&&void 0!==r?r:void 0,f=null!==(i=t.phoneNumber)&&void 0!==i?i:void 0,d=null!==(s=t.photoURL)&&void 0!==s?s:void 0,p=null!==(o=t.tenantId)&&void 0!==o?o:void 0,g=null!==(a=t._redirectEventId)&&void 0!==a?a:void 0,y=null!==(l=t.createdAt)&&void 0!==l?l:void 0,v=null!==(u=t.lastLoginAt)&&void 0!==u?u:void 0,{uid:A,emailVerified:b,isAnonymous:w,providerData:E,stsTokenManager:_}=t;m(A&&_,e,"internal-error");const C=z.fromJSON(this.name,_);m("string"==typeof A,e,"internal-error"),B(c,e.name),B(h,e.name),m("boolean"==typeof b,e,"internal-error"),m("boolean"==typeof w,e,"internal-error"),B(f,e.name),B(d,e.name),B(p,e.name),B(g,e.name),B(y,e.name),B(v,e.name);const T=new $({uid:A,auth:e,email:h,emailVerified:b,displayName:c,isAnonymous:w,photoURL:d,phoneNumber:f,tenantId:p,stsTokenManager:C,createdAt:y,lastLoginAt:v});return E&&Array.isArray(E)&&(T.providerData=E.map((e=>Object.assign({},e)))),g&&(T._redirectEventId=g),T}static async _fromIdTokenResponse(e,t,n=!1){const r=new z;r.updateFromServerResponse(t);const i=new $({uid:t.localId,auth:e,stsTokenManager:r,isAnonymous:n});return await j(i),i}}class H{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,t){this.storage[e]=t}async _get(e){const t=this.storage[e];return void 0===t?null:t}async _remove(e){delete this.storage[e]}_addListener(e,t){}_removeListener(e,t){}}H.type="NONE";const q=H;function W(e,t,n){return`firebase:${e}:${t}:${n}`}class K{constructor(e,t,n){this.persistence=e,this.auth=t,this.userKey=n;const{config:r,name:i}=this.auth;this.fullUserKey=W(this.userKey,r.apiKey,i),this.fullPersistenceKey=W("persistence",r.apiKey,i),this.boundEventHandler=t._onStorageEvent.bind(t),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);return e?$._fromJSON(this.auth,e):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const t=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,t?this.setCurrentUser(t):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,t,n="authUser"){if(!t.length)return new K(A(q),e,n);const r=(await Promise.all(t.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let i=r[0]||A(q);const s=W(n,e.config.apiKey,e.name);let o=null;for(const n of t)try{const t=await n._get(s);if(t){const r=$._fromJSON(e,t);n!==i&&(o=r),i=n;break}}catch(e){}const a=r.filter((e=>e._shouldAllowMigration));return i._shouldAllowMigration&&a.length?(i=a[0],o&&await i._set(s,o.toJSON()),await Promise.all(t.map((async e=>{if(e!==i)try{await e._remove(s)}catch(e){}}))),new K(i,e,n)):new K(i,e,n)}}function G(e){const t=e.toLowerCase();if(t.includes("opera/")||t.includes("opr/")||t.includes("opios/"))return"Opera";if(Y(t))return"IEMobile";if(t.includes("msie")||t.includes("trident/"))return"IE";if(t.includes("edge/"))return"Edge";if(Q(t))return"Firefox";if(t.includes("silk/"))return"Silk";if(ee(t))return"Blackberry";if(te(t))return"Webos";if(J(t))return"Safari";if((t.includes("chrome/")||X(t))&&!t.includes("edge/"))return"Chrome";if(Z(t))return"Android";{const t=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=e.match(t);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function Q(e=(0,r.z$)()){return/firefox\//i.test(e)}function J(e=(0,r.z$)()){const t=e.toLowerCase();return t.includes("safari/")&&!t.includes("chrome/")&&!t.includes("crios/")&&!t.includes("android")}function X(e=(0,r.z$)()){return/crios\//i.test(e)}function Y(e=(0,r.z$)()){return/iemobile/i.test(e)}function Z(e=(0,r.z$)()){return/android/i.test(e)}function ee(e=(0,r.z$)()){return/blackberry/i.test(e)}function te(e=(0,r.z$)()){return/webos/i.test(e)}function ne(e=(0,r.z$)()){return/iphone|ipad|ipod/i.test(e)||/macintosh/i.test(e)&&/mobile/i.test(e)}function re(e=(0,r.z$)()){return ne(e)||Z(e)||te(e)||ee(e)||/windows phone/i.test(e)||Y(e)}function ie(e,t=[]){let n;switch(e){case"Browser":n=G((0,r.z$)());break;case"Worker":n=`${G((0,r.z$)())}-${e}`;break;default:n=e}const s=t.length?t.join(","):"FirebaseCore-web";return`${n}/JsCore/${i.Jn}/${s}`}class se{constructor(e){this.auth=e,this.queue=[]}pushCallback(e,t){const n=t=>new Promise(((n,r)=>{try{n(e(t))}catch(e){r(e)}}));n.onAbort=t,this.queue.push(n);const r=this.queue.length-1;return()=>{this.queue[r]=()=>Promise.resolve()}}async runMiddleware(e){var t;if(this.auth.currentUser===e)return;const n=[];try{for(const t of this.queue)await t(e),t.onAbort&&n.push(t.onAbort)}catch(e){n.reverse();for(const e of n)try{e()}catch(e){}throw this.auth._errorFactory.create("login-blocked",{originalMessage:null===(t=e)||void 0===t?void 0:t.message})}}}class oe{constructor(e,t,n){this.app=e,this.heartbeatServiceProvider=t,this.config=n,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new le(this),this.idTokenSubscription=new le(this),this.beforeStateQueue=new se(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=u,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=n.sdkClientVersion}_initializeWithPersistence(e,t){return t&&(this._popupRedirectResolver=A(t)),this._initializationPromise=this.queue((async()=>{var n,r;if(!this._deleted&&(this.persistenceManager=await K.create(this,e),!this._deleted)){if(null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(t),this.lastNotifiedUid=(null===(r=this.currentUser)||void 0===r?void 0:r.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e,!0):void 0}async initializeCurrentUser(e){var t;const n=await this.assertedPersistence.getCurrentUser();let r=n,i=!1;if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const n=null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId,s=null==r?void 0:r._redirectEventId,o=await this.tryRedirectSignIn(e);n&&n!==s||!(null==o?void 0:o.user)||(r=o.user,i=!0)}if(!r)return this.directlySetCurrentUser(null);if(!r._redirectEventId){if(i)try{await this.beforeStateQueue.runMiddleware(r)}catch(e){r=n,this._popupRedirectResolver._overrideRedirectResult(this,(()=>Promise.reject(e)))}return r?this.reloadAndSetCurrentUserOrClear(r):this.directlySetCurrentUser(null)}return m(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===r._redirectEventId?this.directlySetCurrentUser(r):this.reloadAndSetCurrentUserOrClear(r)}async tryRedirectSignIn(e){let t=null;try{t=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return t}async reloadAndSetCurrentUserOrClear(e){var t;try{await j(e)}catch(e){if("auth/network-request-failed"!==(null===(t=e)||void 0===t?void 0:t.code))return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){const t=e?(0,r.m9)(e):null;return t&&m(t.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(t&&t._clone(this))}async _updateCurrentUser(e,t=!1){if(!this._deleted)return e&&m(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),t||await this.beforeStateQueue.runMiddleware(e),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return await this.beforeStateQueue.runMiddleware(null),(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null,!0)}setPersistence(e){return this.queue((async()=>{await this.assertedPersistence.setPersistence(A(e))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(e){this._errorFactory=new r.LL("auth","Firebase",e())}onAuthStateChanged(e,t,n){return this.registerStateListener(this.authStateSubscription,e,t,n)}beforeAuthStateChanged(e,t){return this.beforeStateQueue.pushCallback(e,t)}onIdTokenChanged(e,t,n){return this.registerStateListener(this.idTokenSubscription,e,t,n)}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,t){const n=await this.getOrInitRedirectPersistenceManager(t);return null===e?n.removeCurrentUser():n.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const t=e&&A(e)||this._popupRedirectResolver;m(t,this,"argument-error"),this.redirectPersistenceManager=await K.create(this,[A(t._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var t,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(t=this._currentUser)||void 0===t?void 0:t._redirectEventId)===e?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,t;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(t=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==t?t:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,t,n,r){if(this._deleted)return()=>{};const i="function"==typeof t?t:t.next.bind(t),s=this._isInitialized?Promise.resolve():this._initializationPromise;return m(s,this,"internal-error"),s.then((()=>i(this.currentUser))),"function"==typeof t?e.addObserver(t,n,r):e.addObserver(t)}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&(this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh()),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return m(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=ie(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const t={"X-Client-Version":this.clientVersion};this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId);const n=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());return n&&(t["X-Firebase-Client"]=n),t}}function ae(e){return(0,r.m9)(e)}class le{constructor(e){this.auth=e,this.observer=null,this.addObserver=(0,r.ne)((e=>this.observer=e))}get next(){return m(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class ue{constructor(e,t){this.providerId=e,this.signInMethod=t}toJSON(){return g("not implemented")}_getIdTokenResponse(e){return g("not implemented")}_linkToIdToken(e,t){return g("not implemented")}_getReauthenticationResolver(e){return g("not implemented")}}class ce extends ue{constructor(e,t,n,r=null){super("password",n),this._email=e,this._password=t,this._tenantId=r}static _fromEmailAndPassword(e,t){return new ce(e,t,"password")}static _fromEmailAndCode(e,t,n=null){return new ce(e,t,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e;if((null==t?void 0:t.email)&&(null==t?void 0:t.password)){if("password"===t.signInMethod)return this._fromEmailAndPassword(t.email,t.password);if("emailLink"===t.signInMethod)return this._fromEmailAndCode(t.email,t.password,t.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return async function(e,t){return N(e,"POST","/v1/accounts:signInWithPassword",S(e,t))}(e,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return N(e,"POST","/v1/accounts:signInWithEmailLink",S(e,t))}(e,{email:this._email,oobCode:this._password});default:f(e,"internal-error")}}async _linkToIdToken(e,t){switch(this.signInMethod){case"password":return async function(e,t){return I(e,"POST","/v1/accounts:update",t)}(e,{idToken:t,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return N(e,"POST","/v1/accounts:signInWithEmailLink",S(e,t))}(e,{idToken:t,email:this._email,oobCode:this._password});default:f(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function he(e,t){return N(e,"POST","/v1/accounts:signInWithIdp",S(e,t))}class fe extends ue{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const t=new fe(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(t.idToken=e.idToken),e.accessToken&&(t.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(t.nonce=e.nonce),e.pendingToken&&(t.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(t.accessToken=e.oauthToken,t.secret=e.oauthTokenSecret):f("argument-error"),t}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e,{providerId:n,signInMethod:r}=t,i=s(t,["providerId","signInMethod"]);if(!n||!r)return null;const o=new fe(n,r);return o.idToken=i.idToken||void 0,o.accessToken=i.accessToken||void 0,o.secret=i.secret,o.nonce=i.nonce,o.pendingToken=i.pendingToken||null,o}_getIdTokenResponse(e){return he(e,this.buildRequest())}_linkToIdToken(e,t){const n=this.buildRequest();return n.idToken=t,he(e,n)}_getReauthenticationResolver(e){const t=this.buildRequest();return t.autoCreate=!1,he(e,t)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const t={};this.idToken&&(t.id_token=this.idToken),this.accessToken&&(t.access_token=this.accessToken),this.secret&&(t.oauth_token_secret=this.secret),t.providerId=this.providerId,this.nonce&&!this.pendingToken&&(t.nonce=this.nonce),e.postBody=(0,r.xO)(t)}return e}}const de={USER_NOT_FOUND:"user-not-found"};class pe extends ue{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,t){return new pe({verificationId:e,verificationCode:t})}static _fromTokenResponse(e,t){return new pe({phoneNumber:e,temporaryProof:t})}_getIdTokenResponse(e){return async function(e,t){return N(e,"POST","/v1/accounts:signInWithPhoneNumber",S(e,t))}(e,this._makeVerificationRequest())}_linkToIdToken(e,t){return async function(e,t){const n=await N(e,"POST","/v1/accounts:signInWithPhoneNumber",S(e,t));if(n.temporaryProof)throw D(e,"account-exists-with-different-credential",n);return n}(e,Object.assign({idToken:t},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,t){return N(e,"POST","/v1/accounts:signInWithPhoneNumber",S(e,Object.assign(Object.assign({},t),{operation:"REAUTH"})),de)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:t,verificationId:n,verificationCode:r}=this.params;return e&&t?{temporaryProof:e,phoneNumber:t}:{sessionInfo:n,code:r}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:t,verificationCode:n,phoneNumber:r,temporaryProof:i}=e;return n||t||r||i?new pe({verificationId:t,verificationCode:n,phoneNumber:r,temporaryProof:i}):null}}class me{constructor(e){var t,n,i,s,o,a;const l=(0,r.zd)((0,r.pd)(e)),u=null!==(t=l.apiKey)&&void 0!==t?t:null,c=null!==(n=l.oobCode)&&void 0!==n?n:null,h=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(i=l.mode)&&void 0!==i?i:null);m(u&&c&&h,"argument-error"),this.apiKey=u,this.operation=h,this.code=c,this.continueUrl=null!==(s=l.continueUrl)&&void 0!==s?s:null,this.languageCode=null!==(o=l.languageCode)&&void 0!==o?o:null,this.tenantId=null!==(a=l.tenantId)&&void 0!==a?a:null}static parseLink(e){const t=function(e){const t=(0,r.zd)((0,r.pd)(e)).link,n=t?(0,r.zd)((0,r.pd)(t)).deep_link_id:null,i=(0,r.zd)((0,r.pd)(e)).deep_link_id;return(i?(0,r.zd)((0,r.pd)(i)).link:null)||i||n||t||e}(e);try{return new me(t)}catch(e){return null}}}class ge{constructor(){this.providerId=ge.PROVIDER_ID}static credential(e,t){return ce._fromEmailAndPassword(e,t)}static credentialWithLink(e,t){const n=me.parseLink(t);return m(n,"argument-error"),ce._fromEmailAndCode(e,n.code,n.tenantId)}}ge.PROVIDER_ID="password",ge.EMAIL_PASSWORD_SIGN_IN_METHOD="password",ge.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class ye{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class ve extends ye{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class Ae extends ve{constructor(){super("facebook.com")}static credential(e){return fe._fromParams({providerId:Ae.PROVIDER_ID,signInMethod:Ae.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Ae.credentialFromTaggedObject(e)}static credentialFromError(e){return Ae.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Ae.credential(e.oauthAccessToken)}catch(e){return null}}}Ae.FACEBOOK_SIGN_IN_METHOD="facebook.com",Ae.PROVIDER_ID="facebook.com";class be extends ve{constructor(){super("google.com"),this.addScope("profile")}static credential(e,t){return fe._fromParams({providerId:be.PROVIDER_ID,signInMethod:be.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:t})}static credentialFromResult(e){return be.credentialFromTaggedObject(e)}static credentialFromError(e){return be.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:t,oauthAccessToken:n}=e;if(!t&&!n)return null;try{return be.credential(t,n)}catch(e){return null}}}be.GOOGLE_SIGN_IN_METHOD="google.com",be.PROVIDER_ID="google.com";class we extends ve{constructor(){super("github.com")}static credential(e){return fe._fromParams({providerId:we.PROVIDER_ID,signInMethod:we.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return we.credentialFromTaggedObject(e)}static credentialFromError(e){return we.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return we.credential(e.oauthAccessToken)}catch(e){return null}}}we.GITHUB_SIGN_IN_METHOD="github.com",we.PROVIDER_ID="github.com";class Ee extends ve{constructor(){super("twitter.com")}static credential(e,t){return fe._fromParams({providerId:Ee.PROVIDER_ID,signInMethod:Ee.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:t})}static credentialFromResult(e){return Ee.credentialFromTaggedObject(e)}static credentialFromError(e){return Ee.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:t,oauthTokenSecret:n}=e;if(!t||!n)return null;try{return Ee.credential(t,n)}catch(e){return null}}}Ee.TWITTER_SIGN_IN_METHOD="twitter.com",Ee.PROVIDER_ID="twitter.com";class _e{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,t,n,r=!1){const i=await $._fromIdTokenResponse(e,n,r),s=Ce(n);return new _e({user:i,providerId:s,_tokenResponse:n,operationType:t})}static async _forOperation(e,t,n){await e._updateTokensIfNecessary(n,!0);const r=Ce(n);return new _e({user:e,providerId:r,_tokenResponse:n,operationType:t})}}function Ce(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class Te extends r.ZR{constructor(e,t,n,r){var i;super(t.code,t.message),this.operationType=n,this.user=r,Object.setPrototypeOf(this,Te.prototype),this.customData={appName:e.name,tenantId:null!==(i=e.tenantId)&&void 0!==i?i:void 0,_serverResponse:t.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(e,t,n,r){return new Te(e,t,n,r)}}function ke(e,t,n,r){return("reauthenticate"===t?n._getReauthenticationResolver(e):n._getIdTokenResponse(e)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Te._fromErrorAndOperation(e,n,t,r);throw n}))}async function Se(e,t,n=!1){const r="signIn",i=await ke(e,r,t),s=await _e._fromIdTokenResponse(e,r,i);return n||await e._updateCurrentUser(s.user),s}async function Ie(e,t,n){const r=ae(e),i=await async function(e,t){return N(e,"POST","/v1/accounts:signUp",S(e,t))}(r,{returnSecureToken:!0,email:t,password:n}),s=await _e._fromIdTokenResponse(r,"signIn",i);return await r._updateCurrentUser(s.user),s}function Oe(e,t,n){return async function(e,t){return Se(ae(e),t)}((0,r.m9)(e),ge.credential(t,n))}function Ne(e){return(0,r.m9)(e).signOut()}new WeakMap;const xe="__sak";class Pe{constructor(e,t){this.storageRetriever=e,this.type=t}_isAvailable(){try{return this.storage?(this.storage.setItem(xe,"1"),this.storage.removeItem(xe),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,t){return this.storage.setItem(e,JSON.stringify(t)),Promise.resolve()}_get(e){const t=this.storage.getItem(e);return Promise.resolve(t?JSON.parse(t):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class De extends Pe{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,t)=>this.onStorageEvent(e,t),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const e=(0,r.z$)();return J(e)||ne(e)}()&&function(){try{return!(!window||window===window.top)}catch(e){return!1}}(),this.fallbackToPolling=re(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const t of Object.keys(this.listeners)){const n=this.storage.getItem(t),r=this.localCache[t];n!==r&&e(t,r,n)}}onStorageEvent(e,t=!1){if(!e.key)return void this.forAllChangedKeys(((e,t,n)=>{this.notifyListeners(e,n)}));const n=e.key;if(t?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const r=this.storage.getItem(n);if(e.newValue!==r)null!==e.newValue?this.storage.setItem(n,e.newValue):this.storage.removeItem(n);else if(this.localCache[n]===e.newValue&&!t)return}const i=()=>{const e=this.storage.getItem(n);(t||this.localCache[n]!==e)&&this.notifyListeners(n,e)},s=this.storage.getItem(n);(0,r.w1)()&&10===document.documentMode&&s!==e.newValue&&e.newValue!==e.oldValue?setTimeout(i,10):i()}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t?JSON.parse(t):t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,t,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:t,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,t){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,t){await super._set(e,t),this.localCache[e]=JSON.stringify(t)}async _get(e){const t=await super._get(e);return this.localCache[e]=JSON.stringify(t),t}async _remove(e){await super._remove(e),delete this.localCache[e]}}De.type="LOCAL";const Re=De;class Le extends Pe{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,t){}_removeListener(e,t){}}Le.type="SESSION";const Me=Le;class Fe{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const t=this.receivers.find((t=>t.isListeningto(e)));if(t)return t;const n=new Fe(e);return this.receivers.push(n),n}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const t=e,{eventId:n,eventType:r,data:i}=t.data,s=this.handlersMap[r];if(!(null==s?void 0:s.size))return;t.ports[0].postMessage({status:"ack",eventId:n,eventType:r});const o=Array.from(s).map((async e=>e(t.origin,i))),a=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(o);t.ports[0].postMessage({status:"done",eventId:n,eventType:r,response:a})}_subscribe(e,t){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(t)}_unsubscribe(e,t){this.handlersMap[e]&&t&&this.handlersMap[e].delete(t),t&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Ue(e="",t=10){let n="";for(let e=0;e<t;e++)n+=Math.floor(10*Math.random());return e+n}Fe.receivers=[];class Ve{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,t,n=50){const r="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!r)throw new Error("connection_unavailable");let i,s;return new Promise(((o,a)=>{const l=Ue("",20);r.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);s={messageChannel:r,onMessage(e){const t=e;if(t.data.eventId===l)switch(t.data.status){case"ack":clearTimeout(u),i=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),o(t.data.response);break;default:clearTimeout(u),clearTimeout(i),a(new Error("invalid_response"))}}},this.handlers.add(s),r.port1.addEventListener("message",s.onMessage),this.target.postMessage({eventType:e,eventId:l,data:t},[r.port2])})).finally((()=>{s&&this.removeMessageHandler(s)}))}}function je(){return window}function ze(){return void 0!==je().WorkerGlobalScope&&"function"==typeof je().importScripts}const Be="firebaseLocalStorageDb",$e="firebaseLocalStorage",He="fbase_key";class qe{constructor(e){this.request=e}toPromise(){return new Promise(((e,t)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{t(this.request.error)}))}))}}function We(e,t){return e.transaction([$e],t?"readwrite":"readonly").objectStore($e)}function Ke(){const e=indexedDB.open(Be,1);return new Promise(((t,n)=>{e.addEventListener("error",(()=>{n(e.error)})),e.addEventListener("upgradeneeded",(()=>{const t=e.result;try{t.createObjectStore($e,{keyPath:He})}catch(e){n(e)}})),e.addEventListener("success",(async()=>{const n=e.result;n.objectStoreNames.contains($e)?t(n):(n.close(),await function(){const e=indexedDB.deleteDatabase(Be);return new qe(e).toPromise()}(),t(await Ke()))}))}))}async function Ge(e,t,n){const r=We(e,!0).put({[He]:t,value:n});return new qe(r).toPromise()}function Qe(e,t){const n=We(e,!0).delete(t);return new qe(n).toPromise()}class Je{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await Ke()),this.db}async _withRetries(e){let t=0;for(;;)try{const t=await this._openDb();return await e(t)}catch(e){if(t++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return ze()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Fe._getInstance(ze()?self:null),this.receiver._subscribe("keyChanged",(async(e,t)=>({keyProcessed:(await this._poll()).includes(t.key)}))),this.receiver._subscribe("ping",(async(e,t)=>["keyChanged"]))}async initializeSender(){var e,t;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new Ve(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(e=n[0])||void 0===e?void 0:e.fulfilled)&&(null===(t=n[0])||void 0===t?void 0:t.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){var t;if(this.sender&&this.activeServiceWorker&&((null===(t=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===t?void 0:t.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(t){}}async _isAvailable(){try{if(!indexedDB)return!1;const e=await Ke();return await Ge(e,xe,"1"),await Qe(e,xe),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,t){return this._withPendingWrite((async()=>(await this._withRetries((n=>Ge(n,e,t))),this.localCache[e]=t,this.notifyServiceWorker(e))))}async _get(e){const t=await this._withRetries((t=>async function(e,t){const n=We(e,!1).get(t),r=await new qe(n).toPromise();return void 0===r?null:r.value}(t,e)));return this.localCache[e]=t,t}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((t=>Qe(t,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const t=We(e,!1).getAll();return new qe(t).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const t=[],n=new Set;for(const{fbase_key:r,value:i}of e)n.add(r),JSON.stringify(this.localCache[r])!==JSON.stringify(i)&&(this.notifyListeners(r,i),t.push(r));for(const e of Object.keys(this.localCache))this.localCache[e]&&!n.has(e)&&(this.notifyListeners(e,null),t.push(e));return t}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,t){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}Je.type="LOCAL";const Xe=Je;function Ye(e){return`__${e}${Math.floor(1e6*Math.random())}`}Ye("rcb"),new E(3e4,6e4);class Ze{constructor(e){this.providerId=Ze.PROVIDER_ID,this.auth=ae(e)}verifyPhoneNumber(e,t){return async function(e,t,n){var r;const i=await n.verify();try{let s;if(m("string"==typeof i,e,"argument-error"),m("recaptcha"===n.type,e,"argument-error"),s="string"==typeof t?{phoneNumber:t}:t,"session"in s){const t=s.session;if("phoneNumber"in s){m("enroll"===t.type,e,"internal-error");const n=await function(e,t){return I(e,"POST","/v2/accounts/mfaEnrollment:start",S(e,t))}(e,{idToken:t.credential,phoneEnrollmentInfo:{phoneNumber:s.phoneNumber,recaptchaToken:i}});return n.phoneSessionInfo.sessionInfo}{m("signin"===t.type,e,"internal-error");const n=(null===(r=s.multiFactorHint)||void 0===r?void 0:r.uid)||s.multiFactorUid;m(n,e,"missing-multi-factor-info");const o=await function(e,t){return I(e,"POST","/v2/accounts/mfaSignIn:start",S(e,t))}(e,{mfaPendingCredential:t.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:i}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:t}=await async function(e,t){return I(e,"POST","/v1/accounts:sendVerificationCode",S(e,t))}(e,{phoneNumber:s.phoneNumber,recaptchaToken:i});return t}}finally{n._reset()}}(this.auth,e,(0,r.m9)(t))}static credential(e,t){return pe._fromVerification(e,t)}static credentialFromResult(e){const t=e;return Ze.credentialFromTaggedObject(t)}static credentialFromError(e){return Ze.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:t,temporaryProof:n}=e;return t&&n?pe._fromTokenResponse(t,n):null}}Ze.PROVIDER_ID="phone",Ze.PHONE_SIGN_IN_METHOD="phone";class et extends ue{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return he(e,this._buildIdpRequest())}_linkToIdToken(e,t){return he(e,this._buildIdpRequest(t))}_getReauthenticationResolver(e){return he(e,this._buildIdpRequest())}_buildIdpRequest(e){const t={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(t.idToken=e),t}}function tt(e){return Se(e.auth,new et(e),e.bypassAuthState)}function nt(e){const{auth:t,user:n}=e;return m(n,t,"internal-error"),async function(e,t,n=!1){var r;const{auth:i}=e,s="reauthenticate";try{const r=await F(e,ke(i,s,t,e),n);m(r.idToken,i,"internal-error");const o=M(r.idToken);m(o,i,"internal-error");const{sub:a}=o;return m(e.uid===a,i,"user-mismatch"),_e._forOperation(e,s,r)}catch(e){throw"auth/user-not-found"===(null===(r=e)||void 0===r?void 0:r.code)&&f(i,"user-mismatch"),e}}(n,new et(e),e.bypassAuthState)}async function rt(e){const{auth:t,user:n}=e;return m(n,t,"internal-error"),async function(e,t,n=!1){const r=await F(e,t._linkToIdToken(e.auth,await e.getIdToken()),n);return _e._forOperation(e,"link",r)}(n,new et(e),e.bypassAuthState)}class it{constructor(e,t,n,r,i=!1){this.auth=e,this.resolver=n,this.user=r,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(t)?t:[t]}execute(){return new Promise((async(e,t)=>{this.pendingPromise={resolve:e,reject:t};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:t,sessionId:n,postBody:r,tenantId:i,error:s,type:o}=e;if(s)return void this.reject(s);const a={auth:this.auth,requestUri:t,sessionId:n,tenantId:i||void 0,postBody:r||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return tt;case"linkViaPopup":case"linkViaRedirect":return rt;case"reauthViaPopup":case"reauthViaRedirect":return nt;default:f(this.auth,"internal-error")}}resolve(e){y(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){y(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const st=new E(2e3,1e4);class ot extends it{constructor(e,t,n,r,i){super(e,t,r,i),this.provider=n,this.authWindow=null,this.pollId=null,ot.currentPopupAction&&ot.currentPopupAction.cancel(),ot.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return m(e,this.auth,"internal-error"),e}async onExecution(){y(1===this.filter.length,"Popup operations only handle one event");const e=Ue();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(d(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(d(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,ot.currentPopupAction=null}pollUserCancellation(){const e=()=>{var t,n;(null===(n=null===(t=this.authWindow)||void 0===t?void 0:t.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(d(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(e,st.get())};e()}}ot.currentPopupAction=null;const at=new Map;class lt extends it{constructor(e,t,n=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],t,void 0,n),this.eventId=null}async execute(){let e=at.get(this.auth._key());if(!e){try{const t=await async function(e,t){const n=function(e){return W("pendingRedirect",e.config.apiKey,e.name)}(t),r=function(e){return A(e._redirectPersistence)}(e);if(!await r._isAvailable())return!1;const i="true"===await r._get(n);return await r._remove(n),i}(this.resolver,this.auth)?await super.execute():null;e=()=>Promise.resolve(t)}catch(t){e=()=>Promise.reject(t)}at.set(this.auth._key(),e)}return this.bypassAuthState||at.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const t=await this.auth._redirectUserForId(e.eventId);if(t)return this.user=t,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function ut(e,t){at.set(e._key(),t)}async function ct(e,t,n=!1){const r=ae(e),i=function(e,t){return t?A(t):(m(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}(r,t),s=new lt(r,i,n),o=await s.execute();return o&&!n&&(delete o.user._redirectEventId,await r._persistUserIfCurrent(o.user),await r._setRedirectUser(null,t)),o}class ht{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let t=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(e,n)&&(t=!0,this.sendToConsumer(e,n),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return dt(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,t||(this.queuedRedirectEvent=e,t=!0)),t}sendToConsumer(e,t){var n;if(e.error&&!dt(e)){const r=(null===(n=e.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";t.onError(d(this.auth,r))}else t.onAuthEvent(e)}isEventForConsumer(e,t){const n=null===t.eventId||!!e.eventId&&e.eventId===t.eventId;return t.filter.includes(e.type)&&n}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(ft(e))}saveEventToCache(e){this.cachedEventUids.add(ft(e)),this.lastProcessedEventTime=Date.now()}}function ft(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function dt({type:e,error:t}){return"unknown"===e&&"auth/no-auth-event"===(null==t?void 0:t.code)}const pt=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,mt=/^https?/;function gt(e){const t=b(),{protocol:n,hostname:r}=new URL(t);if(e.startsWith("chrome-extension://")){const i=new URL(e);return""===i.hostname&&""===r?"chrome-extension:"===n&&e.replace("chrome-extension://","")===t.replace("chrome-extension://",""):"chrome-extension:"===n&&i.hostname===r}if(!mt.test(n))return!1;if(pt.test(e))return r===e;const i=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(r)}const yt=new E(3e4,6e4);function vt(){const e=je().___jsl;if(null==e?void 0:e.H)for(const t of Object.keys(e.H))if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=[...e.H[t].L],e.CP)for(let t=0;t<e.CP.length;t++)e.CP[t]=null}let At=null;function bt(e){return At=At||function(e){return new Promise(((t,n)=>{var r,i,s,o;function a(){vt(),gapi.load("gapi.iframes",{callback:()=>{t(gapi.iframes.getContext())},ontimeout:()=>{vt(),n(d(e,"network-request-failed"))},timeout:yt.get()})}if(null===(i=null===(r=je().gapi)||void 0===r?void 0:r.iframes)||void 0===i?void 0:i.Iframe)t(gapi.iframes.getContext());else{if(!(null===(s=je().gapi)||void 0===s?void 0:s.load)){const t=Ye("iframefcb");return je()[t]=()=>{gapi.load?a():n(d(e,"network-request-failed"))},(o=`https://apis.google.com/js/api.js?onload=${t}`,new Promise(((e,t)=>{const n=document.createElement("script");var r,i;n.setAttribute("src",o),n.onload=e,n.onerror=e=>{const n=d("internal-error");n.customData=e,t(n)},n.type="text/javascript",n.charset="UTF-8",(null!==(i=null===(r=document.getElementsByTagName("head"))||void 0===r?void 0:r[0])&&void 0!==i?i:document).appendChild(n)}))).catch((e=>n(e)))}a()}})).catch((e=>{throw At=null,e}))}(e),At}const wt=new E(5e3,15e3),Et={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},_t=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Ct(e){const t=e.config;m(t.authDomain,e,"auth-domain-config-required");const n=t.emulator?_(t,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,s={apiKey:t.apiKey,appName:e.name,v:i.Jn},o=_t.get(e.config.apiHost);o&&(s.eid=o);const a=e._getFrameworks();return a.length&&(s.fw=a.join(",")),`${n}?${(0,r.xO)(s).slice(1)}`}const Tt={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class kt{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}function St(e,t,n,s,o,a){m(e.config.authDomain,e,"auth-domain-config-required"),m(e.config.apiKey,e,"invalid-api-key");const l={apiKey:e.config.apiKey,appName:e.name,authType:n,redirectUrl:s,v:i.Jn,eventId:o};if(t instanceof ye){t.setDefaultLanguage(e.languageCode),l.providerId=t.providerId||"",(0,r.xb)(t.getCustomParameters())||(l.customParameters=JSON.stringify(t.getCustomParameters()));for(const[e,t]of Object.entries(a||{}))l[e]=t}if(t instanceof ve){const e=t.getScopes().filter((e=>""!==e));e.length>0&&(l.scopes=e.join(","))}e.tenantId&&(l.tid=e.tenantId);const u=l;for(const e of Object.keys(u))void 0===u[e]&&delete u[e];return`${function({config:e}){return e.emulator?_(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${(0,r.xO)(u).slice(1)}`}const It="webStorageSupport",Ot=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Me,this._completeRedirectFn=ct,this._overrideRedirectResult=ut}async _openPopup(e,t,n,i){var s;return y(null===(s=this.eventManagers[e._key()])||void 0===s?void 0:s.manager,"_initialize() not called before _openPopup()"),function(e,t,n,i=500,s=600){const o=Math.max((window.screen.availHeight-s)/2,0).toString(),a=Math.max((window.screen.availWidth-i)/2,0).toString();let l="";const u=Object.assign(Object.assign({},Tt),{width:i.toString(),height:s.toString(),top:o,left:a}),c=(0,r.z$)().toLowerCase();n&&(l=X(c)?"_blank":n),Q(c)&&(t=t||"http://localhost",u.scrollbars="yes");const h=Object.entries(u).reduce(((e,[t,n])=>`${e}${t}=${n},`),"");if(function(e=(0,r.z$)()){var t;return ne(e)&&!!(null===(t=window.navigator)||void 0===t?void 0:t.standalone)}(c)&&"_self"!==l)return function(e,t){const n=document.createElement("a");n.href=e,n.target=t;const r=document.createEvent("MouseEvent");r.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(r)}(t||"",l),new kt(null);const f=window.open(t||"",l,h);m(f,e,"popup-blocked");try{f.focus()}catch(e){}return new kt(f)}(e,St(e,t,n,b(),i),Ue())}async _openRedirect(e,t,n,r){var i;return await this._originValidation(e),i=St(e,t,n,b(),r),je().location.href=i,new Promise((()=>{}))}_initialize(e){const t=e._key();if(this.eventManagers[t]){const{manager:e,promise:n}=this.eventManagers[t];return e?Promise.resolve(e):(y(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(e);return this.eventManagers[t]={promise:n},n.catch((()=>{delete this.eventManagers[t]})),n}async initAndGetManager(e){const t=await async function(e){const t=await bt(e),n=je().gapi;return m(n,e,"internal-error"),t.open({where:document.body,url:Ct(e),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:Et,dontclear:!0},(t=>new Promise((async(n,r)=>{await t.restyle({setHideOnLeave:!1});const i=d(e,"network-request-failed"),s=je().setTimeout((()=>{r(i)}),wt.get());function o(){je().clearTimeout(s),n(t)}t.ping(o).then(o,(()=>{r(i)}))}))))}(e),n=new ht(e);return t.register("authEvent",(t=>(m(null==t?void 0:t.authEvent,e,"invalid-auth-event"),{status:n.onEvent(t.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:n},this.iframes[e._key()]=t,n}_isIframeWebStorageSupported(e,t){this.iframes[e._key()].send(It,{type:It},(n=>{var r;const i=null===(r=null==n?void 0:n[0])||void 0===r?void 0:r.webStorageSupport;void 0!==i&&t(!!i),f(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const t=e._key();return this.originValidationPromises[t]||(this.originValidationPromises[t]=async function(e){if(e.config.emulator)return;const{authorizedDomains:t}=await async function(e,t={}){return I(e,"GET","/v1/projects",t)}(e);for(const e of t)try{if(gt(e))return}catch(e){}f(e,"unauthorized-domain")}(e)),this.originValidationPromises[t]}get _shouldInitProactively(){return re()||J()||ne()}};var Nt,xt="@firebase/auth",Pt="0.20.5";class Dt{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const t=this.auth.onIdTokenChanged((t=>{var n;e((null===(n=t)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,t),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const t=this.internalListeners.get(e);t&&(this.internalListeners.delete(e),t(),this.updateProactiveRefresh())}assertAuthConfigured(){m(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}function Rt(e=(0,i.Mq)()){const t=(0,i.qX)(e,"auth");return t.isInitialized()?t.getImmediate():function(e,t){const n=(0,i.qX)(e,"auth");if(n.isInitialized()){const e=n.getImmediate(),i=n.getOptions();if((0,r.vZ)(i,null!=t?t:{}))return e;f(e,"already-initialized")}return n.initialize({options:t})}(e,{popupRedirectResolver:Ot,persistence:[Xe,Re,Me]})}Nt="Browser",(0,i.Xd)(new a.wA("auth",((e,{options:t})=>{const n=e.getProvider("app").getImmediate(),r=e.getProvider("heartbeat"),{apiKey:i,authDomain:s}=n.options;return((e,n)=>{m(i&&!i.includes(":"),"invalid-api-key",{appName:e.name}),m(!(null==s?void 0:s.includes(":")),"argument-error",{appName:e.name});const r={apiKey:i,authDomain:s,clientPlatform:Nt,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:ie(Nt)},o=new oe(e,n,r);return function(e,t){const n=(null==t?void 0:t.persistence)||[],r=(Array.isArray(n)?n:[n]).map(A);(null==t?void 0:t.errorMap)&&e._updateErrorMap(t.errorMap),e._initializeWithPersistence(r,null==t?void 0:t.popupRedirectResolver)}(o,t),o})(n,r)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,t,n)=>{e.getProvider("auth-internal").initialize()}))),(0,i.Xd)(new a.wA("auth-internal",(e=>{return t=ae(e.getProvider("auth").getImmediate()),new Dt(t);var t}),"PRIVATE").setInstantiationMode("EXPLICIT")),(0,i.KN)(xt,Pt,void 0),(0,i.KN)(xt,Pt,"esm2017")},1591:function(e,t,n){n.d(t,{JU:function(){return gu},QT:function(){return Ju},ad:function(){return Au},pl:function(){return Yu},r7:function(){return Zu}});var r,i=n(389),s=n(8463),o=n(3333),a=n(4444),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},u={},c=c||{},h=l||self;function f(){}function d(e){var t=typeof e;return"array"==(t="object"!=t?t:e?Array.isArray(e)?"array":t:"null")||"object"==t&&"number"==typeof e.length}function p(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var m="closure_uid_"+(1e9*Math.random()>>>0),g=0;function y(e,t,n){return e.call.apply(e.bind,arguments)}function v(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function A(e,t,n){return(A=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?y:v).apply(null,arguments)}function b(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}function w(e,t){function n(){}n.prototype=t.prototype,e.Z=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.Vb=function(e,n,r){for(var i=Array(arguments.length-2),s=2;s<arguments.length;s++)i[s-2]=arguments[s];return t.prototype[n].apply(e,i)}}function E(){this.s=this.s,this.o=this.o}var _={};E.prototype.s=!1,E.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var e=function(e){return Object.prototype.hasOwnProperty.call(e,m)&&e[m]||(e[m]=++g)}(this);delete _[e]}},E.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const C=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if("string"==typeof e)return"string"!=typeof t||1!=t.length?-1:e.indexOf(t,0);for(let n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},T=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){const r=e.length,i="string"==typeof e?e.split(""):e;for(let s=0;s<r;s++)s in i&&t.call(n,i[s],s,e)};function k(e){return Array.prototype.concat.apply([],arguments)}function S(e){const t=e.length;if(0<t){const n=Array(t);for(let r=0;r<t;r++)n[r]=e[r];return n}return[]}function I(e){return/^[\s\xa0]*$/.test(e)}var O,N=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]};function x(e,t){return-1!=e.indexOf(t)}function P(e,t){return e<t?-1:e>t?1:0}e:{var D=h.navigator;if(D){var R=D.userAgent;if(R){O=R;break e}}O=""}function L(e,t,n){for(const r in e)t.call(n,e[r],r,e)}function M(e){const t={};for(const n in e)t[n]=e[n];return t}var F="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function U(e,t){let n,r;for(let t=1;t<arguments.length;t++){for(n in r=arguments[t],r)e[n]=r[n];for(let t=0;t<F.length;t++)n=F[t],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function V(e){return V[" "](e),e}V[" "]=f;var j,z,B=x(O,"Opera"),$=x(O,"Trident")||x(O,"MSIE"),H=x(O,"Edge"),q=H||$,W=x(O,"Gecko")&&!(x(O.toLowerCase(),"webkit")&&!x(O,"Edge"))&&!(x(O,"Trident")||x(O,"MSIE"))&&!x(O,"Edge"),K=x(O.toLowerCase(),"webkit")&&!x(O,"Edge");function G(){var e=h.document;return e?e.documentMode:void 0}e:{var Q="",J=(z=O,W?/rv:([^\);]+)(\)|;)/.exec(z):H?/Edge\/([\d\.]+)/.exec(z):$?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(z):K?/WebKit\/(\S+)/.exec(z):B?/(?:Version)[ \/]?(\S+)/.exec(z):void 0);if(J&&(Q=J?J[1]:""),$){var X=G();if(null!=X&&X>parseFloat(Q)){j=String(X);break e}}j=Q}var Y,Z={};function ee(){return e=Z,Object.prototype.hasOwnProperty.call(e,9)?e[9]:e[9]=function(){let e=0;const t=N(String(j)).split("."),n=N("9").split("."),r=Math.max(t.length,n.length);for(let o=0;0==e&&o<r;o++){var i=t[o]||"",s=n[o]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==i[0].length&&0==s[0].length)break;e=P(0==i[1].length?0:parseInt(i[1],10),0==s[1].length?0:parseInt(s[1],10))||P(0==i[2].length,0==s[2].length)||P(i[2],s[2]),i=i[3],s=s[3]}while(0==e)}return 0<=e}();var e}h.document&&$?Y=G()||parseInt(j,10)||void 0:Y=void 0;var te=Y,ne=function(){if(!h.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{h.addEventListener("test",f,t),h.removeEventListener("test",f,t)}catch(e){}return e}();function re(e,t){this.type=e,this.g=this.target=t,this.defaultPrevented=!1}function ie(e,t){if(re.call(this,e?e.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.g=t,t=e.relatedTarget){if(W){e:{try{V(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:se[e.pointerType]||"",this.state=e.state,this.i=e,e.defaultPrevented&&ie.Z.h.call(this)}}re.prototype.h=function(){this.defaultPrevented=!0},w(ie,re);var se={2:"touch",3:"pen",4:"mouse"};ie.prototype.h=function(){ie.Z.h.call(this);var e=this.i;e.preventDefault?e.preventDefault():e.returnValue=!1};var oe="closure_listenable_"+(1e6*Math.random()|0),ae=0;function le(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.ia=i,this.key=++ae,this.ca=this.fa=!1}function ue(e){e.ca=!0,e.listener=null,e.proxy=null,e.src=null,e.ia=null}function ce(e){this.src=e,this.g={},this.h=0}function he(e,t){var n=t.type;if(n in e.g){var r,i=e.g[n],s=C(i,t);(r=0<=s)&&Array.prototype.splice.call(i,s,1),r&&(ue(t),0==e.g[n].length&&(delete e.g[n],e.h--))}}function fe(e,t,n,r){for(var i=0;i<e.length;++i){var s=e[i];if(!s.ca&&s.listener==t&&s.capture==!!n&&s.ia==r)return i}return-1}ce.prototype.add=function(e,t,n,r,i){var s=e.toString();(e=this.g[s])||(e=this.g[s]=[],this.h++);var o=fe(e,t,r,i);return-1<o?(t=e[o],n||(t.fa=!1)):((t=new le(t,this.src,s,!!r,i)).fa=n,e.push(t)),t};var de="closure_lm_"+(1e6*Math.random()|0),pe={};function me(e,t,n,r,i){if(r&&r.once)return ye(e,t,n,r,i);if(Array.isArray(t)){for(var s=0;s<t.length;s++)me(e,t[s],n,r,i);return null}return n=Ce(n),e&&e[oe]?e.N(t,n,p(r)?!!r.capture:!!r,i):ge(e,t,n,!1,r,i)}function ge(e,t,n,r,i,s){if(!t)throw Error("Invalid event type");var o=p(i)?!!i.capture:!!i,a=Ee(e);if(a||(e[de]=a=new ce(e)),(n=a.add(t,n,r,o,s)).proxy)return n;if(r=function(){var e=we;return function t(n){return e.call(t.src,t.listener,n)}}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)ne||(i=o),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(be(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}return n}function ye(e,t,n,r,i){if(Array.isArray(t)){for(var s=0;s<t.length;s++)ye(e,t[s],n,r,i);return null}return n=Ce(n),e&&e[oe]?e.O(t,n,p(r)?!!r.capture:!!r,i):ge(e,t,n,!0,r,i)}function ve(e,t,n,r,i){if(Array.isArray(t))for(var s=0;s<t.length;s++)ve(e,t[s],n,r,i);else r=p(r)?!!r.capture:!!r,n=Ce(n),e&&e[oe]?(e=e.i,(t=String(t).toString())in e.g&&-1<(n=fe(s=e.g[t],n,r,i))&&(ue(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete e.g[t],e.h--))):e&&(e=Ee(e))&&(t=e.g[t.toString()],e=-1,t&&(e=fe(t,n,r,i)),(n=-1<e?t[e]:null)&&Ae(n))}function Ae(e){if("number"!=typeof e&&e&&!e.ca){var t=e.src;if(t&&t[oe])he(t.i,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(be(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=Ee(t))?(he(n,e),0==n.h&&(n.src=null,t[de]=null)):ue(e)}}}function be(e){return e in pe?pe[e]:pe[e]="on"+e}function we(e,t){if(e.ca)e=!0;else{t=new ie(t,this);var n=e.listener,r=e.ia||e.src;e.fa&&Ae(e),e=n.call(r,t)}return e}function Ee(e){return(e=e[de])instanceof ce?e:null}var _e="__closure_events_fn_"+(1e9*Math.random()>>>0);function Ce(e){return"function"==typeof e?e:(e[_e]||(e[_e]=function(t){return e.handleEvent(t)}),e[_e])}function Te(){E.call(this),this.i=new ce(this),this.P=this,this.I=null}function ke(e,t){var n,r=e.I;if(r)for(n=[];r;r=r.I)n.push(r);if(e=e.P,r=t.type||t,"string"==typeof t)t=new re(t,e);else if(t instanceof re)t.target=t.target||e;else{var i=t;U(t=new re(r,e),i)}if(i=!0,n)for(var s=n.length-1;0<=s;s--){var o=t.g=n[s];i=Se(o,r,!0,t)&&i}if(i=Se(o=t.g=e,r,!0,t)&&i,i=Se(o,r,!1,t)&&i,n)for(s=0;s<n.length;s++)i=Se(o=t.g=n[s],r,!1,t)&&i}function Se(e,t,n,r){if(!(t=e.i.g[String(t)]))return!0;t=t.concat();for(var i=!0,s=0;s<t.length;++s){var o=t[s];if(o&&!o.ca&&o.capture==n){var a=o.listener,l=o.ia||o.src;o.fa&&he(e.i,o),i=!1!==a.call(l,r)&&i}}return i&&!r.defaultPrevented}w(Te,E),Te.prototype[oe]=!0,Te.prototype.removeEventListener=function(e,t,n,r){ve(this,e,t,n,r)},Te.prototype.M=function(){if(Te.Z.M.call(this),this.i){var e,t=this.i;for(e in t.g){for(var n=t.g[e],r=0;r<n.length;r++)ue(n[r]);delete t.g[e],t.h--}}this.I=null},Te.prototype.N=function(e,t,n,r){return this.i.add(String(e),t,!1,n,r)},Te.prototype.O=function(e,t,n,r){return this.i.add(String(e),t,!0,n,r)};var Ie=h.JSON.stringify;function Oe(){var e=Me;let t=null;return e.g&&(t=e.g,e.g=e.g.next,e.g||(e.h=null),t.next=null),t}var Ne,xe=new class{constructor(e,t){this.i=e,this.j=t,this.h=0,this.g=null}get(){let e;return 0<this.h?(this.h--,e=this.g,this.g=e.next,e.next=null):e=this.i(),e}}((()=>new Pe),(e=>e.reset()));class Pe{constructor(){this.next=this.g=this.h=null}set(e,t){this.h=e,this.g=t,this.next=null}reset(){this.next=this.g=this.h=null}}function De(e){h.setTimeout((()=>{throw e}),0)}function Re(e,t){Ne||function(){var e=h.Promise.resolve(void 0);Ne=function(){e.then(Fe)}}(),Le||(Ne(),Le=!0),Me.add(e,t)}var Le=!1,Me=new class{constructor(){this.h=this.g=null}add(e,t){const n=xe.get();n.set(e,t),this.h?this.h.next=n:this.g=n,this.h=n}};function Fe(){for(var e;e=Oe();){try{e.h.call(e.g)}catch(e){De(e)}var t=xe;t.j(e),100>t.h&&(t.h++,e.next=t.g,t.g=e)}Le=!1}function Ue(e,t){Te.call(this),this.h=e||1,this.g=t||h,this.j=A(this.kb,this),this.l=Date.now()}function Ve(e){e.da=!1,e.S&&(e.g.clearTimeout(e.S),e.S=null)}function je(e,t,n){if("function"==typeof e)n&&(e=A(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=A(e.handleEvent,e)}return 2147483647<Number(t)?-1:h.setTimeout(e,t||0)}function ze(e){e.g=je((()=>{e.g=null,e.i&&(e.i=!1,ze(e))}),e.j);const t=e.h;e.h=null,e.m.apply(null,t)}w(Ue,Te),(r=Ue.prototype).da=!1,r.S=null,r.kb=function(){if(this.da){var e=Date.now()-this.l;0<e&&e<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-e):(this.S&&(this.g.clearTimeout(this.S),this.S=null),ke(this,"tick"),this.da&&(Ve(this),this.start()))}},r.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},r.M=function(){Ue.Z.M.call(this),Ve(this),delete this.g};class Be extends E{constructor(e,t){super(),this.m=e,this.j=t,this.h=null,this.i=!1,this.g=null}l(e){this.h=arguments,this.g?this.i=!0:ze(this)}M(){super.M(),this.g&&(h.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function $e(e){E.call(this),this.h=e,this.g={}}w($e,E);var He=[];function qe(e,t,n,r){Array.isArray(n)||(n&&(He[0]=n.toString()),n=He);for(var i=0;i<n.length;i++){var s=me(t,n[i],r||e.handleEvent,!1,e.h||e);if(!s)break;e.g[s.key]=s}}function We(e){L(e.g,(function(e,t){this.g.hasOwnProperty(t)&&Ae(e)}),e),e.g={}}function Ke(){this.g=!0}function Ge(e,t,n,r){e.info((function(){return"XMLHTTP TEXT ("+t+"): "+function(e,t){if(!e.g)return t;if(!t)return null;try{var n=JSON.parse(t);if(n)for(e=0;e<n.length;e++)if(Array.isArray(n[e])){var r=n[e];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var s=i[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<i.length;o++)i[o]=""}}}return Ie(n)}catch(e){return t}}(e,n)+(r?" "+r:"")}))}$e.prototype.M=function(){$e.Z.M.call(this),We(this)},$e.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Ke.prototype.Aa=function(){this.g=!1},Ke.prototype.info=function(){};var Qe={},Je=null;function Xe(){return Je=Je||new Te}function Ye(e){re.call(this,Qe.Ma,e)}function Ze(e){const t=Xe();ke(t,new Ye(t,e))}function et(e,t){re.call(this,Qe.STAT_EVENT,e),this.stat=t}function tt(e){const t=Xe();ke(t,new et(t,e))}function nt(e,t){re.call(this,Qe.Na,e),this.size=t}function rt(e,t){if("function"!=typeof e)throw Error("Fn must not be null and must be a function");return h.setTimeout((function(){e()}),t)}Qe.Ma="serverreachability",w(Ye,re),Qe.STAT_EVENT="statevent",w(et,re),Qe.Na="timingevent",w(nt,re);var it={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},st={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function ot(){}function at(e){return e.h||(e.h=e.i())}function lt(){}ot.prototype.h=null;var ut,ct={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function ht(){re.call(this,"d")}function ft(){re.call(this,"c")}function dt(){}function pt(e,t,n,r){this.l=e,this.j=t,this.m=n,this.X=r||1,this.V=new $e(this),this.P=gt,e=q?125:void 0,this.W=new Ue(e),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new mt}function mt(){this.i=null,this.g="",this.h=!1}w(ht,re),w(ft,re),w(dt,ot),dt.prototype.g=function(){return new XMLHttpRequest},dt.prototype.i=function(){return{}},ut=new dt;var gt=45e3,yt={},vt={};function At(e,t,n){e.K=1,e.v=Bt(Mt(t)),e.s=n,e.U=!0,bt(e,null)}function bt(e,t){e.F=Date.now(),Ct(e),e.A=Mt(e.v);var n=e.A,r=e.X;Array.isArray(r)||(r=[String(r)]),tn(n.h,"t",r),e.C=0,n=e.l.H,e.h=new mt,e.g=nr(e.l,n?t:null,!e.s),0<e.O&&(e.L=new Be(A(e.Ia,e,e.g),e.O)),qe(e.V,e.g,"readystatechange",e.gb),t=e.H?M(e.H):{},e.s?(e.u||(e.u="POST"),t["Content-Type"]="application/x-www-form-urlencoded",e.g.ea(e.A,e.u,e.s,t)):(e.u="GET",e.g.ea(e.A,e.u,null,t)),Ze(1),function(e,t,n,r,i,s){e.info((function(){if(e.g)if(s)for(var o="",a=s.split("&"),l=0;l<a.length;l++){var u=a[l].split("=");if(1<u.length){var c=u[0];u=u[1];var h=c.split("_");o=2<=h.length&&"type"==h[1]?o+(c+"=")+u+"&":o+(c+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+t+"\n"+n+"\n"+o}))}(e.j,e.u,e.A,e.m,e.X,e.s)}function wt(e){return!!e.g&&"GET"==e.u&&2!=e.K&&e.l.Ba}function Et(e,t,n){let r,i=!0;for(;!e.I&&e.C<n.length;){if(r=_t(e,n),r==vt){4==t&&(e.o=4,tt(14),i=!1),Ge(e.j,e.m,null,"[Incomplete Response]");break}if(r==yt){e.o=4,tt(15),Ge(e.j,e.m,n,"[Invalid Chunk]"),i=!1;break}Ge(e.j,e.m,r,null),Ot(e,r)}wt(e)&&r!=vt&&r!=yt&&(e.h.g="",e.C=0),4!=t||0!=n.length||e.h.h||(e.o=1,tt(16),i=!1),e.i=e.i&&i,i?0<n.length&&!e.aa&&(e.aa=!0,(t=e.l).g==e&&t.$&&!t.L&&(t.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Gn(t),t.L=!0,tt(11))):(Ge(e.j,e.m,n,"[Invalid Chunked Response]"),It(e),St(e))}function _t(e,t){var n=e.C,r=t.indexOf("\n",n);return-1==r?vt:(n=Number(t.substring(n,r)),isNaN(n)?yt:(r+=1)+n>t.length?vt:(t=t.substr(r,n),e.C=r+n,t))}function Ct(e){e.Y=Date.now()+e.P,Tt(e,e.P)}function Tt(e,t){if(null!=e.B)throw Error("WatchDog timer not null");e.B=rt(A(e.eb,e),t)}function kt(e){e.B&&(h.clearTimeout(e.B),e.B=null)}function St(e){0==e.l.G||e.I||Xn(e.l,e)}function It(e){kt(e);var t=e.L;t&&"function"==typeof t.na&&t.na(),e.L=null,Ve(e.W),We(e.V),e.g&&(t=e.g,e.g=null,t.abort(),t.na())}function Ot(e,t){try{var n=e.l;if(0!=n.G&&(n.g==e||ln(n.i,e)))if(n.I=e.N,!e.J&&ln(n.i,e)&&3==n.G){try{var r=n.Ca.g.parse(t)}catch(e){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){e:if(!n.u){if(n.g){if(!(n.g.F+3e3<e.F))break e;Jn(n),Vn(n)}Kn(n),tt(18)}}else n.ta=i[1],0<n.ta-n.U&&37500>i[2]&&n.N&&0==n.A&&!n.v&&(n.v=rt(A(n.ab,n),6e3));if(1>=an(n.i)&&n.ka){try{n.ka()}catch(e){}n.ka=void 0}}else Zn(n,11)}else if((e.J||n.g==e)&&Jn(n),!I(t))for(i=n.Ca.g.parse(t),t=0;t<i.length;t++){let u=i[t];if(n.U=u[0],u=u[1],2==n.G)if("c"==u[0]){n.J=u[1],n.la=u[2];const t=u[3];null!=t&&(n.ma=t,n.h.info("VER="+n.ma));const i=u[4];null!=i&&(n.za=i,n.h.info("SVER="+n.za));const c=u[5];null!=c&&"number"==typeof c&&0<c&&(r=1.5*c,n.K=r,n.h.info("backChannelRequestTimeoutMs_="+r)),r=n;const h=e.g;if(h){const e=h.g?h.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(e){var s=r.i;!s.g&&(x(e,"spdy")||x(e,"quic")||x(e,"h2"))&&(s.j=s.l,s.g=new Set,s.h&&(un(s,s.h),s.h=null))}if(r.D){const e=h.g?h.g.getResponseHeader("X-HTTP-Session-Id"):null;e&&(r.sa=e,zt(r.F,r.D,e))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-e.F,n.h.info("Handshake RTT: "+n.O+"ms"));var o=e;if((r=n).oa=tr(r,r.H?r.la:null,r.W),o.J){cn(r.i,o);var a=o,l=r.K;l&&a.setTimeout(l),a.B&&(kt(a),Ct(a)),r.g=o}else Wn(r);0<n.l.length&&Bn(n)}else"stop"!=u[0]&&"close"!=u[0]||Zn(n,7);else 3==n.G&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?Zn(n,7):Un(n):"noop"!=u[0]&&n.j&&n.j.wa(u),n.A=0)}Ze(4)}catch(e){}}function Nt(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(d(e)||"string"==typeof e)T(e,t,void 0);else{if(e.T&&"function"==typeof e.T)var n=e.T();else if(e.R&&"function"==typeof e.R)n=void 0;else if(d(e)||"string"==typeof e){n=[];for(var r=e.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,e)n[r++]=i;r=function(e){if(e.R&&"function"==typeof e.R)return e.R();if("string"==typeof e)return e.split("");if(d(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}(e),i=r.length;for(var s=0;s<i;s++)t.call(void 0,r[s],n&&n[s],e)}}function xt(e,t){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof xt)for(n=e.T(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function Pt(e){if(e.i!=e.g.length){for(var t=0,n=0;t<e.g.length;){var r=e.g[t];Dt(e.h,r)&&(e.g[n++]=r),t++}e.g.length=n}if(e.i!=e.g.length){var i={};for(n=t=0;t<e.g.length;)Dt(i,r=e.g[t])||(e.g[n++]=r,i[r]=1),t++;e.g.length=n}}function Dt(e,t){return Object.prototype.hasOwnProperty.call(e,t)}(r=pt.prototype).setTimeout=function(e){this.P=e},r.gb=function(e){e=e.target;const t=this.L;t&&3==Dn(e)?t.l():this.Ia(e)},r.Ia=function(e){try{if(e==this.g)e:{const c=Dn(this.g);var t=this.g.Da();const f=this.g.ba();if(!(3>c)&&(3!=c||q||this.g&&(this.h.h||this.g.ga()||Rn(this.g)))){this.I||4!=c||7==t||Ze(8==t||0>=f?3:2),kt(this);var n=this.g.ba();this.N=n;t:if(wt(this)){var r=Rn(this.g);e="";var i=r.length,s=4==Dn(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){It(this),St(this);var o="";break t}this.h.i=new h.TextDecoder}for(t=0;t<i;t++)this.h.h=!0,e+=this.h.i.decode(r[t],{stream:s&&t==i-1});r.splice(0,i),this.h.g+=e,this.C=0,o=this.h.g}else o=this.g.ga();if(this.i=200==n,function(e,t,n,r,i,s,o){e.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+t+"\n"+n+"\n"+s+" "+o}))}(this.j,this.u,this.A,this.m,this.X,c,n),this.i){if(this.$&&!this.J){t:{if(this.g){var a,l=this.g;if((a=l.g?l.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!I(a)){var u=a;break t}}u=null}if(!(n=u)){this.i=!1,this.o=3,tt(12),It(this),St(this);break e}Ge(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,Ot(this,n)}this.U?(Et(this,c,o),q&&this.i&&3==c&&(qe(this.V,this.W,"tick",this.fb),this.W.start())):(Ge(this.j,this.m,o,null),Ot(this,o)),4==c&&It(this),this.i&&!this.I&&(4==c?Xn(this.l,this):(this.i=!1,Ct(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,tt(12)):(this.o=0,tt(13)),It(this),St(this)}}}catch(e){}},r.fb=function(){if(this.g){var e=Dn(this.g),t=this.g.ga();this.C<t.length&&(kt(this),Et(this,e,t),this.i&&4!=e&&Ct(this))}},r.cancel=function(){this.I=!0,It(this)},r.eb=function(){this.B=null;const e=Date.now();0<=e-this.Y?(function(e,t){e.info((function(){return"TIMEOUT: "+t}))}(this.j,this.A),2!=this.K&&(Ze(3),tt(17)),It(this),this.o=2,St(this)):Tt(this,this.Y-e)},(r=xt.prototype).R=function(){Pt(this);for(var e=[],t=0;t<this.g.length;t++)e.push(this.h[this.g[t]]);return e},r.T=function(){return Pt(this),this.g.concat()},r.get=function(e,t){return Dt(this.h,e)?this.h[e]:t},r.set=function(e,t){Dt(this.h,e)||(this.i++,this.g.push(e)),this.h[e]=t},r.forEach=function(e,t){for(var n=this.T(),r=0;r<n.length;r++){var i=n[r],s=this.get(i);e.call(t,s,i,this)}};var Rt=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Lt(e,t){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,e instanceof Lt){this.g=void 0!==t?t:e.g,Ft(this,e.j),this.s=e.s,Ut(this,e.i),Vt(this,e.m),this.l=e.l,t=e.h;var n=new Xt;n.i=t.i,t.g&&(n.g=new xt(t.g),n.h=t.h),jt(this,n),this.o=e.o}else e&&(n=String(e).match(Rt))?(this.g=!!t,Ft(this,n[1]||"",!0),this.s=$t(n[2]||""),Ut(this,n[3]||"",!0),Vt(this,n[4]),this.l=$t(n[5]||"",!0),jt(this,n[6]||"",!0),this.o=$t(n[7]||"")):(this.g=!!t,this.h=new Xt(null,this.g))}function Mt(e){return new Lt(e)}function Ft(e,t,n){e.j=n?$t(t,!0):t,e.j&&(e.j=e.j.replace(/:$/,""))}function Ut(e,t,n){e.i=n?$t(t,!0):t}function Vt(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.m=t}else e.m=null}function jt(e,t,n){t instanceof Xt?(e.h=t,function(e,t){t&&!e.j&&(Yt(e),e.i=null,e.g.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(Zt(this,t),tn(this,n,e))}),e)),e.j=t}(e.h,e.g)):(n||(t=Ht(t,Qt)),e.h=new Xt(t,e.g))}function zt(e,t,n){e.h.set(t,n)}function Bt(e){return zt(e,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),e}function $t(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Ht(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,qt),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function qt(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Lt.prototype.toString=function(){var e=[],t=this.j;t&&e.push(Ht(t,Wt,!0),":");var n=this.i;return(n||"file"==t)&&(e.push("//"),(t=this.s)&&e.push(Ht(t,Wt,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&e.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&e.push("/"),e.push(Ht(n,"/"==n.charAt(0)?Gt:Kt,!0))),(n=this.h.toString())&&e.push("?",n),(n=this.o)&&e.push("#",Ht(n,Jt)),e.join("")};var Wt=/[#\/\?@]/g,Kt=/[#\?:]/g,Gt=/[#\?]/g,Qt=/[#\?@]/g,Jt=/#/g;function Xt(e,t){this.h=this.g=null,this.i=e||null,this.j=!!t}function Yt(e){e.g||(e.g=new xt,e.h=0,e.i&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var s=e[n].substring(0,r);i=e[n].substring(r+1)}else s=e[n];t(s,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.i,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function Zt(e,t){Yt(e),t=nn(e,t),Dt(e.g.h,t)&&(e.i=null,e.h-=e.g.get(t).length,Dt((e=e.g).h,t)&&(delete e.h[t],e.i--,e.g.length>2*e.i&&Pt(e)))}function en(e,t){return Yt(e),t=nn(e,t),Dt(e.g.h,t)}function tn(e,t,n){Zt(e,t),0<n.length&&(e.i=null,e.g.set(nn(e,t),S(n)),e.h+=n.length)}function nn(e,t){return t=String(t),e.j&&(t=t.toLowerCase()),t}function rn(e){this.l=e||sn,e=h.PerformanceNavigationTiming?0<(e=h.performance.getEntriesByType("navigation")).length&&("hq"==e[0].nextHopProtocol||"h2"==e[0].nextHopProtocol):!!(h.g&&h.g.Ea&&h.g.Ea()&&h.g.Ea().Zb),this.j=e?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(r=Xt.prototype).add=function(e,t){Yt(this),this.i=null,e=nn(this,e);var n=this.g.get(e);return n||this.g.set(e,n=[]),n.push(t),this.h+=1,this},r.forEach=function(e,t){Yt(this),this.g.forEach((function(n,r){T(n,(function(n){e.call(t,n,r,this)}),this)}),this)},r.T=function(){Yt(this);for(var e=this.g.R(),t=this.g.T(),n=[],r=0;r<t.length;r++)for(var i=e[r],s=0;s<i.length;s++)n.push(t[r]);return n},r.R=function(e){Yt(this);var t=[];if("string"==typeof e)en(this,e)&&(t=k(t,this.g.get(nn(this,e))));else{e=this.g.R();for(var n=0;n<e.length;n++)t=k(t,e[n])}return t},r.set=function(e,t){return Yt(this),this.i=null,en(this,e=nn(this,e))&&(this.h-=this.g.get(e).length),this.g.set(e,[t]),this.h+=1,this},r.get=function(e,t){return e&&0<(e=this.R(e)).length?String(e[0]):t},r.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var e=[],t=this.g.T(),n=0;n<t.length;n++){var r=t[n],i=encodeURIComponent(String(r));r=this.R(r);for(var s=0;s<r.length;s++){var o=i;""!==r[s]&&(o+="="+encodeURIComponent(String(r[s]))),e.push(o)}}return this.i=e.join("&")};var sn=10;function on(e){return!!e.h||!!e.g&&e.g.size>=e.j}function an(e){return e.h?1:e.g?e.g.size:0}function ln(e,t){return e.h?e.h==t:!!e.g&&e.g.has(t)}function un(e,t){e.g?e.g.add(t):e.h=t}function cn(e,t){e.h&&e.h==t?e.h=null:e.g&&e.g.has(t)&&e.g.delete(t)}function hn(e){if(null!=e.h)return e.i.concat(e.h.D);if(null!=e.g&&0!==e.g.size){let t=e.i;for(const n of e.g.values())t=t.concat(n.D);return t}return S(e.i)}function fn(){}function dn(){this.g=new fn}function pn(e,t,n){const r=n||"";try{Nt(e,(function(e,n){let i=e;p(e)&&(i=Ie(e)),t.push(r+n+"="+encodeURIComponent(i))}))}catch(e){throw t.push(r+"type="+encodeURIComponent("_badmap")),e}}function mn(e,t,n,r,i){try{t.onload=null,t.onerror=null,t.onabort=null,t.ontimeout=null,i(r)}catch(e){}}function gn(e){this.l=e.$b||null,this.j=e.ib||!1}function yn(e,t){Te.call(this),this.D=e,this.u=t,this.m=void 0,this.readyState=vn,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}rn.prototype.cancel=function(){if(this.i=hn(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const e of this.g.values())e.cancel();this.g.clear()}},fn.prototype.stringify=function(e){return h.JSON.stringify(e,void 0)},fn.prototype.parse=function(e){return h.JSON.parse(e,void 0)},w(gn,ot),gn.prototype.g=function(){return new yn(this.l,this.j)},gn.prototype.i=function(e){return function(){return e}}({}),w(yn,Te);var vn=0;function An(e){e.j.read().then(e.Sa.bind(e)).catch(e.ha.bind(e))}function bn(e){e.readyState=4,e.l=null,e.j=null,e.A=null,wn(e)}function wn(e){e.onreadystatechange&&e.onreadystatechange.call(e)}(r=yn.prototype).open=function(e,t){if(this.readyState!=vn)throw this.abort(),Error("Error reopening a connection");this.C=e,this.B=t,this.readyState=1,wn(this)},r.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const t={headers:this.v,method:this.C,credentials:this.m,cache:void 0};e&&(t.body=e),(this.D||h).fetch(new Request(this.B,t)).then(this.Va.bind(this),this.ha.bind(this))},r.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,bn(this)),this.readyState=vn},r.Va=function(e){if(this.g&&(this.l=e,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=e.headers,this.readyState=2,wn(this)),this.g&&(this.readyState=3,wn(this),this.g)))if("arraybuffer"===this.responseType)e.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==h.ReadableStream&&"body"in e){if(this.j=e.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;An(this)}else e.text().then(this.Ua.bind(this),this.ha.bind(this))},r.Sa=function(e){if(this.g){if(this.u&&e.value)this.response.push(e.value);else if(!this.u){var t=e.value?e.value:new Uint8Array(0);(t=this.A.decode(t,{stream:!e.done}))&&(this.response=this.responseText+=t)}e.done?bn(this):wn(this),3==this.readyState&&An(this)}},r.Ua=function(e){this.g&&(this.response=this.responseText=e,bn(this))},r.Ta=function(e){this.g&&(this.response=e,bn(this))},r.ha=function(){this.g&&bn(this)},r.setRequestHeader=function(e,t){this.v.append(e,t)},r.getResponseHeader=function(e){return this.h&&this.h.get(e.toLowerCase())||""},r.getAllResponseHeaders=function(){if(!this.h)return"";const e=[],t=this.h.entries();for(var n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},Object.defineProperty(yn.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(e){this.m=e?"include":"same-origin"}});var En=h.JSON.parse;function _n(e){Te.call(this),this.headers=new xt,this.u=e||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=Cn,this.K=this.L=!1}w(_n,Te);var Cn="",Tn=/^https?$/i,kn=["POST","PUT"];function Sn(e){return"content-type"==e.toLowerCase()}function In(e,t){e.h=!1,e.g&&(e.l=!0,e.g.abort(),e.l=!1),e.j=t,e.m=5,On(e),xn(e)}function On(e){e.D||(e.D=!0,ke(e,"complete"),ke(e,"error"))}function Nn(e){if(e.h&&void 0!==c&&(!e.C[1]||4!=Dn(e)||2!=e.ba()))if(e.v&&4==Dn(e))je(e.Fa,0,e);else if(ke(e,"readystatechange"),4==Dn(e)){e.h=!1;try{const a=e.ba();e:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var t=!0;break e;default:t=!1}var n;if(!(n=t)){var r;if(r=0===a){var i=String(e.H).match(Rt)[1]||null;if(!i&&h.self&&h.self.location){var s=h.self.location.protocol;i=s.substr(0,s.length-1)}r=!Tn.test(i?i.toLowerCase():"")}n=r}if(n)ke(e,"complete"),ke(e,"success");else{e.m=6;try{var o=2<Dn(e)?e.g.statusText:""}catch(e){o=""}e.j=o+" ["+e.ba()+"]",On(e)}}finally{xn(e)}}}function xn(e,t){if(e.g){Pn(e);const n=e.g,r=e.C[0]?f:null;e.g=null,e.C=null,t||ke(e,"ready");try{n.onreadystatechange=r}catch(e){}}}function Pn(e){e.g&&e.K&&(e.g.ontimeout=null),e.A&&(h.clearTimeout(e.A),e.A=null)}function Dn(e){return e.g?e.g.readyState:0}function Rn(e){try{if(!e.g)return null;if("response"in e.g)return e.g.response;switch(e.J){case Cn:case"text":return e.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in e.g)return e.g.mozResponseArrayBuffer}return null}catch(e){return null}}function Ln(e,t,n){e:{for(r in n){var r=!1;break e}r=!0}r||(n=function(e){let t="";return L(e,(function(e,n){t+=n,t+=":",t+=e,t+="\r\n"})),t}(n),"string"==typeof e?null!=n&&encodeURIComponent(String(n)):zt(e,t,n))}function Mn(e,t,n){return n&&n.internalChannelParams&&n.internalChannelParams[e]||t}function Fn(e){this.za=0,this.l=[],this.h=new Ke,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=Mn("failFast",!1,e),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=Mn("baseRetryDelayMs",5e3,e),this.$a=Mn("retryDelaySeedMs",1e4,e),this.Ya=Mn("forwardChannelMaxRetries",2,e),this.ra=Mn("forwardChannelRequestTimeoutMs",2e4,e),this.qa=e&&e.xmlHttpFactory||void 0,this.Ba=e&&e.Yb||!1,this.K=void 0,this.H=e&&e.supportsCrossDomainXhr||!1,this.J="",this.i=new rn(e&&e.concurrentRequestLimit),this.Ca=new dn,this.ja=e&&e.fastHandshake||!1,this.Ra=e&&e.Wb||!1,e&&e.Aa&&this.h.Aa(),e&&e.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&e&&e.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!e||!1!==e.Xb}function Un(e){if(jn(e),3==e.G){var t=e.V++,n=Mt(e.F);zt(n,"SID",e.J),zt(n,"RID",t),zt(n,"TYPE","terminate"),Hn(e,n),(t=new pt(e,e.h,t,void 0)).K=2,t.v=Bt(Mt(n)),n=!1,h.navigator&&h.navigator.sendBeacon&&(n=h.navigator.sendBeacon(t.v.toString(),"")),!n&&h.Image&&((new Image).src=t.v,n=!0),n||(t.g=nr(t.l,null),t.g.ea(t.v)),t.F=Date.now(),Ct(t)}er(e)}function Vn(e){e.g&&(Gn(e),e.g.cancel(),e.g=null)}function jn(e){Vn(e),e.u&&(h.clearTimeout(e.u),e.u=null),Jn(e),e.i.cancel(),e.m&&("number"==typeof e.m&&h.clearTimeout(e.m),e.m=null)}function zn(e,t){e.l.push(new class{constructor(e,t){this.h=e,this.g=t}}(e.Za++,t)),3==e.G&&Bn(e)}function Bn(e){on(e.i)||e.m||(e.m=!0,Re(e.Ha,e),e.C=0)}function $n(e,t){var n;n=t?t.m:e.V++;const r=Mt(e.F);zt(r,"SID",e.J),zt(r,"RID",n),zt(r,"AID",e.U),Hn(e,r),e.o&&e.s&&Ln(r,e.o,e.s),n=new pt(e,e.h,n,e.C+1),null===e.o&&(n.H=e.s),t&&(e.l=t.D.concat(e.l)),t=qn(e,n,1e3),n.setTimeout(Math.round(.5*e.ra)+Math.round(.5*e.ra*Math.random())),un(e.i,n),At(n,r,t)}function Hn(e,t){e.j&&Nt({},(function(e,n){zt(t,n,e)}))}function qn(e,t,n){n=Math.min(e.l.length,n);var r=e.j?A(e.j.Oa,e.j,e):null;e:{var i=e.l;let t=-1;for(;;){const e=["count="+n];-1==t?0<n?(t=i[0].h,e.push("ofs="+t)):t=0:e.push("ofs="+t);let s=!0;for(let o=0;o<n;o++){let n=i[o].h;const a=i[o].g;if(n-=t,0>n)t=Math.max(0,i[o].h-100),s=!1;else try{pn(a,e,"req"+n+"_")}catch(e){r&&r(a)}}if(s){r=e.join("&");break e}}}return e=e.l.splice(0,n),t.D=e,r}function Wn(e){e.g||e.u||(e.Y=1,Re(e.Ga,e),e.A=0)}function Kn(e){return!(e.g||e.u||3<=e.A||(e.Y++,e.u=rt(A(e.Ga,e),Yn(e,e.A)),e.A++,0))}function Gn(e){null!=e.B&&(h.clearTimeout(e.B),e.B=null)}function Qn(e){e.g=new pt(e,e.h,"rpc",e.Y),null===e.o&&(e.g.H=e.s),e.g.O=0;var t=Mt(e.oa);zt(t,"RID","rpc"),zt(t,"SID",e.J),zt(t,"CI",e.N?"0":"1"),zt(t,"AID",e.U),Hn(e,t),zt(t,"TYPE","xmlhttp"),e.o&&e.s&&Ln(t,e.o,e.s),e.K&&e.g.setTimeout(e.K);var n=e.g;e=e.la,n.K=1,n.v=Bt(Mt(t)),n.s=null,n.U=!0,bt(n,e)}function Jn(e){null!=e.v&&(h.clearTimeout(e.v),e.v=null)}function Xn(e,t){var n=null;if(e.g==t){Jn(e),Gn(e),e.g=null;var r=2}else{if(!ln(e.i,t))return;n=t.D,cn(e.i,t),r=1}if(e.I=t.N,0!=e.G)if(t.i)if(1==r){n=t.s?t.s.length:0,t=Date.now()-t.F;var i=e.C;ke(r=Xe(),new nt(r,n,t,i)),Bn(e)}else Wn(e);else if(3==(i=t.o)||0==i&&0<e.I||!(1==r&&function(e,t){return!(an(e.i)>=e.i.j-(e.m?1:0)||(e.m?(e.l=t.D.concat(e.l),0):1==e.G||2==e.G||e.C>=(e.Xa?0:e.Ya)||(e.m=rt(A(e.Ha,e,t),Yn(e,e.C)),e.C++,0)))}(e,t)||2==r&&Kn(e)))switch(n&&0<n.length&&(t=e.i,t.i=t.i.concat(n)),i){case 1:Zn(e,5);break;case 4:Zn(e,10);break;case 3:Zn(e,6);break;default:Zn(e,2)}}function Yn(e,t){let n=e.Pa+Math.floor(Math.random()*e.$a);return e.j||(n*=2),n*t}function Zn(e,t){if(e.h.info("Error code "+t),2==t){var n=null;e.j&&(n=null);var r=A(e.jb,e);n||(n=new Lt("//www.google.com/images/cleardot.gif"),h.location&&"http"==h.location.protocol||Ft(n,"https"),Bt(n)),function(e,t){const n=new Ke;if(h.Image){const r=new Image;r.onload=b(mn,n,r,"TestLoadImage: loaded",!0,t),r.onerror=b(mn,n,r,"TestLoadImage: error",!1,t),r.onabort=b(mn,n,r,"TestLoadImage: abort",!1,t),r.ontimeout=b(mn,n,r,"TestLoadImage: timeout",!1,t),h.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=e}else t(!1)}(n.toString(),r)}else tt(2);e.G=0,e.j&&e.j.va(t),er(e),jn(e)}function er(e){e.G=0,e.I=-1,e.j&&(0==hn(e.i).length&&0==e.l.length||(e.i.i.length=0,S(e.l),e.l.length=0),e.j.ua())}function tr(e,t,n){let r=function(e){return e instanceof Lt?Mt(e):new Lt(e,void 0)}(n);if(""!=r.i)t&&Ut(r,t+"."+r.i),Vt(r,r.m);else{const e=h.location;r=function(e,t,n,r){var i=new Lt(null,void 0);return e&&Ft(i,e),t&&Ut(i,t),n&&Vt(i,n),r&&(i.l=r),i}(e.protocol,t?t+"."+e.hostname:e.hostname,+e.port,n)}return e.aa&&L(e.aa,(function(e,t){zt(r,t,e)})),t=e.D,n=e.sa,t&&n&&zt(r,t,n),zt(r,"VER",e.ma),Hn(e,r),r}function nr(e,t,n){if(t&&!e.H)throw Error("Can't create secondary domain capable XhrIo object.");return(t=n&&e.Ba&&!e.qa?new _n(new gn({ib:!0})):new _n(e.qa)).L=e.H,t}function rr(){}function ir(){if($&&!(10<=Number(te)))throw Error("Environmental error: no available transport.")}function sr(e,t){Te.call(this),this.g=new Fn(t),this.l=e,this.h=t&&t.messageUrlParams||null,e=t&&t.messageHeaders||null,t&&t.clientProtocolHeaderRequired&&(e?e["X-Client-Protocol"]="webchannel":e={"X-Client-Protocol":"webchannel"}),this.g.s=e,e=t&&t.initMessageHeaders||null,t&&t.messageContentType&&(e?e["X-WebChannel-Content-Type"]=t.messageContentType:e={"X-WebChannel-Content-Type":t.messageContentType}),t&&t.ya&&(e?e["X-WebChannel-Client-Profile"]=t.ya:e={"X-WebChannel-Client-Profile":t.ya}),this.g.P=e,(e=t&&t.httpHeadersOverwriteParam)&&!I(e)&&(this.g.o=e),this.A=t&&t.supportsCrossDomainXhr||!1,this.v=t&&t.sendRawJson||!1,(t=t&&t.httpSessionIdParam)&&!I(t)&&(this.g.D=t,null!==(e=this.h)&&t in e&&t in(e=this.h)&&delete e[t]),this.j=new lr(this)}function or(e){ht.call(this);var t=e.__sm__;if(t){e:{for(const n in t){e=n;break e}e=void 0}(this.i=e)&&(e=this.i,t=null!==t&&e in t?t[e]:void 0),this.data=t}else this.data=e}function ar(){ft.call(this),this.status=1}function lr(e){this.g=e}(r=_n.prototype).ea=function(e,t,n,r){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+e);t=t?t.toUpperCase():"GET",this.H=e,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():ut.g(),this.C=this.u?at(this.u):at(ut),this.g.onreadystatechange=A(this.Fa,this);try{this.F=!0,this.g.open(t,String(e),!0),this.F=!1}catch(e){return void In(this,e)}e=n||"";const i=new xt(this.headers);r&&Nt(r,(function(e,t){i.set(t,e)})),r=function(e){e:{var t=Sn;const n=e.length,r="string"==typeof e?e.split(""):e;for(let i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e)){t=i;break e}t=-1}return 0>t?null:"string"==typeof e?e.charAt(t):e[t]}(i.T()),n=h.FormData&&e instanceof h.FormData,!(0<=C(kn,t))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(e,t){this.g.setRequestHeader(t,e)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{Pn(this),0<this.B&&((this.K=function(e){return $&&ee()&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=A(this.pa,this)):this.A=je(this.pa,this.B,this)),this.v=!0,this.g.send(e),this.v=!1}catch(e){In(this,e)}},r.pa=function(){void 0!==c&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,ke(this,"timeout"),this.abort(8))},r.abort=function(e){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=e||7,ke(this,"complete"),ke(this,"abort"),xn(this))},r.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),xn(this,!0)),_n.Z.M.call(this)},r.Fa=function(){this.s||(this.F||this.v||this.l?Nn(this):this.cb())},r.cb=function(){Nn(this)},r.ba=function(){try{return 2<Dn(this)?this.g.status:-1}catch(e){return-1}},r.ga=function(){try{return this.g?this.g.responseText:""}catch(e){return""}},r.Qa=function(e){if(this.g){var t=this.g.responseText;return e&&0==t.indexOf(e)&&(t=t.substring(e.length)),En(t)}},r.Da=function(){return this.m},r.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(r=Fn.prototype).ma=8,r.G=1,r.hb=function(e){try{this.h.info("Origin Trials invoked: "+e)}catch(e){}},r.Ha=function(e){if(this.m)if(this.m=null,1==this.G){if(!e){this.V=Math.floor(1e5*Math.random()),e=this.V++;const i=new pt(this,this.h,e,void 0);let s=this.s;if(this.P&&(s?(s=M(s),U(s,this.P)):s=this.P),null===this.o&&(i.H=s),this.ja)e:{for(var t=0,n=0;n<this.l.length;n++){var r=this.l[n];if(void 0===(r="__data__"in r.g&&"string"==typeof(r=r.g.__data__)?r.length:void 0))break;if(4096<(t+=r)){t=n;break e}if(4096===t||n===this.l.length-1){t=n+1;break e}}t=1e3}else t=1e3;t=qn(this,i,t),zt(n=Mt(this.F),"RID",e),zt(n,"CVER",22),this.D&&zt(n,"X-HTTP-Session-Id",this.D),Hn(this,n),this.o&&s&&Ln(n,this.o,s),un(this.i,i),this.Ra&&zt(n,"TYPE","init"),this.ja?(zt(n,"$req",t),zt(n,"SID","null"),i.$=!0,At(i,n,null)):At(i,n,t),this.G=2}}else 3==this.G&&(e?$n(this,e):0==this.l.length||on(this.i)||$n(this))},r.Ga=function(){if(this.u=null,Qn(this),this.$&&!(this.L||null==this.g||0>=this.O)){var e=2*this.O;this.h.info("BP detection timer enabled: "+e),this.B=rt(A(this.bb,this),e)}},r.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,tt(10),Vn(this),Qn(this))},r.ab=function(){null!=this.v&&(this.v=null,Vn(this),Kn(this),tt(19))},r.jb=function(e){e?(this.h.info("Successfully pinged google.com"),tt(2)):(this.h.info("Failed to ping google.com"),tt(1))},(r=rr.prototype).xa=function(){},r.wa=function(){},r.va=function(){},r.ua=function(){},r.Oa=function(){},ir.prototype.g=function(e,t){return new sr(e,t)},w(sr,Te),sr.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var e=this.g,t=this.l,n=this.h||void 0;e.Wa&&(e.h.info("Origin Trials enabled."),Re(A(e.hb,e,t))),tt(0),e.W=t,e.aa=n||{},e.N=e.X,e.F=tr(e,null,e.W),Bn(e)},sr.prototype.close=function(){Un(this.g)},sr.prototype.u=function(e){if("string"==typeof e){var t={};t.__data__=e,zn(this.g,t)}else this.v?((t={}).__data__=Ie(e),zn(this.g,t)):zn(this.g,e)},sr.prototype.M=function(){this.g.j=null,delete this.j,Un(this.g),delete this.g,sr.Z.M.call(this)},w(or,ht),w(ar,ft),w(lr,rr),lr.prototype.xa=function(){ke(this.g,"a")},lr.prototype.wa=function(e){ke(this.g,new or(e))},lr.prototype.va=function(e){ke(this.g,new ar(e))},lr.prototype.ua=function(){ke(this.g,"b")},ir.prototype.createWebChannel=ir.prototype.g,sr.prototype.send=sr.prototype.u,sr.prototype.open=sr.prototype.m,sr.prototype.close=sr.prototype.close,it.NO_ERROR=0,it.TIMEOUT=8,it.HTTP_ERROR=6,st.COMPLETE="complete",lt.EventType=ct,ct.OPEN="a",ct.CLOSE="b",ct.ERROR="c",ct.MESSAGE="d",Te.prototype.listen=Te.prototype.N,_n.prototype.listenOnce=_n.prototype.O,_n.prototype.getLastError=_n.prototype.La,_n.prototype.getLastErrorCode=_n.prototype.Da,_n.prototype.getStatus=_n.prototype.ba,_n.prototype.getResponseJson=_n.prototype.Qa,_n.prototype.getResponseText=_n.prototype.ga,_n.prototype.send=_n.prototype.ea;var ur=u.createWebChannelTransport=function(){return new ir},cr=u.getStatEventTarget=function(){return Xe()},hr=u.ErrorCode=it,fr=u.EventType=st,dr=u.Event=Qe,pr=u.Stat={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},mr=u.FetchXmlHttpFactory=gn,gr=u.WebChannel=lt,yr=u.XhrIo=_n;const vr="@firebase/firestore";class Ar{constructor(e){this.uid=e}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(e){return e.uid===this.uid}}Ar.UNAUTHENTICATED=new Ar(null),Ar.GOOGLE_CREDENTIALS=new Ar("google-credentials-uid"),Ar.FIRST_PARTY=new Ar("first-party-uid"),Ar.MOCK_USER=new Ar("mock-user");let br="9.9.1";const wr=new o.Yd("@firebase/firestore");function Er(){return wr.logLevel}function _r(e,...t){if(wr.logLevel<=o.in.DEBUG){const n=t.map(kr);wr.debug(`Firestore (${br}): ${e}`,...n)}}function Cr(e,...t){if(wr.logLevel<=o.in.ERROR){const n=t.map(kr);wr.error(`Firestore (${br}): ${e}`,...n)}}function Tr(e,...t){if(wr.logLevel<=o.in.WARN){const n=t.map(kr);wr.warn(`Firestore (${br}): ${e}`,...n)}}function kr(e){if("string"==typeof e)return e;try{return t=e,JSON.stringify(t)}catch(t){return e}var t}function Sr(e="Unexpected state"){const t=`FIRESTORE (${br}) INTERNAL ASSERTION FAILED: `+e;throw Cr(t),new Error(t)}function Ir(e,t){e||Sr()}function Or(e,t){return e}const Nr={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class xr extends a.ZR{constructor(e,t){super(e,t),this.code=e,this.message=t,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Pr{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}class Dr{constructor(e,t){this.user=t,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${e}`)}}class Rr{getToken(){return Promise.resolve(null)}invalidateToken(){}start(e,t){e.enqueueRetryable((()=>t(Ar.UNAUTHENTICATED)))}shutdown(){}}class Lr{constructor(e){this.t=e,this.currentUser=Ar.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(e,t){let n=this.i;const r=e=>this.i!==n?(n=this.i,t(e)):Promise.resolve();let i=new Pr;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new Pr,e.enqueueRetryable((()=>r(this.currentUser)))};const s=()=>{const t=i;e.enqueueRetryable((async()=>{await t.promise,await r(this.currentUser)}))},o=e=>{_r("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),s()};this.t.onInit((e=>o(e))),setTimeout((()=>{if(!this.auth){const e=this.t.getImmediate({optional:!0});e?o(e):(_r("FirebaseAuthCredentialsProvider","Auth not yet detected"),i.resolve(),i=new Pr)}}),0),s()}getToken(){const e=this.i,t=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(t).then((t=>this.i!==e?(_r("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):t?(Ir("string"==typeof t.accessToken),new Dr(t.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const e=this.auth&&this.auth.getUid();return Ir(null===e||"string"==typeof e),new Ar(e)}}class Mr{constructor(e,t,n){this.type="FirstParty",this.user=Ar.FIRST_PARTY,this.headers=new Map,this.headers.set("X-Goog-AuthUser",t);const r=e.auth.getAuthHeaderValueForFirstParty([]);r&&this.headers.set("Authorization",r),n&&this.headers.set("X-Goog-Iam-Authorization-Token",n)}}class Fr{constructor(e,t,n){this.h=e,this.l=t,this.m=n}getToken(){return Promise.resolve(new Mr(this.h,this.l,this.m))}start(e,t){e.enqueueRetryable((()=>t(Ar.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class Ur{constructor(e){this.value=e,this.type="AppCheck",this.headers=new Map,e&&e.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class Vr{constructor(e){this.g=e,this.forceRefresh=!1,this.appCheck=null,this.p=null}start(e,t){const n=e=>{null!=e.error&&_r("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);const n=e.token!==this.p;return this.p=e.token,_r("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?t(e.token):Promise.resolve()};this.o=t=>{e.enqueueRetryable((()=>n(t)))};const r=e=>{_r("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=e,this.appCheck.addTokenListener(this.o)};this.g.onInit((e=>r(e))),setTimeout((()=>{if(!this.appCheck){const e=this.g.getImmediate({optional:!0});e?r(e):_r("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const e=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(e).then((e=>e?(Ir("string"==typeof e.token),this.p=e.token,new Ur(e.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}function jr(e){const t="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(e);if(t&&"function"==typeof t.getRandomValues)t.getRandomValues(n);else for(let t=0;t<e;t++)n[t]=Math.floor(256*Math.random());return n}class zr{static I(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t=Math.floor(256/e.length)*e.length;let n="";for(;n.length<20;){const r=jr(40);for(let i=0;i<r.length;++i)n.length<20&&r[i]<t&&(n+=e.charAt(r[i]%e.length))}return n}}function Br(e,t){return e<t?-1:e>t?1:0}function $r(e,t,n){return e.length===t.length&&e.every(((e,r)=>n(e,t[r])))}class Hr{constructor(e,t){if(this.seconds=e,this.nanoseconds=t,t<0)throw new xr(Nr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(t>=1e9)throw new xr(Nr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(e<-62135596800)throw new xr(Nr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e);if(e>=253402300800)throw new xr(Nr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e)}static now(){return Hr.fromMillis(Date.now())}static fromDate(e){return Hr.fromMillis(e.getTime())}static fromMillis(e){const t=Math.floor(e/1e3),n=Math.floor(1e6*(e-1e3*t));return new Hr(t,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(e){return this.seconds===e.seconds?Br(this.nanoseconds,e.nanoseconds):Br(this.seconds,e.seconds)}isEqual(e){return e.seconds===this.seconds&&e.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const e=this.seconds- -62135596800;return String(e).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class qr{constructor(e){this.timestamp=e}static fromTimestamp(e){return new qr(e)}static min(){return new qr(new Hr(0,0))}static max(){return new qr(new Hr(253402300799,999999999))}compareTo(e){return this.timestamp._compareTo(e.timestamp)}isEqual(e){return this.timestamp.isEqual(e.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class Wr{constructor(e,t,n){void 0===t?t=0:t>e.length&&Sr(),void 0===n?n=e.length-t:n>e.length-t&&Sr(),this.segments=e,this.offset=t,this.len=n}get length(){return this.len}isEqual(e){return 0===Wr.comparator(this,e)}child(e){const t=this.segments.slice(this.offset,this.limit());return e instanceof Wr?e.forEach((e=>{t.push(e)})):t.push(e),this.construct(t)}limit(){return this.offset+this.length}popFirst(e){return e=void 0===e?1:e,this.construct(this.segments,this.offset+e,this.length-e)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(e){return this.segments[this.offset+e]}isEmpty(){return 0===this.length}isPrefixOf(e){if(e.length<this.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}isImmediateParentOf(e){if(this.length+1!==e.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}forEach(e){for(let t=this.offset,n=this.limit();t<n;t++)e(this.segments[t])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(e,t){const n=Math.min(e.length,t.length);for(let r=0;r<n;r++){const n=e.get(r),i=t.get(r);if(n<i)return-1;if(n>i)return 1}return e.length<t.length?-1:e.length>t.length?1:0}}class Kr extends Wr{construct(e,t,n){return new Kr(e,t,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...e){const t=[];for(const n of e){if(n.indexOf("//")>=0)throw new xr(Nr.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);t.push(...n.split("/").filter((e=>e.length>0)))}return new Kr(t)}static emptyPath(){return new Kr([])}}const Gr=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class Qr extends Wr{construct(e,t,n){return new Qr(e,t,n)}static isValidIdentifier(e){return Gr.test(e)}canonicalString(){return this.toArray().map((e=>(e=e.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),Qr.isValidIdentifier(e)||(e="`"+e+"`"),e))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new Qr(["__name__"])}static fromServerFormat(e){const t=[];let n="",r=0;const i=()=>{if(0===n.length)throw new xr(Nr.INVALID_ARGUMENT,`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);t.push(n),n=""};let s=!1;for(;r<e.length;){const t=e[r];if("\\"===t){if(r+1===e.length)throw new xr(Nr.INVALID_ARGUMENT,"Path has trailing escape character: "+e);const t=e[r+1];if("\\"!==t&&"."!==t&&"`"!==t)throw new xr(Nr.INVALID_ARGUMENT,"Path has invalid escape sequence: "+e);n+=t,r+=2}else"`"===t?(s=!s,r++):"."!==t||s?(n+=t,r++):(i(),r++)}if(i(),s)throw new xr(Nr.INVALID_ARGUMENT,"Unterminated ` in path: "+e);return new Qr(t)}static emptyPath(){return new Qr([])}}class Jr{constructor(e){this.path=e}static fromPath(e){return new Jr(Kr.fromString(e))}static fromName(e){return new Jr(Kr.fromString(e).popFirst(5))}static empty(){return new Jr(Kr.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(e){return this.path.length>=2&&this.path.get(this.path.length-2)===e}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(e){return null!==e&&0===Kr.comparator(this.path,e.path)}toString(){return this.path.toString()}static comparator(e,t){return Kr.comparator(e.path,t.path)}static isDocumentKey(e){return e.length%2==0}static fromSegments(e){return new Jr(new Kr(e.slice()))}}function Xr(e){return new Yr(e.readTime,e.key,-1)}class Yr{constructor(e,t,n){this.readTime=e,this.documentKey=t,this.largestBatchId=n}static min(){return new Yr(qr.min(),Jr.empty(),-1)}static max(){return new Yr(qr.max(),Jr.empty(),-1)}}function Zr(e,t){let n=e.readTime.compareTo(t.readTime);return 0!==n?n:(n=Jr.comparator(e.documentKey,t.documentKey),0!==n?n:Br(e.largestBatchId,t.largestBatchId))}async function ei(e){if(e.code!==Nr.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==e.message)throw e;_r("LocalStore","Unexpectedly lost primary lease")}class ti{constructor(e){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,e((e=>{this.isDone=!0,this.result=e,this.nextCallback&&this.nextCallback(e)}),(e=>{this.isDone=!0,this.error=e,this.catchCallback&&this.catchCallback(e)}))}catch(e){return this.next(void 0,e)}next(e,t){return this.callbackAttached&&Sr(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(t,this.error):this.wrapSuccess(e,this.result):new ti(((n,r)=>{this.nextCallback=t=>{this.wrapSuccess(e,t).next(n,r)},this.catchCallback=e=>{this.wrapFailure(t,e).next(n,r)}}))}toPromise(){return new Promise(((e,t)=>{this.next(e,t)}))}wrapUserFunction(e){try{const t=e();return t instanceof ti?t:ti.resolve(t)}catch(e){return ti.reject(e)}}wrapSuccess(e,t){return e?this.wrapUserFunction((()=>e(t))):ti.resolve(t)}wrapFailure(e,t){return e?this.wrapUserFunction((()=>e(t))):ti.reject(t)}static resolve(e){return new ti(((t,n)=>{t(e)}))}static reject(e){return new ti(((t,n)=>{n(e)}))}static waitFor(e){return new ti(((t,n)=>{let r=0,i=0,s=!1;e.forEach((e=>{++r,e.next((()=>{++i,s&&i===r&&t()}),(e=>n(e)))})),s=!0,i===r&&t()}))}static or(e){let t=ti.resolve(!1);for(const n of e)t=t.next((e=>e?ti.resolve(e):n()));return t}static forEach(e,t){const n=[];return e.forEach(((e,r)=>{n.push(t.call(this,e,r))})),this.waitFor(n)}static mapArray(e,t){return new ti(((n,r)=>{const i=e.length,s=new Array(i);let o=0;for(let a=0;a<i;a++){const l=a;t(e[l]).next((e=>{s[l]=e,++o,o===i&&n(s)}),(e=>r(e)))}}))}static doWhile(e,t){return new ti(((n,r)=>{const i=()=>{!0===e()?t().next((()=>{i()}),r):n()};i()}))}}function ni(e){return"IndexedDbTransactionError"===e.name}class ri{constructor(e,t){this.previousValue=e,t&&(t.sequenceNumberHandler=e=>this.it(e),this.rt=e=>t.writeSequenceNumber(e))}it(e){return this.previousValue=Math.max(e,this.previousValue),this.previousValue}next(){const e=++this.previousValue;return this.rt&&this.rt(e),e}}function ii(e){let t=0;for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t++;return t}function si(e,t){for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}function oi(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}ri.ot=-1;class ai{constructor(e,t){this.comparator=e,this.root=t||ui.EMPTY}insert(e,t){return new ai(this.comparator,this.root.insert(e,t,this.comparator).copy(null,null,ui.BLACK,null,null))}remove(e){return new ai(this.comparator,this.root.remove(e,this.comparator).copy(null,null,ui.BLACK,null,null))}get(e){let t=this.root;for(;!t.isEmpty();){const n=this.comparator(e,t.key);if(0===n)return t.value;n<0?t=t.left:n>0&&(t=t.right)}return null}indexOf(e){let t=0,n=this.root;for(;!n.isEmpty();){const r=this.comparator(e,n.key);if(0===r)return t+n.left.size;r<0?n=n.left:(t+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(e){return this.root.inorderTraversal(e)}forEach(e){this.inorderTraversal(((t,n)=>(e(t,n),!1)))}toString(){const e=[];return this.inorderTraversal(((t,n)=>(e.push(`${t}:${n}`),!1))),`{${e.join(", ")}}`}reverseTraversal(e){return this.root.reverseTraversal(e)}getIterator(){return new li(this.root,null,this.comparator,!1)}getIteratorFrom(e){return new li(this.root,e,this.comparator,!1)}getReverseIterator(){return new li(this.root,null,this.comparator,!0)}getReverseIteratorFrom(e){return new li(this.root,e,this.comparator,!0)}}class li{constructor(e,t,n,r){this.isReverse=r,this.nodeStack=[];let i=1;for(;!e.isEmpty();)if(i=t?n(e.key,t):1,t&&r&&(i*=-1),i<0)e=this.isReverse?e.left:e.right;else{if(0===i){this.nodeStack.push(e);break}this.nodeStack.push(e),e=this.isReverse?e.right:e.left}}getNext(){let e=this.nodeStack.pop();const t={key:e.key,value:e.value};if(this.isReverse)for(e=e.left;!e.isEmpty();)this.nodeStack.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack.push(e),e=e.left;return t}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const e=this.nodeStack[this.nodeStack.length-1];return{key:e.key,value:e.value}}}class ui{constructor(e,t,n,r,i){this.key=e,this.value=t,this.color=null!=n?n:ui.RED,this.left=null!=r?r:ui.EMPTY,this.right=null!=i?i:ui.EMPTY,this.size=this.left.size+1+this.right.size}copy(e,t,n,r,i){return new ui(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let r=this;const i=n(e,r.key);return r=i<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===i?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return ui.EMPTY;let e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),e=e.copy(null,null,null,e.left.removeMin(),null),e.fixUp()}remove(e,t){let n,r=this;if(t(e,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(e,t),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===t(e,r.key)){if(r.right.isEmpty())return ui.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(e,t))}return r.fixUp()}isRed(){return this.color}fixUp(){let e=this;return e.right.isRed()&&!e.left.isRed()&&(e=e.rotateLeft()),e.left.isRed()&&e.left.left.isRed()&&(e=e.rotateRight()),e.left.isRed()&&e.right.isRed()&&(e=e.colorFlip()),e}moveRedLeft(){let e=this.colorFlip();return e.right.left.isRed()&&(e=e.copy(null,null,null,null,e.right.rotateRight()),e=e.rotateLeft(),e=e.colorFlip()),e}moveRedRight(){let e=this.colorFlip();return e.left.left.isRed()&&(e=e.rotateRight(),e=e.colorFlip()),e}rotateLeft(){const e=this.copy(null,null,ui.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight(){const e=this.copy(null,null,ui.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth(){const e=this.check();return Math.pow(2,e)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw Sr();if(this.right.isRed())throw Sr();const e=this.left.check();if(e!==this.right.check())throw Sr();return e+(this.isRed()?0:1)}}ui.EMPTY=null,ui.RED=!0,ui.BLACK=!1,ui.EMPTY=new class{constructor(){this.size=0}get key(){throw Sr()}get value(){throw Sr()}get color(){throw Sr()}get left(){throw Sr()}get right(){throw Sr()}copy(e,t,n,r,i){return this}insert(e,t,n){return new ui(e,t)}remove(e,t){return this}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class ci{constructor(e){this.comparator=e,this.data=new ai(this.comparator)}has(e){return null!==this.data.get(e)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(e){return this.data.indexOf(e)}forEach(e){this.data.inorderTraversal(((t,n)=>(e(t),!1)))}forEachInRange(e,t){const n=this.data.getIteratorFrom(e[0]);for(;n.hasNext();){const r=n.getNext();if(this.comparator(r.key,e[1])>=0)return;t(r.key)}}forEachWhile(e,t){let n;for(n=void 0!==t?this.data.getIteratorFrom(t):this.data.getIterator();n.hasNext();)if(!e(n.getNext().key))return}firstAfterOrEqual(e){const t=this.data.getIteratorFrom(e);return t.hasNext()?t.getNext().key:null}getIterator(){return new hi(this.data.getIterator())}getIteratorFrom(e){return new hi(this.data.getIteratorFrom(e))}add(e){return this.copy(this.data.remove(e).insert(e,!0))}delete(e){return this.has(e)?this.copy(this.data.remove(e)):this}isEmpty(){return this.data.isEmpty()}unionWith(e){let t=this;return t.size<e.size&&(t=e,e=this),e.forEach((e=>{t=t.add(e)})),t}isEqual(e){if(!(e instanceof ci))return!1;if(this.size!==e.size)return!1;const t=this.data.getIterator(),n=e.data.getIterator();for(;t.hasNext();){const e=t.getNext().key,r=n.getNext().key;if(0!==this.comparator(e,r))return!1}return!0}toArray(){const e=[];return this.forEach((t=>{e.push(t)})),e}toString(){const e=[];return this.forEach((t=>e.push(t))),"SortedSet("+e.toString()+")"}copy(e){const t=new ci(this.comparator);return t.data=e,t}}class hi{constructor(e){this.iter=e}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}class fi{constructor(e){this.fields=e,e.sort(Qr.comparator)}static empty(){return new fi([])}unionWith(e){let t=new ci(Qr.comparator);for(const e of this.fields)t=t.add(e);for(const n of e)t=t.add(n);return new fi(t.toArray())}covers(e){for(const t of this.fields)if(t.isPrefixOf(e))return!0;return!1}isEqual(e){return $r(this.fields,e.fields,((e,t)=>e.isEqual(t)))}}class di{constructor(e){this.binaryString=e}static fromBase64String(e){const t=atob(e);return new di(t)}static fromUint8Array(e){const t=function(e){let t="";for(let n=0;n<e.length;++n)t+=String.fromCharCode(e[n]);return t}(e);return new di(t)}[Symbol.iterator](){let e=0;return{next:()=>e<this.binaryString.length?{value:this.binaryString.charCodeAt(e++),done:!1}:{value:void 0,done:!0}}}toBase64(){return e=this.binaryString,btoa(e);var e}toUint8Array(){return function(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(e){return Br(this.binaryString,e.binaryString)}isEqual(e){return this.binaryString===e.binaryString}}di.EMPTY_BYTE_STRING=new di("");const pi=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function mi(e){if(Ir(!!e),"string"==typeof e){let t=0;const n=pi.exec(e);if(Ir(!!n),n[1]){let e=n[1];e=(e+"000000000").substr(0,9),t=Number(e)}const r=new Date(e);return{seconds:Math.floor(r.getTime()/1e3),nanos:t}}return{seconds:gi(e.seconds),nanos:gi(e.nanos)}}function gi(e){return"number"==typeof e?e:"string"==typeof e?Number(e):0}function yi(e){return"string"==typeof e?di.fromBase64String(e):di.fromUint8Array(e)}function vi(e){var t,n;return"server_timestamp"===(null===(n=((null===(t=null==e?void 0:e.mapValue)||void 0===t?void 0:t.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function Ai(e){const t=e.mapValue.fields.__previous_value__;return vi(t)?Ai(t):t}function bi(e){const t=mi(e.mapValue.fields.__local_write_time__.timestampValue);return new Hr(t.seconds,t.nanos)}class wi{constructor(e,t,n,r,i,s,o,a){this.databaseId=e,this.appId=t,this.persistenceKey=n,this.host=r,this.ssl=i,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class Ei{constructor(e,t){this.projectId=e,this.database=t||"(default)"}static empty(){return new Ei("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(e){return e instanceof Ei&&e.projectId===this.projectId&&e.database===this.database}}function _i(e){return null==e}function Ci(e){return 0===e&&1/e==-1/0}const Ti={fields:{__type__:{stringValue:"__max__"}}};function ki(e){return"nullValue"in e?0:"booleanValue"in e?1:"integerValue"in e||"doubleValue"in e?2:"timestampValue"in e?3:"stringValue"in e?5:"bytesValue"in e?6:"referenceValue"in e?7:"geoPointValue"in e?8:"arrayValue"in e?9:"mapValue"in e?vi(e)?4:Vi(e)?9007199254740991:10:Sr()}function Si(e,t){if(e===t)return!0;const n=ki(e);if(n!==ki(t))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return e.booleanValue===t.booleanValue;case 4:return bi(e).isEqual(bi(t));case 3:return function(e,t){if("string"==typeof e.timestampValue&&"string"==typeof t.timestampValue&&e.timestampValue.length===t.timestampValue.length)return e.timestampValue===t.timestampValue;const n=mi(e.timestampValue),r=mi(t.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(e,t);case 5:return e.stringValue===t.stringValue;case 6:return function(e,t){return yi(e.bytesValue).isEqual(yi(t.bytesValue))}(e,t);case 7:return e.referenceValue===t.referenceValue;case 8:return function(e,t){return gi(e.geoPointValue.latitude)===gi(t.geoPointValue.latitude)&&gi(e.geoPointValue.longitude)===gi(t.geoPointValue.longitude)}(e,t);case 2:return function(e,t){if("integerValue"in e&&"integerValue"in t)return gi(e.integerValue)===gi(t.integerValue);if("doubleValue"in e&&"doubleValue"in t){const n=gi(e.doubleValue),r=gi(t.doubleValue);return n===r?Ci(n)===Ci(r):isNaN(n)&&isNaN(r)}return!1}(e,t);case 9:return $r(e.arrayValue.values||[],t.arrayValue.values||[],Si);case 10:return function(e,t){const n=e.mapValue.fields||{},r=t.mapValue.fields||{};if(ii(n)!==ii(r))return!1;for(const e in n)if(n.hasOwnProperty(e)&&(void 0===r[e]||!Si(n[e],r[e])))return!1;return!0}(e,t);default:return Sr()}}function Ii(e,t){return void 0!==(e.values||[]).find((e=>Si(e,t)))}function Oi(e,t){if(e===t)return 0;const n=ki(e),r=ki(t);if(n!==r)return Br(n,r);switch(n){case 0:case 9007199254740991:return 0;case 1:return Br(e.booleanValue,t.booleanValue);case 2:return function(e,t){const n=gi(e.integerValue||e.doubleValue),r=gi(t.integerValue||t.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(e,t);case 3:return Ni(e.timestampValue,t.timestampValue);case 4:return Ni(bi(e),bi(t));case 5:return Br(e.stringValue,t.stringValue);case 6:return function(e,t){const n=yi(e),r=yi(t);return n.compareTo(r)}(e.bytesValue,t.bytesValue);case 7:return function(e,t){const n=e.split("/"),r=t.split("/");for(let e=0;e<n.length&&e<r.length;e++){const t=Br(n[e],r[e]);if(0!==t)return t}return Br(n.length,r.length)}(e.referenceValue,t.referenceValue);case 8:return function(e,t){const n=Br(gi(e.latitude),gi(t.latitude));return 0!==n?n:Br(gi(e.longitude),gi(t.longitude))}(e.geoPointValue,t.geoPointValue);case 9:return function(e,t){const n=e.values||[],r=t.values||[];for(let e=0;e<n.length&&e<r.length;++e){const t=Oi(n[e],r[e]);if(t)return t}return Br(n.length,r.length)}(e.arrayValue,t.arrayValue);case 10:return function(e,t){if(e===Ti&&t===Ti)return 0;if(e===Ti)return 1;if(t===Ti)return-1;const n=e.fields||{},r=Object.keys(n),i=t.fields||{},s=Object.keys(i);r.sort(),s.sort();for(let e=0;e<r.length&&e<s.length;++e){const t=Br(r[e],s[e]);if(0!==t)return t;const o=Oi(n[r[e]],i[s[e]]);if(0!==o)return o}return Br(r.length,s.length)}(e.mapValue,t.mapValue);default:throw Sr()}}function Ni(e,t){if("string"==typeof e&&"string"==typeof t&&e.length===t.length)return Br(e,t);const n=mi(e),r=mi(t),i=Br(n.seconds,r.seconds);return 0!==i?i:Br(n.nanos,r.nanos)}function xi(e){return Pi(e)}function Pi(e){return"nullValue"in e?"null":"booleanValue"in e?""+e.booleanValue:"integerValue"in e?""+e.integerValue:"doubleValue"in e?""+e.doubleValue:"timestampValue"in e?function(e){const t=mi(e);return`time(${t.seconds},${t.nanos})`}(e.timestampValue):"stringValue"in e?e.stringValue:"bytesValue"in e?yi(e.bytesValue).toBase64():"referenceValue"in e?(n=e.referenceValue,Jr.fromName(n).toString()):"geoPointValue"in e?`geo(${(t=e.geoPointValue).latitude},${t.longitude})`:"arrayValue"in e?function(e){let t="[",n=!0;for(const r of e.values||[])n?n=!1:t+=",",t+=Pi(r);return t+"]"}(e.arrayValue):"mapValue"in e?function(e){const t=Object.keys(e.fields||{}).sort();let n="{",r=!0;for(const i of t)r?r=!1:n+=",",n+=`${i}:${Pi(e.fields[i])}`;return n+"}"}(e.mapValue):Sr();var t,n}function Di(e){return!!e&&"integerValue"in e}function Ri(e){return!!e&&"arrayValue"in e}function Li(e){return!!e&&"nullValue"in e}function Mi(e){return!!e&&"doubleValue"in e&&isNaN(Number(e.doubleValue))}function Fi(e){return!!e&&"mapValue"in e}function Ui(e){if(e.geoPointValue)return{geoPointValue:Object.assign({},e.geoPointValue)};if(e.timestampValue&&"object"==typeof e.timestampValue)return{timestampValue:Object.assign({},e.timestampValue)};if(e.mapValue){const t={mapValue:{fields:{}}};return si(e.mapValue.fields,((e,n)=>t.mapValue.fields[e]=Ui(n))),t}if(e.arrayValue){const t={arrayValue:{values:[]}};for(let n=0;n<(e.arrayValue.values||[]).length;++n)t.arrayValue.values[n]=Ui(e.arrayValue.values[n]);return t}return Object.assign({},e)}function Vi(e){return"__max__"===(((e.mapValue||{}).fields||{}).__type__||{}).stringValue}class ji{constructor(e){this.value=e}static empty(){return new ji({mapValue:{}})}field(e){if(e.isEmpty())return this.value;{let t=this.value;for(let n=0;n<e.length-1;++n)if(t=(t.mapValue.fields||{})[e.get(n)],!Fi(t))return null;return t=(t.mapValue.fields||{})[e.lastSegment()],t||null}}set(e,t){this.getFieldsMap(e.popLast())[e.lastSegment()]=Ui(t)}setAll(e){let t=Qr.emptyPath(),n={},r=[];e.forEach(((e,i)=>{if(!t.isImmediateParentOf(i)){const e=this.getFieldsMap(t);this.applyChanges(e,n,r),n={},r=[],t=i.popLast()}e?n[i.lastSegment()]=Ui(e):r.push(i.lastSegment())}));const i=this.getFieldsMap(t);this.applyChanges(i,n,r)}delete(e){const t=this.field(e.popLast());Fi(t)&&t.mapValue.fields&&delete t.mapValue.fields[e.lastSegment()]}isEqual(e){return Si(this.value,e.value)}getFieldsMap(e){let t=this.value;t.mapValue.fields||(t.mapValue={fields:{}});for(let n=0;n<e.length;++n){let r=t.mapValue.fields[e.get(n)];Fi(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},t.mapValue.fields[e.get(n)]=r),t=r}return t.mapValue.fields}applyChanges(e,t,n){si(t,((t,n)=>e[t]=n));for(const t of n)delete e[t]}clone(){return new ji(Ui(this.value))}}function zi(e){const t=[];return si(e.fields,((e,n)=>{const r=new Qr([e]);if(Fi(n)){const e=zi(n.mapValue).fields;if(0===e.length)t.push(r);else for(const n of e)t.push(r.child(n))}else t.push(r)})),new fi(t)}class Bi{constructor(e,t,n,r,i,s){this.key=e,this.documentType=t,this.version=n,this.readTime=r,this.data=i,this.documentState=s}static newInvalidDocument(e){return new Bi(e,0,qr.min(),qr.min(),ji.empty(),0)}static newFoundDocument(e,t,n){return new Bi(e,1,t,qr.min(),n,0)}static newNoDocument(e,t){return new Bi(e,2,t,qr.min(),ji.empty(),0)}static newUnknownDocument(e,t){return new Bi(e,3,t,qr.min(),ji.empty(),2)}convertToFoundDocument(e,t){return this.version=e,this.documentType=1,this.data=t,this.documentState=0,this}convertToNoDocument(e){return this.version=e,this.documentType=2,this.data=ji.empty(),this.documentState=0,this}convertToUnknownDocument(e){return this.version=e,this.documentType=3,this.data=ji.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=qr.min(),this}setReadTime(e){return this.readTime=e,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(e){return e instanceof Bi&&this.key.isEqual(e.key)&&this.version.isEqual(e.version)&&this.documentType===e.documentType&&this.documentState===e.documentState&&this.data.isEqual(e.data)}mutableCopy(){return new Bi(this.key,this.documentType,this.version,this.readTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class $i{constructor(e,t=null,n=[],r=[],i=null,s=null,o=null){this.path=e,this.collectionGroup=t,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=s,this.endAt=o,this.ut=null}}function Hi(e,t=null,n=[],r=[],i=null,s=null,o=null){return new $i(e,t,n,r,i,s,o)}function qi(e){const t=Or(e);if(null===t.ut){let e=t.path.canonicalString();null!==t.collectionGroup&&(e+="|cg:"+t.collectionGroup),e+="|f:",e+=t.filters.map((e=>{return(t=e).field.canonicalString()+t.op.toString()+xi(t.value);var t})).join(","),e+="|ob:",e+=t.orderBy.map((e=>function(e){return e.field.canonicalString()+e.dir}(e))).join(","),_i(t.limit)||(e+="|l:",e+=t.limit),t.startAt&&(e+="|lb:",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((e=>xi(e))).join(",")),t.endAt&&(e+="|ub:",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((e=>xi(e))).join(",")),t.ut=e}return t.ut}function Wi(e,t){if(e.limit!==t.limit)return!1;if(e.orderBy.length!==t.orderBy.length)return!1;for(let n=0;n<e.orderBy.length;n++)if(!ss(e.orderBy[n],t.orderBy[n]))return!1;if(e.filters.length!==t.filters.length)return!1;for(let i=0;i<e.filters.length;i++)if(n=e.filters[i],r=t.filters[i],n.op!==r.op||!n.field.isEqual(r.field)||!Si(n.value,r.value))return!1;var n,r;return e.collectionGroup===t.collectionGroup&&!!e.path.isEqual(t.path)&&!!as(e.startAt,t.startAt)&&as(e.endAt,t.endAt)}function Ki(e){return Jr.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}class Gi extends class{}{constructor(e,t,n){super(),this.field=e,this.op=t,this.value=n}static create(e,t,n){return e.isKeyField()?"in"===t||"not-in"===t?this.ct(e,t,n):new Qi(e,t,n):"array-contains"===t?new Zi(e,n):"in"===t?new es(e,n):"not-in"===t?new ts(e,n):"array-contains-any"===t?new ns(e,n):new Gi(e,t,n)}static ct(e,t,n){return"in"===t?new Ji(e,n):new Xi(e,n)}matches(e){const t=e.data.field(this.field);return"!="===this.op?null!==t&&this.at(Oi(t,this.value)):null!==t&&ki(this.value)===ki(t)&&this.at(Oi(t,this.value))}at(e){switch(this.op){case"<":return e<0;case"<=":return e<=0;case"==":return 0===e;case"!=":return 0!==e;case">":return e>0;case">=":return e>=0;default:return Sr()}}ht(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class Qi extends Gi{constructor(e,t,n){super(e,t,n),this.key=Jr.fromName(n.referenceValue)}matches(e){const t=Jr.comparator(e.key,this.key);return this.at(t)}}class Ji extends Gi{constructor(e,t){super(e,"in",t),this.keys=Yi(0,t)}matches(e){return this.keys.some((t=>t.isEqual(e.key)))}}class Xi extends Gi{constructor(e,t){super(e,"not-in",t),this.keys=Yi(0,t)}matches(e){return!this.keys.some((t=>t.isEqual(e.key)))}}function Yi(e,t){var n;return((null===(n=t.arrayValue)||void 0===n?void 0:n.values)||[]).map((e=>Jr.fromName(e.referenceValue)))}class Zi extends Gi{constructor(e,t){super(e,"array-contains",t)}matches(e){const t=e.data.field(this.field);return Ri(t)&&Ii(t.arrayValue,this.value)}}class es extends Gi{constructor(e,t){super(e,"in",t)}matches(e){const t=e.data.field(this.field);return null!==t&&Ii(this.value.arrayValue,t)}}class ts extends Gi{constructor(e,t){super(e,"not-in",t)}matches(e){if(Ii(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const t=e.data.field(this.field);return null!==t&&!Ii(this.value.arrayValue,t)}}class ns extends Gi{constructor(e,t){super(e,"array-contains-any",t)}matches(e){const t=e.data.field(this.field);return!(!Ri(t)||!t.arrayValue.values)&&t.arrayValue.values.some((e=>Ii(this.value.arrayValue,e)))}}class rs{constructor(e,t){this.position=e,this.inclusive=t}}class is{constructor(e,t="asc"){this.field=e,this.dir=t}}function ss(e,t){return e.dir===t.dir&&e.field.isEqual(t.field)}function os(e,t,n){let r=0;for(let i=0;i<e.position.length;i++){const s=t[i],o=e.position[i];if(r=s.field.isKeyField()?Jr.comparator(Jr.fromName(o.referenceValue),n.key):Oi(o,n.data.field(s.field)),"desc"===s.dir&&(r*=-1),0!==r)break}return r}function as(e,t){if(null===e)return null===t;if(null===t)return!1;if(e.inclusive!==t.inclusive||e.position.length!==t.position.length)return!1;for(let n=0;n<e.position.length;n++)if(!Si(e.position[n],t.position[n]))return!1;return!0}class ls{constructor(e,t=null,n=[],r=[],i=null,s="F",o=null,a=null){this.path=e,this.collectionGroup=t,this.explicitOrderBy=n,this.filters=r,this.limit=i,this.limitType=s,this.startAt=o,this.endAt=a,this.lt=null,this.ft=null,this.startAt,this.endAt}}function us(e){return new ls(e)}function cs(e){const t=Or(e);if(null===t.lt){t.lt=[];const e=function(e){for(const t of e.filters)if(t.ht())return t.field;return null}(t),n=function(e){return e.explicitOrderBy.length>0?e.explicitOrderBy[0].field:null}(t);if(null!==e&&null===n)e.isKeyField()||t.lt.push(new is(e)),t.lt.push(new is(Qr.keyField(),"asc"));else{let e=!1;for(const n of t.explicitOrderBy)t.lt.push(n),n.field.isKeyField()&&(e=!0);if(!e){const e=t.explicitOrderBy.length>0?t.explicitOrderBy[t.explicitOrderBy.length-1].dir:"asc";t.lt.push(new is(Qr.keyField(),e))}}}return t.lt}function hs(e){const t=Or(e);if(!t.ft)if("F"===t.limitType)t.ft=Hi(t.path,t.collectionGroup,cs(t),t.filters,t.limit,t.startAt,t.endAt);else{const e=[];for(const n of cs(t)){const t="desc"===n.dir?"asc":"desc";e.push(new is(n.field,t))}const n=t.endAt?new rs(t.endAt.position,t.endAt.inclusive):null,r=t.startAt?new rs(t.startAt.position,t.startAt.inclusive):null;t.ft=Hi(t.path,t.collectionGroup,e,t.filters,t.limit,n,r)}return t.ft}function fs(e,t){return Wi(hs(e),hs(t))&&e.limitType===t.limitType}function ds(e){return`${qi(hs(e))}|lt:${e.limitType}`}function ps(e){return`Query(target=${function(e){let t=e.path.canonicalString();return null!==e.collectionGroup&&(t+=" collectionGroup="+e.collectionGroup),e.filters.length>0&&(t+=`, filters: [${e.filters.map((e=>{return`${(t=e).field.canonicalString()} ${t.op} ${xi(t.value)}`;var t})).join(", ")}]`),_i(e.limit)||(t+=", limit: "+e.limit),e.orderBy.length>0&&(t+=`, orderBy: [${e.orderBy.map((e=>function(e){return`${e.field.canonicalString()} (${e.dir})`}(e))).join(", ")}]`),e.startAt&&(t+=", startAt: ",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((e=>xi(e))).join(",")),e.endAt&&(t+=", endAt: ",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((e=>xi(e))).join(",")),`Target(${t})`}(hs(e))}; limitType=${e.limitType})`}function ms(e,t){return t.isFoundDocument()&&function(e,t){const n=t.key.path;return null!==e.collectionGroup?t.key.hasCollectionId(e.collectionGroup)&&e.path.isPrefixOf(n):Jr.isDocumentKey(e.path)?e.path.isEqual(n):e.path.isImmediateParentOf(n)}(e,t)&&function(e,t){for(const n of e.explicitOrderBy)if(!n.field.isKeyField()&&null===t.data.field(n.field))return!1;return!0}(e,t)&&function(e,t){for(const n of e.filters)if(!n.matches(t))return!1;return!0}(e,t)&&function(e,t){return!(e.startAt&&!function(e,t,n){const r=os(e,t,n);return e.inclusive?r<=0:r<0}(e.startAt,cs(e),t)||e.endAt&&!function(e,t,n){const r=os(e,t,n);return e.inclusive?r>=0:r>0}(e.endAt,cs(e),t))}(e,t)}function gs(e){return(t,n)=>{let r=!1;for(const i of cs(e)){const e=ys(i,t,n);if(0!==e)return e;r=r||i.field.isKeyField()}return 0}}function ys(e,t,n){const r=e.field.isKeyField()?Jr.comparator(t.key,n.key):function(e,t,n){const r=t.data.field(e),i=n.data.field(e);return null!==r&&null!==i?Oi(r,i):Sr()}(e.field,t,n);switch(e.dir){case"asc":return r;case"desc":return-1*r;default:return Sr()}}function vs(e,t){if(e.dt){if(isNaN(t))return{doubleValue:"NaN"};if(t===1/0)return{doubleValue:"Infinity"};if(t===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Ci(t)?"-0":t}}function As(e){return{integerValue:""+e}}function bs(e,t){return function(e){return"number"==typeof e&&Number.isInteger(e)&&!Ci(e)&&e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER}(t)?As(t):vs(e,t)}class ws{constructor(){this._=void 0}}function Es(e,t,n){return e instanceof Ts?function(e,t){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:e.seconds,nanos:e.nanoseconds}}}};return t&&(n.fields.__previous_value__=t),{mapValue:n}}(n,t):e instanceof ks?Ss(e,t):e instanceof Is?Os(e,t):function(e,t){const n=Cs(e,t),r=xs(n)+xs(e._t);return Di(n)&&Di(e._t)?As(r):vs(e.wt,r)}(e,t)}function _s(e,t,n){return e instanceof ks?Ss(e,t):e instanceof Is?Os(e,t):n}function Cs(e,t){return e instanceof Ns?Di(n=t)||function(e){return!!e&&"doubleValue"in e}(n)?t:{integerValue:0}:null;var n}class Ts extends ws{}class ks extends ws{constructor(e){super(),this.elements=e}}function Ss(e,t){const n=Ps(t);for(const t of e.elements)n.some((e=>Si(e,t)))||n.push(t);return{arrayValue:{values:n}}}class Is extends ws{constructor(e){super(),this.elements=e}}function Os(e,t){let n=Ps(t);for(const t of e.elements)n=n.filter((e=>!Si(e,t)));return{arrayValue:{values:n}}}class Ns extends ws{constructor(e,t){super(),this.wt=e,this._t=t}}function xs(e){return gi(e.integerValue||e.doubleValue)}function Ps(e){return Ri(e)&&e.arrayValue.values?e.arrayValue.values.slice():[]}class Ds{constructor(e,t){this.version=e,this.transformResults=t}}class Rs{constructor(e,t){this.updateTime=e,this.exists=t}static none(){return new Rs}static exists(e){return new Rs(void 0,e)}static updateTime(e){return new Rs(e)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(e){return this.exists===e.exists&&(this.updateTime?!!e.updateTime&&this.updateTime.isEqual(e.updateTime):!e.updateTime)}}function Ls(e,t){return void 0!==e.updateTime?t.isFoundDocument()&&t.version.isEqual(e.updateTime):void 0===e.exists||e.exists===t.isFoundDocument()}class Ms{}function Fs(e,t){if(!e.hasLocalMutations||t&&0===t.fields.length)return null;if(null===t)return e.isNoDocument()?new Ks(e.key,Rs.none()):new Bs(e.key,e.data,Rs.none());{const n=e.data,r=ji.empty();let i=new ci(Qr.comparator);for(let e of t.fields)if(!i.has(e)){let t=n.field(e);null===t&&e.length>1&&(e=e.popLast(),t=n.field(e)),null===t?r.delete(e):r.set(e,t),i=i.add(e)}return new $s(e.key,r,new fi(i.toArray()),Rs.none())}}function Us(e,t,n){e instanceof Bs?function(e,t,n){const r=e.value.clone(),i=qs(e.fieldTransforms,t,n.transformResults);r.setAll(i),t.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(e,t,n):e instanceof $s?function(e,t,n){if(!Ls(e.precondition,t))return void t.convertToUnknownDocument(n.version);const r=qs(e.fieldTransforms,t,n.transformResults),i=t.data;i.setAll(Hs(e)),i.setAll(r),t.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(e,t,n):function(e,t,n){t.convertToNoDocument(n.version).setHasCommittedMutations()}(0,t,n)}function Vs(e,t,n,r){return e instanceof Bs?function(e,t,n,r){if(!Ls(e.precondition,t))return n;const i=e.value.clone(),s=Ws(e.fieldTransforms,r,t);return i.setAll(s),t.convertToFoundDocument(t.version,i).setHasLocalMutations(),null}(e,t,n,r):e instanceof $s?function(e,t,n,r){if(!Ls(e.precondition,t))return n;const i=Ws(e.fieldTransforms,r,t),s=t.data;return s.setAll(Hs(e)),s.setAll(i),t.convertToFoundDocument(t.version,s).setHasLocalMutations(),null===n?null:n.unionWith(e.fieldMask.fields).unionWith(e.fieldTransforms.map((e=>e.field)))}(e,t,n,r):function(e,t,n){return Ls(e.precondition,t)?(t.convertToNoDocument(t.version).setHasLocalMutations(),null):n}(e,t,n)}function js(e,t){let n=null;for(const r of e.fieldTransforms){const e=t.data.field(r.field),i=Cs(r.transform,e||null);null!=i&&(null===n&&(n=ji.empty()),n.set(r.field,i))}return n||null}function zs(e,t){return e.type===t.type&&!!e.key.isEqual(t.key)&&!!e.precondition.isEqual(t.precondition)&&!!function(e,t){return void 0===e&&void 0===t||!(!e||!t)&&$r(e,t,((e,t)=>function(e,t){return e.field.isEqual(t.field)&&function(e,t){return e instanceof ks&&t instanceof ks||e instanceof Is&&t instanceof Is?$r(e.elements,t.elements,Si):e instanceof Ns&&t instanceof Ns?Si(e._t,t._t):e instanceof Ts&&t instanceof Ts}(e.transform,t.transform)}(e,t)))}(e.fieldTransforms,t.fieldTransforms)&&(0===e.type?e.value.isEqual(t.value):1!==e.type||e.data.isEqual(t.data)&&e.fieldMask.isEqual(t.fieldMask))}class Bs extends Ms{constructor(e,t,n,r=[]){super(),this.key=e,this.value=t,this.precondition=n,this.fieldTransforms=r,this.type=0}getFieldMask(){return null}}class $s extends Ms{constructor(e,t,n,r,i=[]){super(),this.key=e,this.data=t,this.fieldMask=n,this.precondition=r,this.fieldTransforms=i,this.type=1}getFieldMask(){return this.fieldMask}}function Hs(e){const t=new Map;return e.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const r=e.data.field(n);t.set(n,r)}})),t}function qs(e,t,n){const r=new Map;Ir(e.length===n.length);for(let i=0;i<n.length;i++){const s=e[i],o=s.transform,a=t.data.field(s.field);r.set(s.field,_s(o,a,n[i]))}return r}function Ws(e,t,n){const r=new Map;for(const i of e){const e=i.transform,s=n.data.field(i.field);r.set(i.field,Es(e,s,t))}return r}class Ks extends Ms{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=2,this.fieldTransforms=[]}getFieldMask(){return null}}class Gs extends Ms{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=3,this.fieldTransforms=[]}getFieldMask(){return null}}class Qs{constructor(e){this.count=e}}var Js,Xs;function Ys(e){if(void 0===e)return Cr("GRPC error has no .code"),Nr.UNKNOWN;switch(e){case Js.OK:return Nr.OK;case Js.CANCELLED:return Nr.CANCELLED;case Js.UNKNOWN:return Nr.UNKNOWN;case Js.DEADLINE_EXCEEDED:return Nr.DEADLINE_EXCEEDED;case Js.RESOURCE_EXHAUSTED:return Nr.RESOURCE_EXHAUSTED;case Js.INTERNAL:return Nr.INTERNAL;case Js.UNAVAILABLE:return Nr.UNAVAILABLE;case Js.UNAUTHENTICATED:return Nr.UNAUTHENTICATED;case Js.INVALID_ARGUMENT:return Nr.INVALID_ARGUMENT;case Js.NOT_FOUND:return Nr.NOT_FOUND;case Js.ALREADY_EXISTS:return Nr.ALREADY_EXISTS;case Js.PERMISSION_DENIED:return Nr.PERMISSION_DENIED;case Js.FAILED_PRECONDITION:return Nr.FAILED_PRECONDITION;case Js.ABORTED:return Nr.ABORTED;case Js.OUT_OF_RANGE:return Nr.OUT_OF_RANGE;case Js.UNIMPLEMENTED:return Nr.UNIMPLEMENTED;case Js.DATA_LOSS:return Nr.DATA_LOSS;default:return Sr()}}(Xs=Js||(Js={}))[Xs.OK=0]="OK",Xs[Xs.CANCELLED=1]="CANCELLED",Xs[Xs.UNKNOWN=2]="UNKNOWN",Xs[Xs.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",Xs[Xs.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",Xs[Xs.NOT_FOUND=5]="NOT_FOUND",Xs[Xs.ALREADY_EXISTS=6]="ALREADY_EXISTS",Xs[Xs.PERMISSION_DENIED=7]="PERMISSION_DENIED",Xs[Xs.UNAUTHENTICATED=16]="UNAUTHENTICATED",Xs[Xs.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",Xs[Xs.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",Xs[Xs.ABORTED=10]="ABORTED",Xs[Xs.OUT_OF_RANGE=11]="OUT_OF_RANGE",Xs[Xs.UNIMPLEMENTED=12]="UNIMPLEMENTED",Xs[Xs.INTERNAL=13]="INTERNAL",Xs[Xs.UNAVAILABLE=14]="UNAVAILABLE",Xs[Xs.DATA_LOSS=15]="DATA_LOSS";class Zs{constructor(e,t){this.mapKeyFn=e,this.equalsFn=t,this.inner={},this.innerSize=0}get(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0!==n)for(const[t,r]of n)if(this.equalsFn(t,e))return r}has(e){return void 0!==this.get(e)}set(e,t){const n=this.mapKeyFn(e),r=this.inner[n];if(void 0===r)return this.inner[n]=[[e,t]],void this.innerSize++;for(let n=0;n<r.length;n++)if(this.equalsFn(r[n][0],e))return void(r[n]=[e,t]);r.push([e,t]),this.innerSize++}delete(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0===n)return!1;for(let r=0;r<n.length;r++)if(this.equalsFn(n[r][0],e))return 1===n.length?delete this.inner[t]:n.splice(r,1),this.innerSize--,!0;return!1}forEach(e){si(this.inner,((t,n)=>{for(const[t,r]of n)e(t,r)}))}isEmpty(){return oi(this.inner)}size(){return this.innerSize}}const eo=new ai(Jr.comparator);function to(){return eo}const no=new ai(Jr.comparator);function ro(...e){let t=no;for(const n of e)t=t.insert(n.key,n);return t}function io(e){let t=no;return e.forEach(((e,n)=>t=t.insert(e,n.overlayedDocument))),t}function so(){return ao()}function oo(){return ao()}function ao(){return new Zs((e=>e.toString()),((e,t)=>e.isEqual(t)))}const lo=new ai(Jr.comparator),uo=new ci(Jr.comparator);function co(...e){let t=uo;for(const n of e)t=t.add(n);return t}const ho=new ci(Br);function fo(){return ho}class po{constructor(e,t,n,r,i){this.snapshotVersion=e,this.targetChanges=t,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(e,t){const n=new Map;return n.set(e,mo.createSynthesizedTargetChangeForCurrentChange(e,t)),new po(qr.min(),n,fo(),to(),co())}}class mo{constructor(e,t,n,r,i){this.resumeToken=e,this.current=t,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(e,t){return new mo(di.EMPTY_BYTE_STRING,t,co(),co(),co())}}class go{constructor(e,t,n,r){this.gt=e,this.removedTargetIds=t,this.key=n,this.yt=r}}class yo{constructor(e,t){this.targetId=e,this.It=t}}class vo{constructor(e,t,n=di.EMPTY_BYTE_STRING,r=null){this.state=e,this.targetIds=t,this.resumeToken=n,this.cause=r}}class Ao{constructor(){this.Tt=0,this.Et=Eo(),this.At=di.EMPTY_BYTE_STRING,this.Rt=!1,this.bt=!0}get current(){return this.Rt}get resumeToken(){return this.At}get Pt(){return 0!==this.Tt}get vt(){return this.bt}Vt(e){e.approximateByteSize()>0&&(this.bt=!0,this.At=e)}St(){let e=co(),t=co(),n=co();return this.Et.forEach(((r,i)=>{switch(i){case 0:e=e.add(r);break;case 2:t=t.add(r);break;case 1:n=n.add(r);break;default:Sr()}})),new mo(this.At,this.Rt,e,t,n)}Dt(){this.bt=!1,this.Et=Eo()}Ct(e,t){this.bt=!0,this.Et=this.Et.insert(e,t)}xt(e){this.bt=!0,this.Et=this.Et.remove(e)}Nt(){this.Tt+=1}kt(){this.Tt-=1}Ot(){this.bt=!0,this.Rt=!0}}class bo{constructor(e){this.Mt=e,this.Ft=new Map,this.$t=to(),this.Bt=wo(),this.Lt=new ci(Br)}Ut(e){for(const t of e.gt)e.yt&&e.yt.isFoundDocument()?this.qt(t,e.yt):this.Kt(t,e.key,e.yt);for(const t of e.removedTargetIds)this.Kt(t,e.key,e.yt)}Gt(e){this.forEachTarget(e,(t=>{const n=this.Qt(t);switch(e.state){case 0:this.jt(t)&&n.Vt(e.resumeToken);break;case 1:n.kt(),n.Pt||n.Dt(),n.Vt(e.resumeToken);break;case 2:n.kt(),n.Pt||this.removeTarget(t);break;case 3:this.jt(t)&&(n.Ot(),n.Vt(e.resumeToken));break;case 4:this.jt(t)&&(this.Wt(t),n.Vt(e.resumeToken));break;default:Sr()}}))}forEachTarget(e,t){e.targetIds.length>0?e.targetIds.forEach(t):this.Ft.forEach(((e,n)=>{this.jt(n)&&t(n)}))}zt(e){const t=e.targetId,n=e.It.count,r=this.Ht(t);if(r){const e=r.target;if(Ki(e))if(0===n){const n=new Jr(e.path);this.Kt(t,n,Bi.newNoDocument(n,qr.min()))}else Ir(1===n);else this.Jt(t)!==n&&(this.Wt(t),this.Lt=this.Lt.add(t))}}Yt(e){const t=new Map;this.Ft.forEach(((n,r)=>{const i=this.Ht(r);if(i){if(n.current&&Ki(i.target)){const t=new Jr(i.target.path);null!==this.$t.get(t)||this.Xt(r,t)||this.Kt(r,t,Bi.newNoDocument(t,e))}n.vt&&(t.set(r,n.St()),n.Dt())}}));let n=co();this.Bt.forEach(((e,t)=>{let r=!0;t.forEachWhile((e=>{const t=this.Ht(e);return!t||2===t.purpose||(r=!1,!1)})),r&&(n=n.add(e))})),this.$t.forEach(((t,n)=>n.setReadTime(e)));const r=new po(e,t,this.Lt,this.$t,n);return this.$t=to(),this.Bt=wo(),this.Lt=new ci(Br),r}qt(e,t){if(!this.jt(e))return;const n=this.Xt(e,t.key)?2:0;this.Qt(e).Ct(t.key,n),this.$t=this.$t.insert(t.key,t),this.Bt=this.Bt.insert(t.key,this.Zt(t.key).add(e))}Kt(e,t,n){if(!this.jt(e))return;const r=this.Qt(e);this.Xt(e,t)?r.Ct(t,1):r.xt(t),this.Bt=this.Bt.insert(t,this.Zt(t).delete(e)),n&&(this.$t=this.$t.insert(t,n))}removeTarget(e){this.Ft.delete(e)}Jt(e){const t=this.Qt(e).St();return this.Mt.getRemoteKeysForTarget(e).size+t.addedDocuments.size-t.removedDocuments.size}Nt(e){this.Qt(e).Nt()}Qt(e){let t=this.Ft.get(e);return t||(t=new Ao,this.Ft.set(e,t)),t}Zt(e){let t=this.Bt.get(e);return t||(t=new ci(Br),this.Bt=this.Bt.insert(e,t)),t}jt(e){const t=null!==this.Ht(e);return t||_r("WatchChangeAggregator","Detected inactive target",e),t}Ht(e){const t=this.Ft.get(e);return t&&t.Pt?null:this.Mt.te(e)}Wt(e){this.Ft.set(e,new Ao),this.Mt.getRemoteKeysForTarget(e).forEach((t=>{this.Kt(e,t,null)}))}Xt(e,t){return this.Mt.getRemoteKeysForTarget(e).has(t)}}function wo(){return new ai(Jr.comparator)}function Eo(){return new ai(Jr.comparator)}const _o={asc:"ASCENDING",desc:"DESCENDING"},Co={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class To{constructor(e,t){this.databaseId=e,this.dt=t}}function ko(e,t){return e.dt?`${new Date(1e3*t.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+t.nanoseconds).slice(-9)}Z`:{seconds:""+t.seconds,nanos:t.nanoseconds}}function So(e,t){return e.dt?t.toBase64():t.toUint8Array()}function Io(e,t){return ko(e,t.toTimestamp())}function Oo(e){return Ir(!!e),qr.fromTimestamp(function(e){const t=mi(e);return new Hr(t.seconds,t.nanos)}(e))}function No(e,t){return function(e){return new Kr(["projects",e.projectId,"databases",e.database])}(e).child("documents").child(t).canonicalString()}function xo(e){const t=Kr.fromString(e);return Ir(Qo(t)),t}function Po(e,t){return No(e.databaseId,t.path)}function Do(e,t){const n=xo(t);if(n.get(1)!==e.databaseId.projectId)throw new xr(Nr.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+e.databaseId.projectId);if(n.get(3)!==e.databaseId.database)throw new xr(Nr.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+e.databaseId.database);return new Jr(Mo(n))}function Ro(e,t){return No(e.databaseId,t)}function Lo(e){return new Kr(["projects",e.databaseId.projectId,"databases",e.databaseId.database]).canonicalString()}function Mo(e){return Ir(e.length>4&&"documents"===e.get(4)),e.popFirst(5)}function Fo(e,t,n){return{name:Po(e,t),fields:n.value.mapValue.fields}}function Uo(e,t){return{documents:[Ro(e,t.path)]}}function Vo(e,t){const n={structuredQuery:{}},r=t.path;null!==t.collectionGroup?(n.parent=Ro(e,r),n.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(n.parent=Ro(e,r.popLast()),n.structuredQuery.from=[{collectionId:r.lastSegment()}]);const i=function(e){if(0===e.length)return;const t=e.map((e=>function(e){if("=="===e.op){if(Mi(e.value))return{unaryFilter:{field:Ho(e.field),op:"IS_NAN"}};if(Li(e.value))return{unaryFilter:{field:Ho(e.field),op:"IS_NULL"}}}else if("!="===e.op){if(Mi(e.value))return{unaryFilter:{field:Ho(e.field),op:"IS_NOT_NAN"}};if(Li(e.value))return{unaryFilter:{field:Ho(e.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Ho(e.field),op:$o(e.op),value:e.value}}}(e)));return 1===t.length?t[0]:{compositeFilter:{op:"AND",filters:t}}}(t.filters);i&&(n.structuredQuery.where=i);const s=function(e){if(0!==e.length)return e.map((e=>function(e){return{field:Ho(e.field),direction:Bo(e.dir)}}(e)))}(t.orderBy);s&&(n.structuredQuery.orderBy=s);const o=function(e,t){return e.dt||_i(t)?t:{value:t}}(e,t.limit);var a;return null!==o&&(n.structuredQuery.limit=o),t.startAt&&(n.structuredQuery.startAt={before:(a=t.startAt).inclusive,values:a.position}),t.endAt&&(n.structuredQuery.endAt=function(e){return{before:!e.inclusive,values:e.position}}(t.endAt)),n}function jo(e){let t=function(e){const t=xo(e);return 4===t.length?Kr.emptyPath():Mo(t)}(e.parent);const n=e.structuredQuery,r=n.from?n.from.length:0;let i=null;if(r>0){Ir(1===r);const e=n.from[0];e.allDescendants?i=e.collectionId:t=t.child(e.collectionId)}let s=[];n.where&&(s=zo(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((e=>function(e){return new is(qo(e.field),function(e){switch(e){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(e.direction))}(e))));let a=null;n.limit&&(a=function(e){let t;return t="object"==typeof e?e.value:e,_i(t)?null:t}(n.limit));let l=null;n.startAt&&(l=function(e){const t=!!e.before,n=e.values||[];return new rs(n,t)}(n.startAt));let u=null;return n.endAt&&(u=function(e){const t=!e.before,n=e.values||[];return new rs(n,t)}(n.endAt)),function(e,t,n,r,i,s,o,a){return new ls(e,t,n,r,i,s,o,a)}(t,i,o,s,a,"F",l,u)}function zo(e){return e?void 0!==e.unaryFilter?[Ko(e)]:void 0!==e.fieldFilter?[Wo(e)]:void 0!==e.compositeFilter?e.compositeFilter.filters.map((e=>zo(e))).reduce(((e,t)=>e.concat(t))):Sr():[]}function Bo(e){return _o[e]}function $o(e){return Co[e]}function Ho(e){return{fieldPath:e.canonicalString()}}function qo(e){return Qr.fromServerFormat(e.fieldPath)}function Wo(e){return Gi.create(qo(e.fieldFilter.field),function(e){switch(e){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return Sr()}}(e.fieldFilter.op),e.fieldFilter.value)}function Ko(e){switch(e.unaryFilter.op){case"IS_NAN":const t=qo(e.unaryFilter.field);return Gi.create(t,"==",{doubleValue:NaN});case"IS_NULL":const n=qo(e.unaryFilter.field);return Gi.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const r=qo(e.unaryFilter.field);return Gi.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=qo(e.unaryFilter.field);return Gi.create(i,"!=",{nullValue:"NULL_VALUE"});default:return Sr()}}function Go(e){const t=[];return e.fields.forEach((e=>t.push(e.canonicalString()))),{fieldPaths:t}}function Qo(e){return e.length>=4&&"projects"===e.get(0)&&"databases"===e.get(2)}class Jo{constructor(e,t,n,r){this.batchId=e,this.localWriteTime=t,this.baseMutations=n,this.mutations=r}applyToRemoteDocument(e,t){const n=t.mutationResults;for(let t=0;t<this.mutations.length;t++){const r=this.mutations[t];r.key.isEqual(e.key)&&Us(r,e,n[t])}}applyToLocalView(e,t){for(const n of this.baseMutations)n.key.isEqual(e.key)&&(t=Vs(n,e,t,this.localWriteTime));for(const n of this.mutations)n.key.isEqual(e.key)&&(t=Vs(n,e,t,this.localWriteTime));return t}applyToLocalDocumentSet(e,t){const n=oo();return this.mutations.forEach((r=>{const i=e.get(r.key),s=i.overlayedDocument;let o=this.applyToLocalView(s,i.mutatedFields);o=t.has(r.key)?null:o;const a=Fs(s,o);null!==a&&n.set(r.key,a),s.isValidDocument()||s.convertToNoDocument(qr.min())})),n}keys(){return this.mutations.reduce(((e,t)=>e.add(t.key)),co())}isEqual(e){return this.batchId===e.batchId&&$r(this.mutations,e.mutations,((e,t)=>zs(e,t)))&&$r(this.baseMutations,e.baseMutations,((e,t)=>zs(e,t)))}}class Xo{constructor(e,t,n,r){this.batch=e,this.commitVersion=t,this.mutationResults=n,this.docVersions=r}static from(e,t,n){Ir(e.mutations.length===n.length);let r=lo;const i=e.mutations;for(let e=0;e<i.length;e++)r=r.insert(i[e].key,n[e].version);return new Xo(e,t,n,r)}}class Yo{constructor(e,t){this.largestBatchId=e,this.mutation=t}getKey(){return this.mutation.key}isEqual(e){return null!==e&&this.mutation===e.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class Zo{constructor(e,t,n,r,i=qr.min(),s=qr.min(),o=di.EMPTY_BYTE_STRING){this.target=e,this.targetId=t,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=s,this.resumeToken=o}withSequenceNumber(e){return new Zo(this.target,this.targetId,this.purpose,e,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(e,t){return new Zo(this.target,this.targetId,this.purpose,this.sequenceNumber,t,this.lastLimboFreeSnapshotVersion,e)}withLastLimboFreeSnapshotVersion(e){return new Zo(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,e,this.resumeToken)}}class ea{constructor(e){this.ne=e}}function ta(e){const t=jo({parent:e.parent,structuredQuery:e.structuredQuery});return"LAST"===e.limitType?function(e,t,n){return new ls(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),t,n,e.startAt,e.endAt)}(t,t.limit,"L"):t}class na{constructor(){}re(e,t){this.oe(e,t),t.ue()}oe(e,t){if("nullValue"in e)this.ce(t,5);else if("booleanValue"in e)this.ce(t,10),t.ae(e.booleanValue?1:0);else if("integerValue"in e)this.ce(t,15),t.ae(gi(e.integerValue));else if("doubleValue"in e){const n=gi(e.doubleValue);isNaN(n)?this.ce(t,13):(this.ce(t,15),Ci(n)?t.ae(0):t.ae(n))}else if("timestampValue"in e){const n=e.timestampValue;this.ce(t,20),"string"==typeof n?t.he(n):(t.he(`${n.seconds||""}`),t.ae(n.nanos||0))}else if("stringValue"in e)this.le(e.stringValue,t),this.fe(t);else if("bytesValue"in e)this.ce(t,30),t.de(yi(e.bytesValue)),this.fe(t);else if("referenceValue"in e)this._e(e.referenceValue,t);else if("geoPointValue"in e){const n=e.geoPointValue;this.ce(t,45),t.ae(n.latitude||0),t.ae(n.longitude||0)}else"mapValue"in e?Vi(e)?this.ce(t,Number.MAX_SAFE_INTEGER):(this.we(e.mapValue,t),this.fe(t)):"arrayValue"in e?(this.me(e.arrayValue,t),this.fe(t)):Sr()}le(e,t){this.ce(t,25),this.ge(e,t)}ge(e,t){t.he(e)}we(e,t){const n=e.fields||{};this.ce(t,55);for(const e of Object.keys(n))this.le(e,t),this.oe(n[e],t)}me(e,t){const n=e.values||[];this.ce(t,50);for(const e of n)this.oe(e,t)}_e(e,t){this.ce(t,37),Jr.fromName(e).path.forEach((e=>{this.ce(t,60),this.ge(e,t)}))}ce(e,t){e.ae(t)}fe(e){e.ae(2)}}na.ye=new na;class ra{constructor(){this.ze=new ia}addToCollectionParentIndex(e,t){return this.ze.add(t),ti.resolve()}getCollectionParents(e,t){return ti.resolve(this.ze.getEntries(t))}addFieldIndex(e,t){return ti.resolve()}deleteFieldIndex(e,t){return ti.resolve()}getDocumentsMatchingTarget(e,t){return ti.resolve(null)}getIndexType(e,t){return ti.resolve(0)}getFieldIndexes(e,t){return ti.resolve([])}getNextCollectionGroupToUpdate(e){return ti.resolve(null)}getMinOffset(e,t){return ti.resolve(Yr.min())}getMinOffsetFromCollectionGroup(e,t){return ti.resolve(Yr.min())}updateCollectionGroup(e,t,n){return ti.resolve()}updateIndexEntries(e,t){return ti.resolve()}}class ia{constructor(){this.index={}}add(e){const t=e.lastSegment(),n=e.popLast(),r=this.index[t]||new ci(Kr.comparator),i=!r.has(n);return this.index[t]=r.add(n),i}has(e){const t=e.lastSegment(),n=e.popLast(),r=this.index[t];return r&&r.has(n)}getEntries(e){return(this.index[e]||new ci(Kr.comparator)).toArray()}}new Uint8Array(0);class sa{constructor(e,t,n){this.cacheSizeCollectionThreshold=e,this.percentileToCollect=t,this.maximumSequenceNumbersToCollect=n}static withCacheSize(e){return new sa(e,sa.DEFAULT_COLLECTION_PERCENTILE,sa.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}sa.DEFAULT_COLLECTION_PERCENTILE=10,sa.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,sa.DEFAULT=new sa(41943040,sa.DEFAULT_COLLECTION_PERCENTILE,sa.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),sa.DISABLED=new sa(-1,0,0);class oa{constructor(e){this.En=e}next(){return this.En+=2,this.En}static An(){return new oa(0)}static Rn(){return new oa(-1)}}class aa{constructor(e,t){this.overlayedDocument=e,this.mutatedFields=t}}class la{constructor(e,t,n,r){this.remoteDocumentCache=e,this.mutationQueue=t,this.documentOverlayCache=n,this.indexManager=r}getDocument(e,t){let n=null;return this.documentOverlayCache.getOverlay(e,t).next((r=>(n=r,this.getBaseDocument(e,t,n)))).next((e=>(null!==n&&Vs(n.mutation,e,fi.empty(),Hr.now()),e)))}getDocuments(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.getLocalViewOfDocuments(e,t,co()).next((()=>t))))}getLocalViewOfDocuments(e,t,n=co()){const r=so();return this.populateOverlays(e,r,t).next((()=>this.computeViews(e,t,r,n).next((e=>{let t=ro();return e.forEach(((e,n)=>{t=t.insert(e,n.overlayedDocument)})),t}))))}getOverlayedDocuments(e,t){const n=so();return this.populateOverlays(e,n,t).next((()=>this.computeViews(e,t,n,co())))}populateOverlays(e,t,n){const r=[];return n.forEach((e=>{t.has(e)||r.push(e)})),this.documentOverlayCache.getOverlays(e,r).next((e=>{e.forEach(((e,n)=>{t.set(e,n)}))}))}computeViews(e,t,n,r){let i=to();const s=ao(),o=ao();return t.forEach(((e,t)=>{const o=n.get(t.key);r.has(t.key)&&(void 0===o||o.mutation instanceof $s)?i=i.insert(t.key,t):void 0!==o&&(s.set(t.key,o.mutation.getFieldMask()),Vs(o.mutation,t,o.mutation.getFieldMask(),Hr.now()))})),this.recalculateAndSaveOverlays(e,i).next((e=>(e.forEach(((e,t)=>s.set(e,t))),t.forEach(((e,t)=>{var n;return o.set(e,new aa(t,null!==(n=s.get(e))&&void 0!==n?n:null))})),o)))}recalculateAndSaveOverlays(e,t){const n=ao();let r=new ai(((e,t)=>e-t)),i=co();return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e,t).next((e=>{for(const i of e)i.keys().forEach((e=>{const s=t.get(e);if(null===s)return;let o=n.get(e)||fi.empty();o=i.applyToLocalView(s,o),n.set(e,o);const a=(r.get(i.batchId)||co()).add(e);r=r.insert(i.batchId,a)}))})).next((()=>{const s=[],o=r.getReverseIterator();for(;o.hasNext();){const r=o.getNext(),a=r.key,l=r.value,u=oo();l.forEach((e=>{if(!i.has(e)){const r=Fs(t.get(e),n.get(e));null!==r&&u.set(e,r),i=i.add(e)}})),s.push(this.documentOverlayCache.saveOverlays(e,a,u))}return ti.waitFor(s)})).next((()=>n))}recalculateAndSaveOverlaysForDocumentKeys(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.recalculateAndSaveOverlays(e,t)))}getDocumentsMatchingQuery(e,t,n){return function(e){return Jr.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}(t)?this.getDocumentsMatchingDocumentQuery(e,t.path):function(e){return null!==e.collectionGroup}(t)?this.getDocumentsMatchingCollectionGroupQuery(e,t,n):this.getDocumentsMatchingCollectionQuery(e,t,n)}getNextDocuments(e,t,n,r){return this.remoteDocumentCache.getAllFromCollectionGroup(e,t,n,r).next((i=>{const s=r-i.size>0?this.documentOverlayCache.getOverlaysForCollectionGroup(e,t,n.largestBatchId,r-i.size):ti.resolve(so());let o=-1,a=i;return s.next((t=>ti.forEach(t,((t,n)=>(o<n.largestBatchId&&(o=n.largestBatchId),i.get(t)?ti.resolve():this.getBaseDocument(e,t,n).next((e=>{a=a.insert(t,e)}))))).next((()=>this.populateOverlays(e,t,i))).next((()=>this.computeViews(e,a,t,co()))).next((e=>({batchId:o,changes:io(e)})))))}))}getDocumentsMatchingDocumentQuery(e,t){return this.getDocument(e,new Jr(t)).next((e=>{let t=ro();return e.isFoundDocument()&&(t=t.insert(e.key,e)),t}))}getDocumentsMatchingCollectionGroupQuery(e,t,n){const r=t.collectionGroup;let i=ro();return this.indexManager.getCollectionParents(e,r).next((s=>ti.forEach(s,(s=>{const o=function(e,t){return new ls(t,null,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(t,s.child(r));return this.getDocumentsMatchingCollectionQuery(e,o,n).next((e=>{e.forEach(((e,t)=>{i=i.insert(e,t)}))}))})).next((()=>i))))}getDocumentsMatchingCollectionQuery(e,t,n){let r;return this.remoteDocumentCache.getAllFromCollection(e,t.path,n).next((i=>(r=i,this.documentOverlayCache.getOverlaysForCollection(e,t.path,n.largestBatchId)))).next((e=>{e.forEach(((e,t)=>{const n=t.getKey();null===r.get(n)&&(r=r.insert(n,Bi.newInvalidDocument(n)))}));let n=ro();return r.forEach(((r,i)=>{const s=e.get(r);void 0!==s&&Vs(s.mutation,i,fi.empty(),Hr.now()),ms(t,i)&&(n=n.insert(r,i))})),n}))}getBaseDocument(e,t,n){return null===n||1===n.mutation.type?this.remoteDocumentCache.getEntry(e,t):ti.resolve(Bi.newInvalidDocument(t))}}class ua{constructor(e){this.wt=e,this.Jn=new Map,this.Yn=new Map}getBundleMetadata(e,t){return ti.resolve(this.Jn.get(t))}saveBundleMetadata(e,t){var n;return this.Jn.set(t.id,{id:(n=t).id,version:n.version,createTime:Oo(n.createTime)}),ti.resolve()}getNamedQuery(e,t){return ti.resolve(this.Yn.get(t))}saveNamedQuery(e,t){return this.Yn.set(t.name,function(e){return{name:e.name,query:ta(e.bundledQuery),readTime:Oo(e.readTime)}}(t)),ti.resolve()}}class ca{constructor(){this.overlays=new ai(Jr.comparator),this.Xn=new Map}getOverlay(e,t){return ti.resolve(this.overlays.get(t))}getOverlays(e,t){const n=so();return ti.forEach(t,(t=>this.getOverlay(e,t).next((e=>{null!==e&&n.set(t,e)})))).next((()=>n))}saveOverlays(e,t,n){return n.forEach(((n,r)=>{this.ie(e,t,r)})),ti.resolve()}removeOverlaysForBatchId(e,t,n){const r=this.Xn.get(n);return void 0!==r&&(r.forEach((e=>this.overlays=this.overlays.remove(e))),this.Xn.delete(n)),ti.resolve()}getOverlaysForCollection(e,t,n){const r=so(),i=t.length+1,s=new Jr(t.child("")),o=this.overlays.getIteratorFrom(s);for(;o.hasNext();){const e=o.getNext().value,s=e.getKey();if(!t.isPrefixOf(s.path))break;s.path.length===i&&e.largestBatchId>n&&r.set(e.getKey(),e)}return ti.resolve(r)}getOverlaysForCollectionGroup(e,t,n,r){let i=new ai(((e,t)=>e-t));const s=this.overlays.getIterator();for(;s.hasNext();){const e=s.getNext().value;if(e.getKey().getCollectionGroup()===t&&e.largestBatchId>n){let t=i.get(e.largestBatchId);null===t&&(t=so(),i=i.insert(e.largestBatchId,t)),t.set(e.getKey(),e)}}const o=so(),a=i.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((e,t)=>o.set(e,t))),!(o.size()>=r)););return ti.resolve(o)}ie(e,t,n){const r=this.overlays.get(n.key);if(null!==r){const e=this.Xn.get(r.largestBatchId).delete(n.key);this.Xn.set(r.largestBatchId,e)}this.overlays=this.overlays.insert(n.key,new Yo(t,n));let i=this.Xn.get(t);void 0===i&&(i=co(),this.Xn.set(t,i)),this.Xn.set(t,i.add(n.key))}}class ha{constructor(){this.Zn=new ci(fa.ts),this.es=new ci(fa.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(e,t){const n=new fa(e,t);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(e,t){e.forEach((e=>this.addReference(e,t)))}removeReference(e,t){this.rs(new fa(e,t))}os(e,t){e.forEach((e=>this.removeReference(e,t)))}us(e){const t=new Jr(new Kr([])),n=new fa(t,e),r=new fa(t,e+1),i=[];return this.es.forEachInRange([n,r],(e=>{this.rs(e),i.push(e.key)})),i}cs(){this.Zn.forEach((e=>this.rs(e)))}rs(e){this.Zn=this.Zn.delete(e),this.es=this.es.delete(e)}hs(e){const t=new Jr(new Kr([])),n=new fa(t,e),r=new fa(t,e+1);let i=co();return this.es.forEachInRange([n,r],(e=>{i=i.add(e.key)})),i}containsKey(e){const t=new fa(e,0),n=this.Zn.firstAfterOrEqual(t);return null!==n&&e.isEqual(n.key)}}class fa{constructor(e,t){this.key=e,this.ls=t}static ts(e,t){return Jr.comparator(e.key,t.key)||Br(e.ls,t.ls)}static ns(e,t){return Br(e.ls,t.ls)||Jr.comparator(e.key,t.key)}}class da{constructor(e,t){this.indexManager=e,this.referenceDelegate=t,this.mutationQueue=[],this.fs=1,this.ds=new ci(fa.ts)}checkEmpty(e){return ti.resolve(0===this.mutationQueue.length)}addMutationBatch(e,t,n,r){const i=this.fs;this.fs++,this.mutationQueue.length>0&&this.mutationQueue[this.mutationQueue.length-1];const s=new Jo(i,t,n,r);this.mutationQueue.push(s);for(const t of r)this.ds=this.ds.add(new fa(t.key,i)),this.indexManager.addToCollectionParentIndex(e,t.key.path.popLast());return ti.resolve(s)}lookupMutationBatch(e,t){return ti.resolve(this._s(t))}getNextMutationBatchAfterBatchId(e,t){const n=t+1,r=this.ws(n),i=r<0?0:r;return ti.resolve(this.mutationQueue.length>i?this.mutationQueue[i]:null)}getHighestUnacknowledgedBatchId(){return ti.resolve(0===this.mutationQueue.length?-1:this.fs-1)}getAllMutationBatches(e){return ti.resolve(this.mutationQueue.slice())}getAllMutationBatchesAffectingDocumentKey(e,t){const n=new fa(t,0),r=new fa(t,Number.POSITIVE_INFINITY),i=[];return this.ds.forEachInRange([n,r],(e=>{const t=this._s(e.ls);i.push(t)})),ti.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(e,t){let n=new ci(Br);return t.forEach((e=>{const t=new fa(e,0),r=new fa(e,Number.POSITIVE_INFINITY);this.ds.forEachInRange([t,r],(e=>{n=n.add(e.ls)}))})),ti.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(e,t){const n=t.path,r=n.length+1;let i=n;Jr.isDocumentKey(i)||(i=i.child(""));const s=new fa(new Jr(i),0);let o=new ci(Br);return this.ds.forEachWhile((e=>{const t=e.key.path;return!!n.isPrefixOf(t)&&(t.length===r&&(o=o.add(e.ls)),!0)}),s),ti.resolve(this.gs(o))}gs(e){const t=[];return e.forEach((e=>{const n=this._s(e);null!==n&&t.push(n)})),t}removeMutationBatch(e,t){Ir(0===this.ys(t.batchId,"removed")),this.mutationQueue.shift();let n=this.ds;return ti.forEach(t.mutations,(r=>{const i=new fa(r.key,t.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(e,r.key)})).next((()=>{this.ds=n}))}In(e){}containsKey(e,t){const n=new fa(t,0),r=this.ds.firstAfterOrEqual(n);return ti.resolve(t.isEqual(r&&r.key))}performConsistencyCheck(e){return this.mutationQueue.length,ti.resolve()}ys(e,t){return this.ws(e)}ws(e){return 0===this.mutationQueue.length?0:e-this.mutationQueue[0].batchId}_s(e){const t=this.ws(e);return t<0||t>=this.mutationQueue.length?null:this.mutationQueue[t]}}class pa{constructor(e){this.ps=e,this.docs=new ai(Jr.comparator),this.size=0}setIndexManager(e){this.indexManager=e}addEntry(e,t){const n=t.key,r=this.docs.get(n),i=r?r.size:0,s=this.ps(t);return this.docs=this.docs.insert(n,{document:t.mutableCopy(),size:s}),this.size+=s-i,this.indexManager.addToCollectionParentIndex(e,n.path.popLast())}removeEntry(e){const t=this.docs.get(e);t&&(this.docs=this.docs.remove(e),this.size-=t.size)}getEntry(e,t){const n=this.docs.get(t);return ti.resolve(n?n.document.mutableCopy():Bi.newInvalidDocument(t))}getEntries(e,t){let n=to();return t.forEach((e=>{const t=this.docs.get(e);n=n.insert(e,t?t.document.mutableCopy():Bi.newInvalidDocument(e))})),ti.resolve(n)}getAllFromCollection(e,t,n){let r=to();const i=new Jr(t.child("")),s=this.docs.getIteratorFrom(i);for(;s.hasNext();){const{key:e,value:{document:i}}=s.getNext();if(!t.isPrefixOf(e.path))break;e.path.length>t.length+1||Zr(Xr(i),n)<=0||(r=r.insert(i.key,i.mutableCopy()))}return ti.resolve(r)}getAllFromCollectionGroup(e,t,n,r){Sr()}Is(e,t){return ti.forEach(this.docs,(e=>t(e)))}newChangeBuffer(e){return new ma(this)}getSize(e){return ti.resolve(this.size)}}class ma extends class{constructor(){this.changes=new Zs((e=>e.toString()),((e,t)=>e.isEqual(t))),this.changesApplied=!1}addEntry(e){this.assertNotApplied(),this.changes.set(e.key,e)}removeEntry(e,t){this.assertNotApplied(),this.changes.set(e,Bi.newInvalidDocument(e).setReadTime(t))}getEntry(e,t){this.assertNotApplied();const n=this.changes.get(t);return void 0!==n?ti.resolve(n):this.getFromCache(e,t)}getEntries(e,t){return this.getAllFromCache(e,t)}apply(e){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(e)}assertNotApplied(){}}{constructor(e){super(),this.zn=e}applyChanges(e){const t=[];return this.changes.forEach(((n,r)=>{r.isValidDocument()?t.push(this.zn.addEntry(e,r)):this.zn.removeEntry(n)})),ti.waitFor(t)}getFromCache(e,t){return this.zn.getEntry(e,t)}getAllFromCache(e,t){return this.zn.getEntries(e,t)}}class ga{constructor(e){this.persistence=e,this.Ts=new Zs((e=>qi(e)),Wi),this.lastRemoteSnapshotVersion=qr.min(),this.highestTargetId=0,this.Es=0,this.As=new ha,this.targetCount=0,this.Rs=oa.An()}forEachTarget(e,t){return this.Ts.forEach(((e,n)=>t(n))),ti.resolve()}getLastRemoteSnapshotVersion(e){return ti.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(e){return ti.resolve(this.Es)}allocateTargetId(e){return this.highestTargetId=this.Rs.next(),ti.resolve(this.highestTargetId)}setTargetsMetadata(e,t,n){return n&&(this.lastRemoteSnapshotVersion=n),t>this.Es&&(this.Es=t),ti.resolve()}vn(e){this.Ts.set(e.target,e);const t=e.targetId;t>this.highestTargetId&&(this.Rs=new oa(t),this.highestTargetId=t),e.sequenceNumber>this.Es&&(this.Es=e.sequenceNumber)}addTargetData(e,t){return this.vn(t),this.targetCount+=1,ti.resolve()}updateTargetData(e,t){return this.vn(t),ti.resolve()}removeTargetData(e,t){return this.Ts.delete(t.target),this.As.us(t.targetId),this.targetCount-=1,ti.resolve()}removeTargets(e,t,n){let r=0;const i=[];return this.Ts.forEach(((s,o)=>{o.sequenceNumber<=t&&null===n.get(o.targetId)&&(this.Ts.delete(s),i.push(this.removeMatchingKeysForTargetId(e,o.targetId)),r++)})),ti.waitFor(i).next((()=>r))}getTargetCount(e){return ti.resolve(this.targetCount)}getTargetData(e,t){const n=this.Ts.get(t)||null;return ti.resolve(n)}addMatchingKeys(e,t,n){return this.As.ss(t,n),ti.resolve()}removeMatchingKeys(e,t,n){this.As.os(t,n);const r=this.persistence.referenceDelegate,i=[];return r&&t.forEach((t=>{i.push(r.markPotentiallyOrphaned(e,t))})),ti.waitFor(i)}removeMatchingKeysForTargetId(e,t){return this.As.us(t),ti.resolve()}getMatchingKeysForTargetId(e,t){const n=this.As.hs(t);return ti.resolve(n)}containsKey(e,t){return ti.resolve(this.As.containsKey(t))}}class ya{constructor(e,t){this.bs={},this.overlays={},this.Ps=new ri(0),this.vs=!1,this.vs=!0,this.referenceDelegate=e(this),this.Vs=new ga(this),this.indexManager=new ra,this.remoteDocumentCache=function(e){return new pa(e)}((e=>this.referenceDelegate.Ss(e))),this.wt=new ea(t),this.Ds=new ua(this.wt)}start(){return Promise.resolve()}shutdown(){return this.vs=!1,Promise.resolve()}get started(){return this.vs}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(e){return this.indexManager}getDocumentOverlayCache(e){let t=this.overlays[e.toKey()];return t||(t=new ca,this.overlays[e.toKey()]=t),t}getMutationQueue(e,t){let n=this.bs[e.toKey()];return n||(n=new da(t,this.referenceDelegate),this.bs[e.toKey()]=n),n}getTargetCache(){return this.Vs}getRemoteDocumentCache(){return this.remoteDocumentCache}getBundleCache(){return this.Ds}runTransaction(e,t,n){_r("MemoryPersistence","Starting transaction:",e);const r=new va(this.Ps.next());return this.referenceDelegate.Cs(),n(r).next((e=>this.referenceDelegate.xs(r).next((()=>e)))).toPromise().then((e=>(r.raiseOnCommittedEvent(),e)))}Ns(e,t){return ti.or(Object.values(this.bs).map((n=>()=>n.containsKey(e,t))))}}class va extends class{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(e){this.onCommittedListeners.push(e)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((e=>e()))}}{constructor(e){super(),this.currentSequenceNumber=e}}class Aa{constructor(e){this.persistence=e,this.ks=new ha,this.Os=null}static Ms(e){return new Aa(e)}get Fs(){if(this.Os)return this.Os;throw Sr()}addReference(e,t,n){return this.ks.addReference(n,t),this.Fs.delete(n.toString()),ti.resolve()}removeReference(e,t,n){return this.ks.removeReference(n,t),this.Fs.add(n.toString()),ti.resolve()}markPotentiallyOrphaned(e,t){return this.Fs.add(t.toString()),ti.resolve()}removeTarget(e,t){this.ks.us(t.targetId).forEach((e=>this.Fs.add(e.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(e,t.targetId).next((e=>{e.forEach((e=>this.Fs.add(e.toString())))})).next((()=>n.removeTargetData(e,t)))}Cs(){this.Os=new Set}xs(e){const t=this.persistence.getRemoteDocumentCache().newChangeBuffer();return ti.forEach(this.Fs,(n=>{const r=Jr.fromPath(n);return this.$s(e,r).next((e=>{e||t.removeEntry(r,qr.min())}))})).next((()=>(this.Os=null,t.apply(e))))}updateLimboDocument(e,t){return this.$s(e,t).next((e=>{e?this.Fs.delete(t.toString()):this.Fs.add(t.toString())}))}Ss(e){return 0}$s(e,t){return ti.or([()=>ti.resolve(this.ks.containsKey(t)),()=>this.persistence.getTargetCache().containsKey(e,t),()=>this.persistence.Ns(e,t)])}}class ba{constructor(e,t,n,r){this.targetId=e,this.fromCache=t,this.Pi=n,this.vi=r}static Vi(e,t){let n=co(),r=co();for(const e of t.docChanges)switch(e.type){case 0:n=n.add(e.doc.key);break;case 1:r=r.add(e.doc.key)}return new ba(e,t.fromCache,n,r)}}class wa{constructor(){this.Si=!1}initialize(e,t){this.Di=e,this.indexManager=t,this.Si=!0}getDocumentsMatchingQuery(e,t,n,r){return this.Ci(e,t).next((i=>i||this.xi(e,t,r,n))).next((n=>n||this.Ni(e,t)))}Ci(e,t){return ti.resolve(null)}xi(e,t,n,r){return function(e){return 0===e.filters.length&&null===e.limit&&null==e.startAt&&null==e.endAt&&(0===e.explicitOrderBy.length||1===e.explicitOrderBy.length&&e.explicitOrderBy[0].field.isKeyField())}(t)||r.isEqual(qr.min())?this.Ni(e,t):this.Di.getDocuments(e,n).next((i=>{const s=this.ki(t,i);return this.Oi(t,s,n,r)?this.Ni(e,t):(Er()<=o.in.DEBUG&&_r("QueryEngine","Re-using previous result from %s to execute query: %s",r.toString(),ps(t)),this.Mi(e,s,t,function(e,t){const n=e.toTimestamp().seconds,r=e.toTimestamp().nanoseconds+1,i=qr.fromTimestamp(1e9===r?new Hr(n+1,0):new Hr(n,r));return new Yr(i,Jr.empty(),t)}(r,-1)))}))}ki(e,t){let n=new ci(gs(e));return t.forEach(((t,r)=>{ms(e,r)&&(n=n.add(r))})),n}Oi(e,t,n,r){if(null===e.limit)return!1;if(n.size!==t.size)return!0;const i="F"===e.limitType?t.last():t.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(r)>0)}Ni(e,t){return Er()<=o.in.DEBUG&&_r("QueryEngine","Using full collection scan to execute query:",ps(t)),this.Di.getDocumentsMatchingQuery(e,t,Yr.min())}Mi(e,t,n,r){return this.Di.getDocumentsMatchingQuery(e,n,r).next((e=>(t.forEach((t=>{e=e.insert(t.key,t)})),e)))}}class Ea{constructor(e,t,n,r){this.persistence=e,this.Fi=t,this.wt=r,this.$i=new ai(Br),this.Bi=new Zs((e=>qi(e)),Wi),this.Li=new Map,this.Ui=e.getRemoteDocumentCache(),this.Vs=e.getTargetCache(),this.Ds=e.getBundleCache(),this.qi(n)}qi(e){this.documentOverlayCache=this.persistence.getDocumentOverlayCache(e),this.indexManager=this.persistence.getIndexManager(e),this.mutationQueue=this.persistence.getMutationQueue(e,this.indexManager),this.localDocuments=new la(this.Ui,this.mutationQueue,this.documentOverlayCache,this.indexManager),this.Ui.setIndexManager(this.indexManager),this.Fi.initialize(this.localDocuments,this.indexManager)}collectGarbage(e){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(t=>e.collect(t,this.$i)))}}async function _a(e,t){const n=Or(e);return await n.persistence.runTransaction("Handle user change","readonly",(e=>{let r;return n.mutationQueue.getAllMutationBatches(e).next((i=>(r=i,n.qi(t),n.mutationQueue.getAllMutationBatches(e)))).next((t=>{const i=[],s=[];let o=co();for(const e of r){i.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}for(const e of t){s.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}return n.localDocuments.getDocuments(e,o).next((e=>({Ki:e,removedBatchIds:i,addedBatchIds:s})))}))}))}function Ca(e){const t=Or(e);return t.persistence.runTransaction("Get last remote snapshot version","readonly",(e=>t.Vs.getLastRemoteSnapshotVersion(e)))}function Ta(e,t){const n=Or(e);return n.persistence.runTransaction("Get next mutation batch","readonly",(e=>(void 0===t&&(t=-1),n.mutationQueue.getNextMutationBatchAfterBatchId(e,t))))}async function ka(e,t,n){const r=Or(e),i=r.$i.get(t),s=n?"readwrite":"readwrite-primary";try{n||await r.persistence.runTransaction("Release target",s,(e=>r.persistence.referenceDelegate.removeTarget(e,i)))}catch(e){if(!ni(e))throw e;_r("LocalStore",`Failed to update sequence numbers for target ${t}: ${e}`)}r.$i=r.$i.remove(t),r.Bi.delete(i.target)}function Sa(e,t,n){const r=Or(e);let i=qr.min(),s=co();return r.persistence.runTransaction("Execute query","readonly",(e=>function(e,t,n){const r=Or(e),i=r.Bi.get(n);return void 0!==i?ti.resolve(r.$i.get(i)):r.Vs.getTargetData(t,n)}(r,e,hs(t)).next((t=>{if(t)return i=t.lastLimboFreeSnapshotVersion,r.Vs.getMatchingKeysForTargetId(e,t.targetId).next((e=>{s=e}))})).next((()=>r.Fi.getDocumentsMatchingQuery(e,t,n?i:qr.min(),n?s:co()))).next((e=>(function(e,t,n){let r=qr.min();n.forEach(((e,t)=>{t.readTime.compareTo(r)>0&&(r=t.readTime)})),e.Li.set(t,r)}(r,function(e){return e.collectionGroup||(e.path.length%2==1?e.path.lastSegment():e.path.get(e.path.length-2))}(t),e),{documents:e,ji:s})))))}class Ia{constructor(){this.activeTargetIds=fo()}Xi(e){this.activeTargetIds=this.activeTargetIds.add(e)}Zi(e){this.activeTargetIds=this.activeTargetIds.delete(e)}Yi(){const e={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(e)}}class Oa{constructor(){this.Fr=new Ia,this.$r={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(e){}updateMutationState(e,t,n){}addLocalQueryTarget(e){return this.Fr.Xi(e),this.$r[e]||"not-current"}updateQueryState(e,t,n){this.$r[e]=t}removeLocalQueryTarget(e){this.Fr.Zi(e)}isLocalQueryTarget(e){return this.Fr.activeTargetIds.has(e)}clearQueryState(e){delete this.$r[e]}getAllActiveQueryTargets(){return this.Fr.activeTargetIds}isActiveQueryTarget(e){return this.Fr.activeTargetIds.has(e)}start(){return this.Fr=new Ia,Promise.resolve()}handleUserChange(e,t,n){}setOnlineState(e){}shutdown(){}writeSequenceNumber(e){}notifyBundleLoaded(e){}}class Na{Br(e){}shutdown(){}}class xa{constructor(){this.Lr=()=>this.Ur(),this.qr=()=>this.Kr(),this.Gr=[],this.Qr()}Br(e){this.Gr.push(e)}shutdown(){window.removeEventListener("online",this.Lr),window.removeEventListener("offline",this.qr)}Qr(){window.addEventListener("online",this.Lr),window.addEventListener("offline",this.qr)}Ur(){_r("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const e of this.Gr)e(0)}Kr(){_r("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const e of this.Gr)e(1)}static V(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Pa={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Da{constructor(e){this.jr=e.jr,this.Wr=e.Wr}zr(e){this.Hr=e}Jr(e){this.Yr=e}onMessage(e){this.Xr=e}close(){this.Wr()}send(e){this.jr(e)}Zr(){this.Hr()}eo(e){this.Yr(e)}no(e){this.Xr(e)}}class Ra extends class{constructor(e){this.databaseInfo=e,this.databaseId=e.databaseId;const t=e.ssl?"https":"http";this.so=t+"://"+e.host,this.io="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}ro(e,t,n,r,i){const s=this.oo(e,t);_r("RestConnection","Sending: ",s,n);const o={};return this.uo(o,r,i),this.co(e,s,o,n).then((e=>(_r("RestConnection","Received: ",e),e)),(t=>{throw Tr("RestConnection",`${e} failed with error: `,t,"url: ",s,"request:",n),t}))}ao(e,t,n,r,i,s){return this.ro(e,t,n,r,i)}uo(e,t,n){e["X-Goog-Api-Client"]="gl-js/ fire/"+br,e["Content-Type"]="text/plain",this.databaseInfo.appId&&(e["X-Firebase-GMPID"]=this.databaseInfo.appId),t&&t.headers.forEach(((t,n)=>e[n]=t)),n&&n.headers.forEach(((t,n)=>e[n]=t))}oo(e,t){const n=Pa[e];return`${this.so}/v1/${t}:${n}`}}{constructor(e){super(e),this.forceLongPolling=e.forceLongPolling,this.autoDetectLongPolling=e.autoDetectLongPolling,this.useFetchStreams=e.useFetchStreams}co(e,t,n,r){return new Promise(((i,s)=>{const o=new yr;o.listenOnce(fr.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case hr.NO_ERROR:const t=o.getResponseJson();_r("Connection","XHR received:",JSON.stringify(t)),i(t);break;case hr.TIMEOUT:_r("Connection",'RPC "'+e+'" timed out'),s(new xr(Nr.DEADLINE_EXCEEDED,"Request time out"));break;case hr.HTTP_ERROR:const n=o.getStatus();if(_r("Connection",'RPC "'+e+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const e=o.getResponseJson().error;if(e&&e.status&&e.message){const t=function(e){const t=e.toLowerCase().replace(/_/g,"-");return Object.values(Nr).indexOf(t)>=0?t:Nr.UNKNOWN}(e.status);s(new xr(t,e.message))}else s(new xr(Nr.UNKNOWN,"Server responded with status "+o.getStatus()))}else s(new xr(Nr.UNAVAILABLE,"Connection failed."));break;default:Sr()}}finally{_r("Connection",'RPC "'+e+'" completed.')}}));const a=JSON.stringify(r);o.send(t,"POST",a,n,15)}))}ho(e,t,n){const r=[this.so,"/","google.firestore.v1.Firestore","/",e,"/channel"],i=ur(),s=cr(),o={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(o.xmlHttpFactory=new mr({})),this.uo(o.initMessageHeaders,t,n),(0,a.uI)()||(0,a.b$)()||(0,a.d)()||(0,a.w1)()||(0,a.Mn)()||(0,a.ru)()||(o.httpHeadersOverwriteParam="$httpHeaders");const l=r.join("");_r("Connection","Creating WebChannel: "+l,o);const u=i.createWebChannel(l,o);let c=!1,h=!1;const f=new Da({jr:e=>{h?_r("Connection","Not sending because WebChannel is closed:",e):(c||(_r("Connection","Opening WebChannel transport."),u.open(),c=!0),_r("Connection","WebChannel sending:",e),u.send(e))},Wr:()=>u.close()}),d=(e,t,n)=>{e.listen(t,(e=>{try{n(e)}catch(e){setTimeout((()=>{throw e}),0)}}))};return d(u,gr.EventType.OPEN,(()=>{h||_r("Connection","WebChannel transport opened.")})),d(u,gr.EventType.CLOSE,(()=>{h||(h=!0,_r("Connection","WebChannel transport closed"),f.eo())})),d(u,gr.EventType.ERROR,(e=>{h||(h=!0,Tr("Connection","WebChannel transport errored:",e),f.eo(new xr(Nr.UNAVAILABLE,"The operation could not be completed")))})),d(u,gr.EventType.MESSAGE,(e=>{var t;if(!h){const n=e.data[0];Ir(!!n);const r=n,i=r.error||(null===(t=r[0])||void 0===t?void 0:t.error);if(i){_r("Connection","WebChannel received error:",i);const e=i.status;let t=function(e){const t=Js[e];if(void 0!==t)return Ys(t)}(e),n=i.message;void 0===t&&(t=Nr.INTERNAL,n="Unknown error status: "+e+" with message "+i.message),h=!0,f.eo(new xr(t,n)),u.close()}else _r("Connection","WebChannel received:",n),f.no(n)}})),d(s,dr.STAT_EVENT,(e=>{e.stat===pr.PROXY?_r("Connection","Detected buffering proxy"):e.stat===pr.NOPROXY&&_r("Connection","Detected no buffering proxy")})),setTimeout((()=>{f.Zr()}),0),f}}function La(){return"undefined"!=typeof document?document:null}function Ma(e){return new To(e,!0)}class Fa{constructor(e,t,n=1e3,r=1.5,i=6e4){this.js=e,this.timerId=t,this.lo=n,this.fo=r,this._o=i,this.wo=0,this.mo=null,this.yo=Date.now(),this.reset()}reset(){this.wo=0}po(){this.wo=this._o}Io(e){this.cancel();const t=Math.floor(this.wo+this.To()),n=Math.max(0,Date.now()-this.yo),r=Math.max(0,t-n);r>0&&_r("ExponentialBackoff",`Backing off for ${r} ms (base delay: ${this.wo} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`),this.mo=this.js.enqueueAfterDelay(this.timerId,r,(()=>(this.yo=Date.now(),e()))),this.wo*=this.fo,this.wo<this.lo&&(this.wo=this.lo),this.wo>this._o&&(this.wo=this._o)}Eo(){null!==this.mo&&(this.mo.skipDelay(),this.mo=null)}cancel(){null!==this.mo&&(this.mo.cancel(),this.mo=null)}To(){return(Math.random()-.5)*this.wo}}class Ua{constructor(e,t,n,r,i,s,o,a){this.js=e,this.Ao=n,this.Ro=r,this.bo=i,this.authCredentialsProvider=s,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.Po=0,this.vo=null,this.Vo=null,this.stream=null,this.So=new Fa(e,t)}Do(){return 1===this.state||5===this.state||this.Co()}Co(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.xo()}async stop(){this.Do()&&await this.close(0)}No(){this.state=0,this.So.reset()}ko(){this.Co()&&null===this.vo&&(this.vo=this.js.enqueueAfterDelay(this.Ao,6e4,(()=>this.Oo())))}Mo(e){this.Fo(),this.stream.send(e)}async Oo(){if(this.Co())return this.close(0)}Fo(){this.vo&&(this.vo.cancel(),this.vo=null)}$o(){this.Vo&&(this.Vo.cancel(),this.Vo=null)}async close(e,t){this.Fo(),this.$o(),this.So.cancel(),this.Po++,4!==e?this.So.reset():t&&t.code===Nr.RESOURCE_EXHAUSTED?(Cr(t.toString()),Cr("Using maximum backoff delay to prevent overloading the backend."),this.So.po()):t&&t.code===Nr.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Bo(),this.stream.close(),this.stream=null),this.state=e,await this.listener.Jr(t)}Bo(){}auth(){this.state=1;const e=this.Lo(this.Po),t=this.Po;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([e,n])=>{this.Po===t&&this.Uo(e,n)}),(t=>{e((()=>{const e=new xr(Nr.UNKNOWN,"Fetching auth token failed: "+t.message);return this.qo(e)}))}))}Uo(e,t){const n=this.Lo(this.Po);this.stream=this.Ko(e,t),this.stream.zr((()=>{n((()=>(this.state=2,this.Vo=this.js.enqueueAfterDelay(this.Ro,1e4,(()=>(this.Co()&&(this.state=3),Promise.resolve()))),this.listener.zr())))})),this.stream.Jr((e=>{n((()=>this.qo(e)))})),this.stream.onMessage((e=>{n((()=>this.onMessage(e)))}))}xo(){this.state=5,this.So.Io((async()=>{this.state=0,this.start()}))}qo(e){return _r("PersistentStream",`close with error: ${e}`),this.stream=null,this.close(4,e)}Lo(e){return t=>{this.js.enqueueAndForget((()=>this.Po===e?t():(_r("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Va extends Ua{constructor(e,t,n,r,i,s){super(e,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",t,n,r,s),this.wt=i}Ko(e,t){return this.bo.ho("Listen",e,t)}onMessage(e){this.So.reset();const t=function(e,t){let n;if("targetChange"in t){t.targetChange;const r=function(e){return"NO_CHANGE"===e?0:"ADD"===e?1:"REMOVE"===e?2:"CURRENT"===e?3:"RESET"===e?4:Sr()}(t.targetChange.targetChangeType||"NO_CHANGE"),i=t.targetChange.targetIds||[],s=function(e,t){return e.dt?(Ir(void 0===t||"string"==typeof t),di.fromBase64String(t||"")):(Ir(void 0===t||t instanceof Uint8Array),di.fromUint8Array(t||new Uint8Array))}(e,t.targetChange.resumeToken),o=t.targetChange.cause,a=o&&function(e){const t=void 0===e.code?Nr.UNKNOWN:Ys(e.code);return new xr(t,e.message||"")}(o);n=new vo(r,i,s,a||null)}else if("documentChange"in t){t.documentChange;const r=t.documentChange;r.document,r.document.name,r.document.updateTime;const i=Do(e,r.document.name),s=Oo(r.document.updateTime),o=new ji({mapValue:{fields:r.document.fields}}),a=Bi.newFoundDocument(i,s,o),l=r.targetIds||[],u=r.removedTargetIds||[];n=new go(l,u,a.key,a)}else if("documentDelete"in t){t.documentDelete;const r=t.documentDelete;r.document;const i=Do(e,r.document),s=r.readTime?Oo(r.readTime):qr.min(),o=Bi.newNoDocument(i,s),a=r.removedTargetIds||[];n=new go([],a,o.key,o)}else if("documentRemove"in t){t.documentRemove;const r=t.documentRemove;r.document;const i=Do(e,r.document),s=r.removedTargetIds||[];n=new go([],s,i,null)}else{if(!("filter"in t))return Sr();{t.filter;const e=t.filter;e.targetId;const r=e.count||0,i=new Qs(r),s=e.targetId;n=new yo(s,i)}}return n}(this.wt,e),n=function(e){if(!("targetChange"in e))return qr.min();const t=e.targetChange;return t.targetIds&&t.targetIds.length?qr.min():t.readTime?Oo(t.readTime):qr.min()}(e);return this.listener.Go(t,n)}Qo(e){const t={};t.database=Lo(this.wt),t.addTarget=function(e,t){let n;const r=t.target;return n=Ki(r)?{documents:Uo(e,r)}:{query:Vo(e,r)},n.targetId=t.targetId,t.resumeToken.approximateByteSize()>0?n.resumeToken=So(e,t.resumeToken):t.snapshotVersion.compareTo(qr.min())>0&&(n.readTime=ko(e,t.snapshotVersion.toTimestamp())),n}(this.wt,e);const n=function(e,t){const n=function(e,t){switch(t){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return Sr()}}(0,t.purpose);return null==n?null:{"goog-listen-tags":n}}(this.wt,e);n&&(t.labels=n),this.Mo(t)}jo(e){const t={};t.database=Lo(this.wt),t.removeTarget=e,this.Mo(t)}}class ja extends Ua{constructor(e,t,n,r,i,s){super(e,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",t,n,r,s),this.wt=i,this.Wo=!1}get zo(){return this.Wo}start(){this.Wo=!1,this.lastStreamToken=void 0,super.start()}Bo(){this.Wo&&this.Ho([])}Ko(e,t){return this.bo.ho("Write",e,t)}onMessage(e){if(Ir(!!e.streamToken),this.lastStreamToken=e.streamToken,this.Wo){this.So.reset();const t=function(e,t){return e&&e.length>0?(Ir(void 0!==t),e.map((e=>function(e,t){let n=e.updateTime?Oo(e.updateTime):Oo(t);return n.isEqual(qr.min())&&(n=Oo(t)),new Ds(n,e.transformResults||[])}(e,t)))):[]}(e.writeResults,e.commitTime),n=Oo(e.commitTime);return this.listener.Jo(n,t)}return Ir(!e.writeResults||0===e.writeResults.length),this.Wo=!0,this.listener.Yo()}Xo(){const e={};e.database=Lo(this.wt),this.Mo(e)}Ho(e){const t={streamToken:this.lastStreamToken,writes:e.map((e=>function(e,t){let n;if(t instanceof Bs)n={update:Fo(e,t.key,t.value)};else if(t instanceof Ks)n={delete:Po(e,t.key)};else if(t instanceof $s)n={update:Fo(e,t.key,t.data),updateMask:Go(t.fieldMask)};else{if(!(t instanceof Gs))return Sr();n={verify:Po(e,t.key)}}return t.fieldTransforms.length>0&&(n.updateTransforms=t.fieldTransforms.map((e=>function(e,t){const n=t.transform;if(n instanceof Ts)return{fieldPath:t.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof ks)return{fieldPath:t.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof Is)return{fieldPath:t.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Ns)return{fieldPath:t.field.canonicalString(),increment:n._t};throw Sr()}(0,e)))),t.precondition.isNone||(n.currentDocument=function(e,t){return void 0!==t.updateTime?{updateTime:Io(e,t.updateTime)}:void 0!==t.exists?{exists:t.exists}:Sr()}(e,t.precondition)),n}(this.wt,e)))};this.Mo(t)}}class za extends class{}{constructor(e,t,n,r){super(),this.authCredentials=e,this.appCheckCredentials=t,this.bo=n,this.wt=r,this.Zo=!1}tu(){if(this.Zo)throw new xr(Nr.FAILED_PRECONDITION,"The client has already been terminated.")}ro(e,t,n){return this.tu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([r,i])=>this.bo.ro(e,t,n,r,i))).catch((e=>{throw"FirebaseError"===e.name?(e.code===Nr.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new xr(Nr.UNKNOWN,e.toString())}))}ao(e,t,n,r){return this.tu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([i,s])=>this.bo.ao(e,t,n,i,s,r))).catch((e=>{throw"FirebaseError"===e.name?(e.code===Nr.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new xr(Nr.UNKNOWN,e.toString())}))}terminate(){this.Zo=!0}}class Ba{constructor(e,t){this.asyncQueue=e,this.onlineStateHandler=t,this.state="Unknown",this.eu=0,this.nu=null,this.su=!0}iu(){0===this.eu&&(this.ru("Unknown"),this.nu=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.nu=null,this.ou("Backend didn't respond within 10 seconds."),this.ru("Offline"),Promise.resolve()))))}uu(e){"Online"===this.state?this.ru("Unknown"):(this.eu++,this.eu>=1&&(this.cu(),this.ou(`Connection failed 1 times. Most recent error: ${e.toString()}`),this.ru("Offline")))}set(e){this.cu(),this.eu=0,"Online"===e&&(this.su=!1),this.ru(e)}ru(e){e!==this.state&&(this.state=e,this.onlineStateHandler(e))}ou(e){const t=`Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.su?(Cr(t),this.su=!1):_r("OnlineStateTracker",t)}cu(){null!==this.nu&&(this.nu.cancel(),this.nu=null)}}class $a{constructor(e,t,n,r,i){this.localStore=e,this.datastore=t,this.asyncQueue=n,this.remoteSyncer={},this.au=[],this.hu=new Map,this.lu=new Set,this.fu=[],this.du=i,this.du.Br((e=>{n.enqueueAndForget((async()=>{Ya(this)&&(_r("RemoteStore","Restarting streams for network reachability change."),await async function(e){const t=Or(e);t.lu.add(4),await qa(t),t._u.set("Unknown"),t.lu.delete(4),await Ha(t)}(this))}))})),this._u=new Ba(n,r)}}async function Ha(e){if(Ya(e))for(const t of e.fu)await t(!0)}async function qa(e){for(const t of e.fu)await t(!1)}function Wa(e,t){const n=Or(e);n.hu.has(t.targetId)||(n.hu.set(t.targetId,t),Xa(n)?Ja(n):ml(n).Co()&&Ga(n,t))}function Ka(e,t){const n=Or(e),r=ml(n);n.hu.delete(t),r.Co()&&Qa(n,t),0===n.hu.size&&(r.Co()?r.ko():Ya(n)&&n._u.set("Unknown"))}function Ga(e,t){e.wu.Nt(t.targetId),ml(e).Qo(t)}function Qa(e,t){e.wu.Nt(t),ml(e).jo(t)}function Ja(e){e.wu=new bo({getRemoteKeysForTarget:t=>e.remoteSyncer.getRemoteKeysForTarget(t),te:t=>e.hu.get(t)||null}),ml(e).start(),e._u.iu()}function Xa(e){return Ya(e)&&!ml(e).Do()&&e.hu.size>0}function Ya(e){return 0===Or(e).lu.size}function Za(e){e.wu=void 0}async function el(e){e.hu.forEach(((t,n)=>{Ga(e,t)}))}async function tl(e,t){Za(e),Xa(e)?(e._u.uu(t),Ja(e)):e._u.set("Unknown")}async function nl(e,t,n){if(e._u.set("Online"),t instanceof vo&&2===t.state&&t.cause)try{await async function(e,t){const n=t.cause;for(const r of t.targetIds)e.hu.has(r)&&(await e.remoteSyncer.rejectListen(r,n),e.hu.delete(r),e.wu.removeTarget(r))}(e,t)}catch(n){_r("RemoteStore","Failed to remove targets %s: %s ",t.targetIds.join(","),n),await rl(e,n)}else if(t instanceof go?e.wu.Ut(t):t instanceof yo?e.wu.zt(t):e.wu.Gt(t),!n.isEqual(qr.min()))try{const t=await Ca(e.localStore);n.compareTo(t)>=0&&await function(e,t){const n=e.wu.Yt(t);return n.targetChanges.forEach(((n,r)=>{if(n.resumeToken.approximateByteSize()>0){const i=e.hu.get(r);i&&e.hu.set(r,i.withResumeToken(n.resumeToken,t))}})),n.targetMismatches.forEach((t=>{const n=e.hu.get(t);if(!n)return;e.hu.set(t,n.withResumeToken(di.EMPTY_BYTE_STRING,n.snapshotVersion)),Qa(e,t);const r=new Zo(n.target,t,1,n.sequenceNumber);Ga(e,r)})),e.remoteSyncer.applyRemoteEvent(n)}(e,n)}catch(t){_r("RemoteStore","Failed to raise snapshot:",t),await rl(e,t)}}async function rl(e,t,n){if(!ni(t))throw t;e.lu.add(1),await qa(e),e._u.set("Offline"),n||(n=()=>Ca(e.localStore)),e.asyncQueue.enqueueRetryable((async()=>{_r("RemoteStore","Retrying IndexedDB access"),await n(),e.lu.delete(1),await Ha(e)}))}function il(e,t){return t().catch((n=>rl(e,n,t)))}async function sl(e){const t=Or(e),n=gl(t);let r=t.au.length>0?t.au[t.au.length-1].batchId:-1;for(;ol(t);)try{const e=await Ta(t.localStore,r);if(null===e){0===t.au.length&&n.ko();break}r=e.batchId,al(t,e)}catch(e){await rl(t,e)}ll(t)&&ul(t)}function ol(e){return Ya(e)&&e.au.length<10}function al(e,t){e.au.push(t);const n=gl(e);n.Co()&&n.zo&&n.Ho(t.mutations)}function ll(e){return Ya(e)&&!gl(e).Do()&&e.au.length>0}function ul(e){gl(e).start()}async function cl(e){gl(e).Xo()}async function hl(e){const t=gl(e);for(const n of e.au)t.Ho(n.mutations)}async function fl(e,t,n){const r=e.au.shift(),i=Xo.from(r,t,n);await il(e,(()=>e.remoteSyncer.applySuccessfulWrite(i))),await sl(e)}async function dl(e,t){t&&gl(e).zo&&await async function(e,t){if(function(e){switch(e){default:return Sr();case Nr.CANCELLED:case Nr.UNKNOWN:case Nr.DEADLINE_EXCEEDED:case Nr.RESOURCE_EXHAUSTED:case Nr.INTERNAL:case Nr.UNAVAILABLE:case Nr.UNAUTHENTICATED:return!1;case Nr.INVALID_ARGUMENT:case Nr.NOT_FOUND:case Nr.ALREADY_EXISTS:case Nr.PERMISSION_DENIED:case Nr.FAILED_PRECONDITION:case Nr.ABORTED:case Nr.OUT_OF_RANGE:case Nr.UNIMPLEMENTED:case Nr.DATA_LOSS:return!0}}(n=t.code)&&n!==Nr.ABORTED){const n=e.au.shift();gl(e).No(),await il(e,(()=>e.remoteSyncer.rejectFailedWrite(n.batchId,t))),await sl(e)}var n}(e,t),ll(e)&&ul(e)}async function pl(e,t){const n=Or(e);n.asyncQueue.verifyOperationInProgress(),_r("RemoteStore","RemoteStore received new credentials");const r=Ya(n);n.lu.add(3),await qa(n),r&&n._u.set("Unknown"),await n.remoteSyncer.handleCredentialChange(t),n.lu.delete(3),await Ha(n)}function ml(e){return e.mu||(e.mu=function(e,t,n){const r=Or(e);return r.tu(),new Va(t,r.bo,r.authCredentials,r.appCheckCredentials,r.wt,n)}(e.datastore,e.asyncQueue,{zr:el.bind(null,e),Jr:tl.bind(null,e),Go:nl.bind(null,e)}),e.fu.push((async t=>{t?(e.mu.No(),Xa(e)?Ja(e):e._u.set("Unknown")):(await e.mu.stop(),Za(e))}))),e.mu}function gl(e){return e.gu||(e.gu=function(e,t,n){const r=Or(e);return r.tu(),new ja(t,r.bo,r.authCredentials,r.appCheckCredentials,r.wt,n)}(e.datastore,e.asyncQueue,{zr:cl.bind(null,e),Jr:dl.bind(null,e),Yo:hl.bind(null,e),Jo:fl.bind(null,e)}),e.fu.push((async t=>{t?(e.gu.No(),await sl(e)):(await e.gu.stop(),e.au.length>0&&(_r("RemoteStore",`Stopping write stream with ${e.au.length} pending writes`),e.au=[]))}))),e.gu}class yl{constructor(e,t,n,r,i){this.asyncQueue=e,this.timerId=t,this.targetTimeMs=n,this.op=r,this.removalCallback=i,this.deferred=new Pr,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((e=>{}))}static createAndSchedule(e,t,n,r,i){const s=Date.now()+n,o=new yl(e,t,s,r,i);return o.start(n),o}start(e){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),e)}skipDelay(){return this.handleDelayElapsed()}cancel(e){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new xr(Nr.CANCELLED,"Operation cancelled"+(e?": "+e:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((e=>this.deferred.resolve(e)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function vl(e,t){if(Cr("AsyncQueue",`${t}: ${e}`),ni(e))return new xr(Nr.UNAVAILABLE,`${t}: ${e}`);throw e}class Al{constructor(e){this.comparator=e?(t,n)=>e(t,n)||Jr.comparator(t.key,n.key):(e,t)=>Jr.comparator(e.key,t.key),this.keyedMap=ro(),this.sortedSet=new ai(this.comparator)}static emptySet(e){return new Al(e.comparator)}has(e){return null!=this.keyedMap.get(e)}get(e){return this.keyedMap.get(e)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(e){const t=this.keyedMap.get(e);return t?this.sortedSet.indexOf(t):-1}get size(){return this.sortedSet.size}forEach(e){this.sortedSet.inorderTraversal(((t,n)=>(e(t),!1)))}add(e){const t=this.delete(e.key);return t.copy(t.keyedMap.insert(e.key,e),t.sortedSet.insert(e,null))}delete(e){const t=this.get(e);return t?this.copy(this.keyedMap.remove(e),this.sortedSet.remove(t)):this}isEqual(e){if(!(e instanceof Al))return!1;if(this.size!==e.size)return!1;const t=this.sortedSet.getIterator(),n=e.sortedSet.getIterator();for(;t.hasNext();){const e=t.getNext().key,r=n.getNext().key;if(!e.isEqual(r))return!1}return!0}toString(){const e=[];return this.forEach((t=>{e.push(t.toString())})),0===e.length?"DocumentSet ()":"DocumentSet (\n  "+e.join("  \n")+"\n)"}copy(e,t){const n=new Al;return n.comparator=this.comparator,n.keyedMap=e,n.sortedSet=t,n}}class bl{constructor(){this.yu=new ai(Jr.comparator)}track(e){const t=e.doc.key,n=this.yu.get(t);n?0!==e.type&&3===n.type?this.yu=this.yu.insert(t,e):3===e.type&&1!==n.type?this.yu=this.yu.insert(t,{type:n.type,doc:e.doc}):2===e.type&&2===n.type?this.yu=this.yu.insert(t,{type:2,doc:e.doc}):2===e.type&&0===n.type?this.yu=this.yu.insert(t,{type:0,doc:e.doc}):1===e.type&&0===n.type?this.yu=this.yu.remove(t):1===e.type&&2===n.type?this.yu=this.yu.insert(t,{type:1,doc:n.doc}):0===e.type&&1===n.type?this.yu=this.yu.insert(t,{type:2,doc:e.doc}):Sr():this.yu=this.yu.insert(t,e)}pu(){const e=[];return this.yu.inorderTraversal(((t,n)=>{e.push(n)})),e}}class wl{constructor(e,t,n,r,i,s,o,a){this.query=e,this.docs=t,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=i,this.fromCache=s,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(e,t,n,r){const i=[];return t.forEach((e=>{i.push({type:0,doc:e})})),new wl(e,t,Al.emptySet(t),i,n,r,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(e){if(!(this.fromCache===e.fromCache&&this.syncStateChanged===e.syncStateChanged&&this.mutatedKeys.isEqual(e.mutatedKeys)&&fs(this.query,e.query)&&this.docs.isEqual(e.docs)&&this.oldDocs.isEqual(e.oldDocs)))return!1;const t=this.docChanges,n=e.docChanges;if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(t[e].type!==n[e].type||!t[e].doc.isEqual(n[e].doc))return!1;return!0}}class El{constructor(){this.Iu=void 0,this.listeners=[]}}class _l{constructor(){this.queries=new Zs((e=>ds(e)),fs),this.onlineState="Unknown",this.Tu=new Set}}function Cl(e,t){const n=Or(e);let r=!1;for(const e of t){const t=e.query,i=n.queries.get(t);if(i){for(const t of i.listeners)t.Au(e)&&(r=!0);i.Iu=e}}r&&kl(n)}function Tl(e,t,n){const r=Or(e),i=r.queries.get(t);if(i)for(const e of i.listeners)e.onError(n);r.queries.delete(t)}function kl(e){e.Tu.forEach((e=>{e.next()}))}class Sl{constructor(e,t,n){this.query=e,this.Ru=t,this.bu=!1,this.Pu=null,this.onlineState="Unknown",this.options=n||{}}Au(e){if(!this.options.includeMetadataChanges){const t=[];for(const n of e.docChanges)3!==n.type&&t.push(n);e=new wl(e.query,e.docs,e.oldDocs,t,e.mutatedKeys,e.fromCache,e.syncStateChanged,!0)}let t=!1;return this.bu?this.vu(e)&&(this.Ru.next(e),t=!0):this.Vu(e,this.onlineState)&&(this.Su(e),t=!0),this.Pu=e,t}onError(e){this.Ru.error(e)}Eu(e){this.onlineState=e;let t=!1;return this.Pu&&!this.bu&&this.Vu(this.Pu,e)&&(this.Su(this.Pu),t=!0),t}Vu(e,t){if(!e.fromCache)return!0;const n="Offline"!==t;return!(this.options.Du&&n||e.docs.isEmpty()&&"Offline"!==t)}vu(e){if(e.docChanges.length>0)return!0;const t=this.Pu&&this.Pu.hasPendingWrites!==e.hasPendingWrites;return!(!e.syncStateChanged&&!t)&&!0===this.options.includeMetadataChanges}Su(e){e=wl.fromInitialDocuments(e.query,e.docs,e.mutatedKeys,e.fromCache),this.bu=!0,this.Ru.next(e)}}class Il{constructor(e){this.key=e}}class Ol{constructor(e){this.key=e}}class Nl{constructor(e,t){this.query=e,this.Fu=t,this.$u=null,this.current=!1,this.Bu=co(),this.mutatedKeys=co(),this.Lu=gs(e),this.Uu=new Al(this.Lu)}get qu(){return this.Fu}Ku(e,t){const n=t?t.Gu:new bl,r=t?t.Uu:this.Uu;let i=t?t.mutatedKeys:this.mutatedKeys,s=r,o=!1;const a="F"===this.query.limitType&&r.size===this.query.limit?r.last():null,l="L"===this.query.limitType&&r.size===this.query.limit?r.first():null;if(e.inorderTraversal(((e,t)=>{const u=r.get(e),c=ms(this.query,t)?t:null,h=!!u&&this.mutatedKeys.has(u.key),f=!!c&&(c.hasLocalMutations||this.mutatedKeys.has(c.key)&&c.hasCommittedMutations);let d=!1;u&&c?u.data.isEqual(c.data)?h!==f&&(n.track({type:3,doc:c}),d=!0):this.Qu(u,c)||(n.track({type:2,doc:c}),d=!0,(a&&this.Lu(c,a)>0||l&&this.Lu(c,l)<0)&&(o=!0)):!u&&c?(n.track({type:0,doc:c}),d=!0):u&&!c&&(n.track({type:1,doc:u}),d=!0,(a||l)&&(o=!0)),d&&(c?(s=s.add(c),i=f?i.add(e):i.delete(e)):(s=s.delete(e),i=i.delete(e)))})),null!==this.query.limit)for(;s.size>this.query.limit;){const e="F"===this.query.limitType?s.last():s.first();s=s.delete(e.key),i=i.delete(e.key),n.track({type:1,doc:e})}return{Uu:s,Gu:n,Oi:o,mutatedKeys:i}}Qu(e,t){return e.hasLocalMutations&&t.hasCommittedMutations&&!t.hasLocalMutations}applyChanges(e,t,n){const r=this.Uu;this.Uu=e.Uu,this.mutatedKeys=e.mutatedKeys;const i=e.Gu.pu();i.sort(((e,t)=>function(e,t){const n=e=>{switch(e){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return Sr()}};return n(e)-n(t)}(e.type,t.type)||this.Lu(e.doc,t.doc))),this.ju(n);const s=t?this.Wu():[],o=0===this.Bu.size&&this.current?1:0,a=o!==this.$u;return this.$u=o,0!==i.length||a?{snapshot:new wl(this.query,e.Uu,r,i,e.mutatedKeys,0===o,a,!1),zu:s}:{zu:s}}Eu(e){return this.current&&"Offline"===e?(this.current=!1,this.applyChanges({Uu:this.Uu,Gu:new bl,mutatedKeys:this.mutatedKeys,Oi:!1},!1)):{zu:[]}}Hu(e){return!this.Fu.has(e)&&!!this.Uu.has(e)&&!this.Uu.get(e).hasLocalMutations}ju(e){e&&(e.addedDocuments.forEach((e=>this.Fu=this.Fu.add(e))),e.modifiedDocuments.forEach((e=>{})),e.removedDocuments.forEach((e=>this.Fu=this.Fu.delete(e))),this.current=e.current)}Wu(){if(!this.current)return[];const e=this.Bu;this.Bu=co(),this.Uu.forEach((e=>{this.Hu(e.key)&&(this.Bu=this.Bu.add(e.key))}));const t=[];return e.forEach((e=>{this.Bu.has(e)||t.push(new Ol(e))})),this.Bu.forEach((n=>{e.has(n)||t.push(new Il(n))})),t}Ju(e){this.Fu=e.ji,this.Bu=co();const t=this.Ku(e.documents);return this.applyChanges(t,!0)}Yu(){return wl.fromInitialDocuments(this.query,this.Uu,this.mutatedKeys,0===this.$u)}}class xl{constructor(e,t,n){this.query=e,this.targetId=t,this.view=n}}class Pl{constructor(e){this.key=e,this.Xu=!1}}class Dl{constructor(e,t,n,r,i,s){this.localStore=e,this.remoteStore=t,this.eventManager=n,this.sharedClientState=r,this.currentUser=i,this.maxConcurrentLimboResolutions=s,this.Zu={},this.tc=new Zs((e=>ds(e)),fs),this.ec=new Map,this.nc=new Set,this.sc=new ai(Jr.comparator),this.ic=new Map,this.rc=new ha,this.oc={},this.uc=new Map,this.cc=oa.Rn(),this.onlineState="Unknown",this.ac=void 0}get isPrimaryClient(){return!0===this.ac}}async function Rl(e,t){const n=function(e){const t=Or(e);return t.remoteStore.remoteSyncer.applyRemoteEvent=Ml.bind(null,t),t.remoteStore.remoteSyncer.getRemoteKeysForTarget=Jl.bind(null,t),t.remoteStore.remoteSyncer.rejectListen=Ul.bind(null,t),t.Zu.Go=Cl.bind(null,t.eventManager),t.Zu.lc=Tl.bind(null,t.eventManager),t}(e);let r,i;const s=n.tc.get(t);if(s)r=s.targetId,n.sharedClientState.addLocalQueryTarget(r),i=s.view.Yu();else{const e=await function(e,t){const n=Or(e);return n.persistence.runTransaction("Allocate target","readwrite",(e=>{let r;return n.Vs.getTargetData(e,t).next((i=>i?(r=i,ti.resolve(r)):n.Vs.allocateTargetId(e).next((i=>(r=new Zo(t,i,0,e.currentSequenceNumber),n.Vs.addTargetData(e,r).next((()=>r)))))))})).then((e=>{const r=n.$i.get(e.targetId);return(null===r||e.snapshotVersion.compareTo(r.snapshotVersion)>0)&&(n.$i=n.$i.insert(e.targetId,e),n.Bi.set(t,e.targetId)),e}))}(n.localStore,hs(t));n.isPrimaryClient&&Wa(n.remoteStore,e);const s=n.sharedClientState.addLocalQueryTarget(e.targetId);r=e.targetId,i=await async function(e,t,n,r){e.hc=(t,n,r)=>async function(e,t,n,r){let i=t.view.Ku(n);i.Oi&&(i=await Sa(e.localStore,t.query,!1).then((({documents:e})=>t.view.Ku(e,i))));const s=r&&r.targetChanges.get(t.targetId),o=t.view.applyChanges(i,e.isPrimaryClient,s);return ql(e,t.targetId,o.zu),o.snapshot}(e,t,n,r);const i=await Sa(e.localStore,t,!0),s=new Nl(t,i.ji),o=s.Ku(i.documents),a=mo.createSynthesizedTargetChangeForCurrentChange(n,r&&"Offline"!==e.onlineState),l=s.applyChanges(o,e.isPrimaryClient,a);ql(e,n,l.zu);const u=new xl(t,n,s);return e.tc.set(t,u),e.ec.has(n)?e.ec.get(n).push(t):e.ec.set(n,[t]),l.snapshot}(n,t,r,"current"===s)}return i}async function Ll(e,t){const n=Or(e),r=n.tc.get(t),i=n.ec.get(r.targetId);if(i.length>1)return n.ec.set(r.targetId,i.filter((e=>!fs(e,t)))),void n.tc.delete(t);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(r.targetId),n.sharedClientState.isActiveQueryTarget(r.targetId)||await ka(n.localStore,r.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(r.targetId),Ka(n.remoteStore,r.targetId),$l(n,r.targetId)})).catch(ei)):($l(n,r.targetId),await ka(n.localStore,r.targetId,!0))}async function Ml(e,t){const n=Or(e);try{const e=await function(e,t){const n=Or(e),r=t.snapshotVersion;let i=n.$i;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(e=>{const s=n.Ui.newChangeBuffer({trackRemovals:!0});i=n.$i;const o=[];t.targetChanges.forEach(((s,a)=>{const l=i.get(a);if(!l)return;o.push(n.Vs.removeMatchingKeys(e,s.removedDocuments,a).next((()=>n.Vs.addMatchingKeys(e,s.addedDocuments,a))));let u=l.withSequenceNumber(e.currentSequenceNumber);t.targetMismatches.has(a)?u=u.withResumeToken(di.EMPTY_BYTE_STRING,qr.min()).withLastLimboFreeSnapshotVersion(qr.min()):s.resumeToken.approximateByteSize()>0&&(u=u.withResumeToken(s.resumeToken,r)),i=i.insert(a,u),function(e,t,n){return 0===e.resumeToken.approximateByteSize()||t.snapshotVersion.toMicroseconds()-e.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(l,u,s)&&o.push(n.Vs.updateTargetData(e,u))}));let a=to(),l=co();if(t.documentUpdates.forEach((r=>{t.resolvedLimboDocuments.has(r)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(e,r))})),o.push(function(e,t,n){let r=co(),i=co();return n.forEach((e=>r=r.add(e))),t.getEntries(e,r).next((e=>{let r=to();return n.forEach(((n,s)=>{const o=e.get(n);s.isFoundDocument()!==o.isFoundDocument()&&(i=i.add(n)),s.isNoDocument()&&s.version.isEqual(qr.min())?(t.removeEntry(n,s.readTime),r=r.insert(n,s)):!o.isValidDocument()||s.version.compareTo(o.version)>0||0===s.version.compareTo(o.version)&&o.hasPendingWrites?(t.addEntry(s),r=r.insert(n,s)):_r("LocalStore","Ignoring outdated watch update for ",n,". Current version:",o.version," Watch version:",s.version)})),{Gi:r,Qi:i}}))}(e,s,t.documentUpdates).next((e=>{a=e.Gi,l=e.Qi}))),!r.isEqual(qr.min())){const t=n.Vs.getLastRemoteSnapshotVersion(e).next((t=>n.Vs.setTargetsMetadata(e,e.currentSequenceNumber,r)));o.push(t)}return ti.waitFor(o).next((()=>s.apply(e))).next((()=>n.localDocuments.getLocalViewOfDocuments(e,a,l))).next((()=>a))})).then((e=>(n.$i=i,e)))}(n.localStore,t);t.targetChanges.forEach(((e,t)=>{const r=n.ic.get(t);r&&(Ir(e.addedDocuments.size+e.modifiedDocuments.size+e.removedDocuments.size<=1),e.addedDocuments.size>0?r.Xu=!0:e.modifiedDocuments.size>0?Ir(r.Xu):e.removedDocuments.size>0&&(Ir(r.Xu),r.Xu=!1))})),await Gl(n,e,t)}catch(e){await ei(e)}}function Fl(e,t,n){const r=Or(e);if(r.isPrimaryClient&&0===n||!r.isPrimaryClient&&1===n){const e=[];r.tc.forEach(((n,r)=>{const i=r.view.Eu(t);i.snapshot&&e.push(i.snapshot)})),function(e,t){const n=Or(e);n.onlineState=t;let r=!1;n.queries.forEach(((e,n)=>{for(const e of n.listeners)e.Eu(t)&&(r=!0)})),r&&kl(n)}(r.eventManager,t),e.length&&r.Zu.Go(e),r.onlineState=t,r.isPrimaryClient&&r.sharedClientState.setOnlineState(t)}}async function Ul(e,t,n){const r=Or(e);r.sharedClientState.updateQueryState(t,"rejected",n);const i=r.ic.get(t),s=i&&i.key;if(s){let e=new ai(Jr.comparator);e=e.insert(s,Bi.newNoDocument(s,qr.min()));const n=co().add(s),i=new po(qr.min(),new Map,new ci(Br),e,n);await Ml(r,i),r.sc=r.sc.remove(s),r.ic.delete(t),Kl(r)}else await ka(r.localStore,t,!1).then((()=>$l(r,t,n))).catch(ei)}async function Vl(e,t){const n=Or(e),r=t.batch.batchId;try{const e=await function(e,t){const n=Or(e);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(e=>{const r=t.batch.keys(),i=n.Ui.newChangeBuffer({trackRemovals:!0});return function(e,t,n,r){const i=n.batch,s=i.keys();let o=ti.resolve();return s.forEach((e=>{o=o.next((()=>r.getEntry(t,e))).next((t=>{const s=n.docVersions.get(e);Ir(null!==s),t.version.compareTo(s)<0&&(i.applyToRemoteDocument(t,n),t.isValidDocument()&&(t.setReadTime(n.commitVersion),r.addEntry(t)))}))})),o.next((()=>e.mutationQueue.removeMutationBatch(t,i)))}(n,e,t,i).next((()=>i.apply(e))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,r,t.batch.batchId))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,function(e){let t=co();for(let n=0;n<e.mutationResults.length;++n)e.mutationResults[n].transformResults.length>0&&(t=t.add(e.batch.mutations[n].key));return t}(t)))).next((()=>n.localDocuments.getDocuments(e,r)))}))}(n.localStore,t);Bl(n,r,null),zl(n,r),n.sharedClientState.updateMutationState(r,"acknowledged"),await Gl(n,e)}catch(e){await ei(e)}}async function jl(e,t,n){const r=Or(e);try{const e=await function(e,t){const n=Or(e);return n.persistence.runTransaction("Reject batch","readwrite-primary",(e=>{let r;return n.mutationQueue.lookupMutationBatch(e,t).next((t=>(Ir(null!==t),r=t.keys(),n.mutationQueue.removeMutationBatch(e,t)))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,r,t))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,r))).next((()=>n.localDocuments.getDocuments(e,r)))}))}(r.localStore,t);Bl(r,t,n),zl(r,t),r.sharedClientState.updateMutationState(t,"rejected",n),await Gl(r,e)}catch(n){await ei(n)}}function zl(e,t){(e.uc.get(t)||[]).forEach((e=>{e.resolve()})),e.uc.delete(t)}function Bl(e,t,n){const r=Or(e);let i=r.oc[r.currentUser.toKey()];if(i){const e=i.get(t);e&&(n?e.reject(n):e.resolve(),i=i.remove(t)),r.oc[r.currentUser.toKey()]=i}}function $l(e,t,n=null){e.sharedClientState.removeLocalQueryTarget(t);for(const r of e.ec.get(t))e.tc.delete(r),n&&e.Zu.lc(r,n);e.ec.delete(t),e.isPrimaryClient&&e.rc.us(t).forEach((t=>{e.rc.containsKey(t)||Hl(e,t)}))}function Hl(e,t){e.nc.delete(t.path.canonicalString());const n=e.sc.get(t);null!==n&&(Ka(e.remoteStore,n),e.sc=e.sc.remove(t),e.ic.delete(n),Kl(e))}function ql(e,t,n){for(const r of n)r instanceof Il?(e.rc.addReference(r.key,t),Wl(e,r)):r instanceof Ol?(_r("SyncEngine","Document no longer in limbo: "+r.key),e.rc.removeReference(r.key,t),e.rc.containsKey(r.key)||Hl(e,r.key)):Sr()}function Wl(e,t){const n=t.key,r=n.path.canonicalString();e.sc.get(n)||e.nc.has(r)||(_r("SyncEngine","New document in limbo: "+n),e.nc.add(r),Kl(e))}function Kl(e){for(;e.nc.size>0&&e.sc.size<e.maxConcurrentLimboResolutions;){const t=e.nc.values().next().value;e.nc.delete(t);const n=new Jr(Kr.fromString(t)),r=e.cc.next();e.ic.set(r,new Pl(n)),e.sc=e.sc.insert(n,r),Wa(e.remoteStore,new Zo(hs(us(n.path)),r,2,ri.ot))}}async function Gl(e,t,n){const r=Or(e),i=[],s=[],o=[];r.tc.isEmpty()||(r.tc.forEach(((e,a)=>{o.push(r.hc(a,t,n).then((e=>{if(e){r.isPrimaryClient&&r.sharedClientState.updateQueryState(a.targetId,e.fromCache?"not-current":"current"),i.push(e);const t=ba.Vi(a.targetId,e);s.push(t)}})))})),await Promise.all(o),r.Zu.Go(i),await async function(e,t){const n=Or(e);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(e=>ti.forEach(t,(t=>ti.forEach(t.Pi,(r=>n.persistence.referenceDelegate.addReference(e,t.targetId,r))).next((()=>ti.forEach(t.vi,(r=>n.persistence.referenceDelegate.removeReference(e,t.targetId,r)))))))))}catch(e){if(!ni(e))throw e;_r("LocalStore","Failed to update sequence numbers: "+e)}for(const e of t){const t=e.targetId;if(!e.fromCache){const e=n.$i.get(t),r=e.snapshotVersion,i=e.withLastLimboFreeSnapshotVersion(r);n.$i=n.$i.insert(t,i)}}}(r.localStore,s))}async function Ql(e,t){const n=Or(e);if(!n.currentUser.isEqual(t)){_r("SyncEngine","User change. New user:",t.toKey());const e=await _a(n.localStore,t);n.currentUser=t,function(e,t){e.uc.forEach((e=>{e.forEach((e=>{e.reject(new xr(Nr.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),e.uc.clear()}(n),n.sharedClientState.handleUserChange(t,e.removedBatchIds,e.addedBatchIds),await Gl(n,e.Ki)}}function Jl(e,t){const n=Or(e),r=n.ic.get(t);if(r&&r.Xu)return co().add(r.key);{let e=co();const r=n.ec.get(t);if(!r)return e;for(const t of r){const r=n.tc.get(t);e=e.unionWith(r.view.qu)}return e}}function Xl(e){const t=Or(e);return t.remoteStore.remoteSyncer.applySuccessfulWrite=Vl.bind(null,t),t.remoteStore.remoteSyncer.rejectFailedWrite=jl.bind(null,t),t}class Yl{constructor(){this.synchronizeTabs=!1}async initialize(e){this.wt=Ma(e.databaseInfo.databaseId),this.sharedClientState=this.dc(e),this.persistence=this._c(e),await this.persistence.start(),this.localStore=this.wc(e),this.gcScheduler=this.mc(e,this.localStore),this.indexBackfillerScheduler=this.gc(e,this.localStore)}mc(e,t){return null}gc(e,t){return null}wc(e){return function(e,t,n,r){return new Ea(e,t,n,r)}(this.persistence,new wa,e.initialUser,this.wt)}_c(e){return new ya(Aa.Ms,this.wt)}dc(e){return new Oa}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class Zl{async initialize(e,t){this.localStore||(this.localStore=e.localStore,this.sharedClientState=e.sharedClientState,this.datastore=this.createDatastore(t),this.remoteStore=this.createRemoteStore(t),this.eventManager=this.createEventManager(t),this.syncEngine=this.createSyncEngine(t,!e.synchronizeTabs),this.sharedClientState.onlineStateHandler=e=>Fl(this.syncEngine,e,1),this.remoteStore.remoteSyncer.handleCredentialChange=Ql.bind(null,this.syncEngine),await async function(e,t){const n=Or(e);t?(n.lu.delete(2),await Ha(n)):t||(n.lu.add(2),await qa(n),n._u.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(e){return new _l}createDatastore(e){const t=Ma(e.databaseInfo.databaseId),n=(r=e.databaseInfo,new Ra(r));var r;return function(e,t,n,r){return new za(e,t,n,r)}(e.authCredentials,e.appCheckCredentials,n,t)}createRemoteStore(e){return t=this.localStore,n=this.datastore,r=e.asyncQueue,i=e=>Fl(this.syncEngine,e,0),s=xa.V()?new xa:new Na,new $a(t,n,r,i,s);var t,n,r,i,s}createSyncEngine(e,t){return function(e,t,n,r,i,s,o){const a=new Dl(e,t,n,r,i,s);return o&&(a.ac=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,e.initialUser,e.maxConcurrentLimboResolutions,t)}terminate(){return async function(e){const t=Or(e);_r("RemoteStore","RemoteStore shutting down."),t.lu.add(5),await qa(t),t.du.shutdown(),t._u.set("Unknown")}(this.remoteStore)}}class eu{constructor(e){this.observer=e,this.muted=!1}next(e){this.observer.next&&this.Ic(this.observer.next,e)}error(e){this.observer.error?this.Ic(this.observer.error,e):console.error("Uncaught Error in snapshot listener:",e)}Tc(){this.muted=!0}Ic(e,t){this.muted||setTimeout((()=>{this.muted||e(t)}),0)}}class tu{constructor(e,t,n,r){this.authCredentials=e,this.appCheckCredentials=t,this.asyncQueue=n,this.databaseInfo=r,this.user=Ar.UNAUTHENTICATED,this.clientId=zr.I(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async e=>{_r("FirestoreClient","Received user=",e.uid),await this.authCredentialListener(e),this.user=e})),this.appCheckCredentials.start(n,(e=>(_r("FirestoreClient","Received new app check token=",e),this.appCheckCredentialListener(e,this.user))))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(e){this.authCredentialListener=e}setAppCheckTokenChangeListener(e){this.appCheckCredentialListener=e}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new xr(Nr.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const e=new Pr;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),e.resolve()}catch(t){const n=vl(t,"Failed to shutdown persistence");e.reject(n)}})),e.promise}}async function nu(e,t){e.asyncQueue.verifyOperationInProgress();const n=await async function(e){return e.offlineComponents||(_r("FirestoreClient","Using default OfflineComponentProvider"),await async function(e,t){e.asyncQueue.verifyOperationInProgress(),_r("FirestoreClient","Initializing OfflineComponentProvider");const n=await e.getConfiguration();await t.initialize(n);let r=n.initialUser;e.setCredentialChangeListener((async e=>{r.isEqual(e)||(await _a(t.localStore,e),r=e)})),t.persistence.setDatabaseDeletedListener((()=>e.terminate())),e.offlineComponents=t}(e,new Yl)),e.offlineComponents}(e);_r("FirestoreClient","Initializing OnlineComponentProvider");const r=await e.getConfiguration();await t.initialize(n,r),e.setCredentialChangeListener((e=>pl(t.remoteStore,e))),e.setAppCheckTokenChangeListener(((e,n)=>pl(t.remoteStore,n))),e.onlineComponents=t}async function ru(e){return e.onlineComponents||(_r("FirestoreClient","Using default OnlineComponentProvider"),await nu(e,new Zl)),e.onlineComponents}async function iu(e){const t=await ru(e),n=t.eventManager;return n.onListen=Rl.bind(null,t.syncEngine),n.onUnlisten=Ll.bind(null,t.syncEngine),n}function su(e,t,n={}){const r=new Pr;return e.asyncQueue.enqueueAndForget((async()=>function(e,t,n,r,i){const s=new eu({next:s=>{t.enqueueAndForget((()=>async function(e,t){const n=Or(e),r=t.query;let i=!1;const s=n.queries.get(r);if(s){const e=s.listeners.indexOf(t);e>=0&&(s.listeners.splice(e,1),i=0===s.listeners.length)}if(i)return n.queries.delete(r),n.onUnlisten(r)}(e,o)));const a=s.docs.has(n);!a&&s.fromCache?i.reject(new xr(Nr.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&s.fromCache&&r&&"server"===r.source?i.reject(new xr(Nr.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(s)},error:e=>i.reject(e)}),o=new Sl(us(n.path),s,{includeMetadataChanges:!0,Du:!0});return async function(e,t){const n=Or(e),r=t.query;let i=!1,s=n.queries.get(r);if(s||(i=!0,s=new El),i)try{s.Iu=await n.onListen(r)}catch(e){const n=vl(e,`Initialization of query '${ps(t.query)}' failed`);return void t.onError(n)}n.queries.set(r,s),s.listeners.push(t),t.Eu(n.onlineState),s.Iu&&t.Au(s.Iu)&&kl(n)}(e,o)}(await iu(e),e.asyncQueue,t,n,r))),r.promise}const ou=new Map;function au(e,t,n){if(!n)throw new xr(Nr.INVALID_ARGUMENT,`Function ${e}() cannot be called with an empty ${t}.`)}function lu(e){if(!Jr.isDocumentKey(e))throw new xr(Nr.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`)}function uu(e){if(void 0===e)return"undefined";if(null===e)return"null";if("string"==typeof e)return e.length>20&&(e=`${e.substring(0,20)}...`),JSON.stringify(e);if("number"==typeof e||"boolean"==typeof e)return""+e;if("object"==typeof e){if(e instanceof Array)return"an array";{const t=function(e){return e.constructor?e.constructor.name:null}(e);return t?`a custom ${t} object`:"an object"}}return"function"==typeof e?"a function":Sr()}function cu(e,t){if("_delegate"in e&&(e=e._delegate),!(e instanceof t)){if(t.name===e.constructor.name)throw new xr(Nr.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=uu(e);throw new xr(Nr.INVALID_ARGUMENT,`Expected type '${t.name}', but it was: ${n}`)}}return e}class hu{constructor(e){var t;if(void 0===e.host){if(void 0!==e.ssl)throw new xr(Nr.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=e.host,this.ssl=null===(t=e.ssl)||void 0===t||t;if(this.credentials=e.credentials,this.ignoreUndefinedProperties=!!e.ignoreUndefinedProperties,void 0===e.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new xr(Nr.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=e.cacheSizeBytes}this.experimentalForceLongPolling=!!e.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!e.experimentalAutoDetectLongPolling,this.useFetchStreams=!!e.useFetchStreams,function(e,t,n,r){if(!0===t&&!0===r)throw new xr(Nr.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,e.experimentalForceLongPolling,0,e.experimentalAutoDetectLongPolling)}isEqual(e){return this.host===e.host&&this.ssl===e.ssl&&this.credentials===e.credentials&&this.cacheSizeBytes===e.cacheSizeBytes&&this.experimentalForceLongPolling===e.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===e.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===e.ignoreUndefinedProperties&&this.useFetchStreams===e.useFetchStreams}}class fu{constructor(e,t,n){this._authCredentials=t,this._appCheckCredentials=n,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new hu({}),this._settingsFrozen=!1,e instanceof Ei?this._databaseId=e:(this._app=e,this._databaseId=function(e){if(!Object.prototype.hasOwnProperty.apply(e.options,["projectId"]))throw new xr(Nr.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Ei(e.options.projectId)}(e))}get app(){if(!this._app)throw new xr(Nr.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(e){if(this._settingsFrozen)throw new xr(Nr.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new hu(e),void 0!==e.credentials&&(this._authCredentials=function(e){if(!e)return new Rr;switch(e.type){case"gapi":const t=e.client;return Ir(!("object"!=typeof t||null===t||!t.auth||!t.auth.getAuthHeaderValueForFirstParty)),new Fr(t,e.sessionIndex||"0",e.iamToken||null);case"provider":return e.client;default:throw new xr(Nr.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(e.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(e){const t=ou.get(e);t&&(_r("ComponentProvider","Removing Datastore"),ou.delete(e),t.terminate())}(this),Promise.resolve()}}class du{constructor(e,t,n){this.converter=t,this._key=n,this.type="document",this.firestore=e}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new mu(this.firestore,this.converter,this._key.path.popLast())}withConverter(e){return new du(this.firestore,e,this._key)}}class pu{constructor(e,t,n){this.converter=t,this._query=n,this.type="query",this.firestore=e}withConverter(e){return new pu(this.firestore,e,this._query)}}class mu extends pu{constructor(e,t,n){super(e,t,us(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const e=this._path.popLast();return e.isEmpty()?null:new du(this.firestore,null,new Jr(e))}withConverter(e){return new mu(this.firestore,e,this._path)}}function gu(e,t,...n){if(e=(0,a.m9)(e),1===arguments.length&&(t=zr.I()),au("doc","path",t),e instanceof fu){const r=Kr.fromString(t,...n);return lu(r),new du(e,null,new Jr(r))}{if(!(e instanceof du||e instanceof mu))throw new xr(Nr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=e._path.child(Kr.fromString(t,...n));return lu(r),new du(e.firestore,e instanceof mu?e.converter:null,new Jr(r))}}class yu{constructor(){this.Oc=Promise.resolve(),this.Mc=[],this.Fc=!1,this.$c=[],this.Bc=null,this.Lc=!1,this.Uc=!1,this.qc=[],this.So=new Fa(this,"async_queue_retry"),this.Kc=()=>{const e=La();e&&_r("AsyncQueue","Visibility state changed to "+e.visibilityState),this.So.Eo()};const e=La();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.Kc)}get isShuttingDown(){return this.Fc}enqueueAndForget(e){this.enqueue(e)}enqueueAndForgetEvenWhileRestricted(e){this.Gc(),this.Qc(e)}enterRestrictedMode(e){if(!this.Fc){this.Fc=!0,this.Uc=e||!1;const t=La();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.Kc)}}enqueue(e){if(this.Gc(),this.Fc)return new Promise((()=>{}));const t=new Pr;return this.Qc((()=>this.Fc&&this.Uc?Promise.resolve():(e().then(t.resolve,t.reject),t.promise))).then((()=>t.promise))}enqueueRetryable(e){this.enqueueAndForget((()=>(this.Mc.push(e),this.jc())))}async jc(){if(0!==this.Mc.length){try{await this.Mc[0](),this.Mc.shift(),this.So.reset()}catch(e){if(!ni(e))throw e;_r("AsyncQueue","Operation failed with retryable error: "+e)}this.Mc.length>0&&this.So.Io((()=>this.jc()))}}Qc(e){const t=this.Oc.then((()=>(this.Lc=!0,e().catch((e=>{this.Bc=e,this.Lc=!1;const t=function(e){let t=e.message||"";return e.stack&&(t=e.stack.includes(e.message)?e.stack:e.message+"\n"+e.stack),t}(e);throw Cr("INTERNAL UNHANDLED ERROR: ",t),e})).then((e=>(this.Lc=!1,e))))));return this.Oc=t,t}enqueueAfterDelay(e,t,n){this.Gc(),this.qc.indexOf(e)>-1&&(t=0);const r=yl.createAndSchedule(this,e,t,n,(e=>this.Wc(e)));return this.$c.push(r),r}Gc(){this.Bc&&Sr()}verifyOperationInProgress(){}async zc(){let e;do{e=this.Oc,await e}while(e!==this.Oc)}Hc(e){for(const t of this.$c)if(t.timerId===e)return!0;return!1}Jc(e){return this.zc().then((()=>{this.$c.sort(((e,t)=>e.targetTimeMs-t.targetTimeMs));for(const t of this.$c)if(t.skipDelay(),"all"!==e&&t.timerId===e)break;return this.zc()}))}Yc(e){this.qc.push(e)}Wc(e){const t=this.$c.indexOf(e);this.$c.splice(t,1)}}class vu extends fu{constructor(e,t,n){super(e,t,n),this.type="firestore",this._queue=new yu,this._persistenceKey="name"in e?e.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||wu(this),this._firestoreClient.terminate()}}function Au(e=(0,i.Mq)()){return(0,i.qX)(e,"firestore").getImmediate()}function bu(e){return e._firestoreClient||wu(e),e._firestoreClient.verifyNotTerminated(),e._firestoreClient}function wu(e){var t;const n=e._freezeSettings(),r=function(e,t,n,r){return new wi(e,t,n,r.host,r.ssl,r.experimentalForceLongPolling,r.experimentalAutoDetectLongPolling,r.useFetchStreams)}(e._databaseId,(null===(t=e._app)||void 0===t?void 0:t.options.appId)||"",e._persistenceKey,n);e._firestoreClient=new tu(e._authCredentials,e._appCheckCredentials,e._queue,r)}class Eu{constructor(...e){for(let t=0;t<e.length;++t)if(0===e[t].length)throw new xr(Nr.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new Qr(e)}isEqual(e){return this._internalPath.isEqual(e._internalPath)}}class _u{constructor(e){this._byteString=e}static fromBase64String(e){try{return new _u(di.fromBase64String(e))}catch(e){throw new xr(Nr.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+e)}}static fromUint8Array(e){return new _u(di.fromUint8Array(e))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(e){return this._byteString.isEqual(e._byteString)}}class Cu{constructor(e){this._methodName=e}}class Tu{constructor(e,t){if(!isFinite(e)||e<-90||e>90)throw new xr(Nr.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+e);if(!isFinite(t)||t<-180||t>180)throw new xr(Nr.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+t);this._lat=e,this._long=t}get latitude(){return this._lat}get longitude(){return this._long}isEqual(e){return this._lat===e._lat&&this._long===e._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(e){return Br(this._lat,e._lat)||Br(this._long,e._long)}}const ku=/^__.*__$/;class Su{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return null!==this.fieldMask?new $s(e,this.data,this.fieldMask,t,this.fieldTransforms):new Bs(e,this.data,t,this.fieldTransforms)}}class Iu{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return new $s(e,this.data,this.fieldMask,t,this.fieldTransforms)}}function Ou(e){switch(e){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw Sr()}}class Nu{constructor(e,t,n,r,i,s){this.settings=e,this.databaseId=t,this.wt=n,this.ignoreUndefinedProperties=r,void 0===i&&this.Xc(),this.fieldTransforms=i||[],this.fieldMask=s||[]}get path(){return this.settings.path}get Zc(){return this.settings.Zc}ta(e){return new Nu(Object.assign(Object.assign({},this.settings),e),this.databaseId,this.wt,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}ea(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),r=this.ta({path:n,na:!1});return r.sa(e),r}ia(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),r=this.ta({path:n,na:!1});return r.Xc(),r}ra(e){return this.ta({path:void 0,na:!0})}oa(e){return Bu(e,this.settings.methodName,this.settings.ua||!1,this.path,this.settings.ca)}contains(e){return void 0!==this.fieldMask.find((t=>e.isPrefixOf(t)))||void 0!==this.fieldTransforms.find((t=>e.isPrefixOf(t.field)))}Xc(){if(this.path)for(let e=0;e<this.path.length;e++)this.sa(this.path.get(e))}sa(e){if(0===e.length)throw this.oa("Document fields must not be empty");if(Ou(this.Zc)&&ku.test(e))throw this.oa('Document fields cannot begin and end with "__"')}}class xu{constructor(e,t,n){this.databaseId=e,this.ignoreUndefinedProperties=t,this.wt=n||Ma(e)}aa(e,t,n,r=!1){return new Nu({Zc:e,methodName:t,ca:n,path:Qr.emptyPath(),na:!1,ua:r},this.databaseId,this.wt,this.ignoreUndefinedProperties)}}function Pu(e){const t=e._freezeSettings(),n=Ma(e._databaseId);return new xu(e._databaseId,!!t.ignoreUndefinedProperties,n)}function Du(e,t,n,r,i,s={}){const o=e.aa(s.merge||s.mergeFields?2:0,t,n,i);Uu("Data must be an object, but it was:",o,r);const a=Mu(r,o);let l,u;if(s.merge)l=new fi(o.fieldMask),u=o.fieldTransforms;else if(s.mergeFields){const e=[];for(const r of s.mergeFields){const i=Vu(t,r,n);if(!o.contains(i))throw new xr(Nr.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);$u(e,i)||e.push(i)}l=new fi(e),u=o.fieldTransforms.filter((e=>l.covers(e.field)))}else l=null,u=o.fieldTransforms;return new Su(new ji(a),l,u)}class Ru extends Cu{_toFieldTransform(e){if(2!==e.Zc)throw 1===e.Zc?e.oa(`${this._methodName}() can only appear at the top level of your update data`):e.oa(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return e.fieldMask.push(e.path),null}isEqual(e){return e instanceof Ru}}function Lu(e,t){if(Fu(e=(0,a.m9)(e)))return Uu("Unsupported field value:",t,e),Mu(e,t);if(e instanceof Cu)return function(e,t){if(!Ou(t.Zc))throw t.oa(`${e._methodName}() can only be used with update() and set()`);if(!t.path)throw t.oa(`${e._methodName}() is not currently supported inside arrays`);const n=e._toFieldTransform(t);n&&t.fieldTransforms.push(n)}(e,t),null;if(void 0===e&&t.ignoreUndefinedProperties)return null;if(t.path&&t.fieldMask.push(t.path),e instanceof Array){if(t.settings.na&&4!==t.Zc)throw t.oa("Nested arrays are not supported");return function(e,t){const n=[];let r=0;for(const i of e){let e=Lu(i,t.ra(r));null==e&&(e={nullValue:"NULL_VALUE"}),n.push(e),r++}return{arrayValue:{values:n}}}(e,t)}return function(e,t){if(null===(e=(0,a.m9)(e)))return{nullValue:"NULL_VALUE"};if("number"==typeof e)return bs(t.wt,e);if("boolean"==typeof e)return{booleanValue:e};if("string"==typeof e)return{stringValue:e};if(e instanceof Date){const n=Hr.fromDate(e);return{timestampValue:ko(t.wt,n)}}if(e instanceof Hr){const n=new Hr(e.seconds,1e3*Math.floor(e.nanoseconds/1e3));return{timestampValue:ko(t.wt,n)}}if(e instanceof Tu)return{geoPointValue:{latitude:e.latitude,longitude:e.longitude}};if(e instanceof _u)return{bytesValue:So(t.wt,e._byteString)};if(e instanceof du){const n=t.databaseId,r=e.firestore._databaseId;if(!r.isEqual(n))throw t.oa(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:No(e.firestore._databaseId||t.databaseId,e._key.path)}}throw t.oa(`Unsupported field value: ${uu(e)}`)}(e,t)}function Mu(e,t){const n={};return oi(e)?t.path&&t.path.length>0&&t.fieldMask.push(t.path):si(e,((e,r)=>{const i=Lu(r,t.ea(e));null!=i&&(n[e]=i)})),{mapValue:{fields:n}}}function Fu(e){return!("object"!=typeof e||null===e||e instanceof Array||e instanceof Date||e instanceof Hr||e instanceof Tu||e instanceof _u||e instanceof du||e instanceof Cu)}function Uu(e,t,n){if(!Fu(n)||!function(e){return"object"==typeof e&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}(n)){const r=uu(n);throw"an object"===r?t.oa(e+" a custom object"):t.oa(e+" "+r)}}function Vu(e,t,n){if((t=(0,a.m9)(t))instanceof Eu)return t._internalPath;if("string"==typeof t)return zu(e,t);throw Bu("Field path arguments must be of type string or ",e,!1,void 0,n)}const ju=new RegExp("[~\\*/\\[\\]]");function zu(e,t,n){if(t.search(ju)>=0)throw Bu(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`,e,!1,void 0,n);try{return new Eu(...t.split("."))._internalPath}catch(r){throw Bu(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,e,!1,void 0,n)}}function Bu(e,t,n,r,i){const s=r&&!r.isEmpty(),o=void 0!==i;let a=`Function ${t}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let l="";return(s||o)&&(l+=" (found",s&&(l+=` in field ${r}`),o&&(l+=` in document ${i}`),l+=")"),new xr(Nr.INVALID_ARGUMENT,a+e+l)}function $u(e,t){return e.some((e=>e.isEqual(t)))}class Hu{constructor(e,t,n,r,i){this._firestore=e,this._userDataWriter=t,this._key=n,this._document=r,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new du(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const e=new qu(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(e)}return this._userDataWriter.convertValue(this._document.data.value)}}get(e){if(this._document){const t=this._document.data.field(Wu("DocumentSnapshot.get",e));if(null!==t)return this._userDataWriter.convertValue(t)}}}class qu extends Hu{data(){return super.data()}}function Wu(e,t){return"string"==typeof t?zu(e,t):t instanceof Eu?t._internalPath:t._delegate._internalPath}class Ku{constructor(e,t){this.hasPendingWrites=e,this.fromCache=t}isEqual(e){return this.hasPendingWrites===e.hasPendingWrites&&this.fromCache===e.fromCache}}class Gu extends Hu{constructor(e,t,n,r,i,s){super(e,t,n,r,s),this._firestore=e,this._firestoreImpl=e,this.metadata=i}exists(){return super.exists()}data(e={}){if(this._document){if(this._converter){const t=new Qu(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(t,e)}return this._userDataWriter.convertValue(this._document.data.value,e.serverTimestamps)}}get(e,t={}){if(this._document){const n=this._document.data.field(Wu("DocumentSnapshot.get",e));if(null!==n)return this._userDataWriter.convertValue(n,t.serverTimestamps)}}}class Qu extends Gu{data(e={}){return super.data(e)}}function Ju(e){e=cu(e,du);const t=cu(e.firestore,vu);return su(bu(t),e._key).then((n=>function(e,t,n){const r=n.docs.get(t._key),i=new Xu(e);return new Gu(e,i,t._key,r,new Ku(n.hasPendingWrites,n.fromCache),t.converter)}(t,e,n)))}class Xu extends class{convertValue(e,t="none"){switch(ki(e)){case 0:return null;case 1:return e.booleanValue;case 2:return gi(e.integerValue||e.doubleValue);case 3:return this.convertTimestamp(e.timestampValue);case 4:return this.convertServerTimestamp(e,t);case 5:return e.stringValue;case 6:return this.convertBytes(yi(e.bytesValue));case 7:return this.convertReference(e.referenceValue);case 8:return this.convertGeoPoint(e.geoPointValue);case 9:return this.convertArray(e.arrayValue,t);case 10:return this.convertObject(e.mapValue,t);default:throw Sr()}}convertObject(e,t){const n={};return si(e.fields,((e,r)=>{n[e]=this.convertValue(r,t)})),n}convertGeoPoint(e){return new Tu(gi(e.latitude),gi(e.longitude))}convertArray(e,t){return(e.values||[]).map((e=>this.convertValue(e,t)))}convertServerTimestamp(e,t){switch(t){case"previous":const n=Ai(e);return null==n?null:this.convertValue(n,t);case"estimate":return this.convertTimestamp(bi(e));default:return null}}convertTimestamp(e){const t=mi(e);return new Hr(t.seconds,t.nanos)}convertDocumentKey(e,t){const n=Kr.fromString(e);Ir(Qo(n));const r=new Ei(n.get(1),n.get(3)),i=new Jr(n.popFirst(5));return r.isEqual(t)||Cr(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`),i}}{constructor(e){super(),this.firestore=e}convertBytes(e){return new _u(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new du(this.firestore,null,t)}}function Yu(e,t,n){e=cu(e,du);const r=cu(e.firestore,vu),i=function(e,t,n){let r;return r=e?n&&(n.merge||n.mergeFields)?e.toFirestore(t,n):e.toFirestore(t):t,r}(e.converter,t,n);return ec(r,[Du(Pu(r),"setDoc",e._key,i,null!==e.converter,n).toMutation(e._key,Rs.none())])}function Zu(e,t,n,...r){e=cu(e,du);const i=cu(e.firestore,vu),s=Pu(i);let o;return o="string"==typeof(t=(0,a.m9)(t))||t instanceof Eu?function(e,t,n,r,i,s){const o=e.aa(1,t,n),l=[Vu(t,r,n)],u=[i];if(s.length%2!=0)throw new xr(Nr.INVALID_ARGUMENT,`Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let e=0;e<s.length;e+=2)l.push(Vu(t,s[e])),u.push(s[e+1]);const c=[],h=ji.empty();for(let e=l.length-1;e>=0;--e)if(!$u(c,l[e])){const t=l[e];let n=u[e];n=(0,a.m9)(n);const r=o.ia(t);if(n instanceof Ru)c.push(t);else{const e=Lu(n,r);null!=e&&(c.push(t),h.set(t,e))}}const f=new fi(c);return new Iu(h,f,o.fieldTransforms)}(s,"updateDoc",e._key,t,n,r):function(e,t,n,r){const i=e.aa(1,t,n);Uu("Data must be an object, but it was:",i,r);const s=[],o=ji.empty();si(r,((e,r)=>{const l=zu(t,e,n);r=(0,a.m9)(r);const u=i.ia(l);if(r instanceof Ru)s.push(l);else{const e=Lu(r,u);null!=e&&(s.push(l),o.set(l,e))}}));const l=new fi(s);return new Iu(o,l,i.fieldTransforms)}(s,"updateDoc",e._key,t),ec(i,[o.toMutation(e._key,Rs.exists(!0))])}function ec(e,t){return function(e,t){const n=new Pr;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){const r=Xl(e);try{const e=await function(e,t){const n=Or(e),r=Hr.now(),i=t.reduce(((e,t)=>e.add(t.key)),co());let s,o;return n.persistence.runTransaction("Locally write mutations","readwrite",(e=>{let a=to(),l=co();return n.Ui.getEntries(e,i).next((e=>{a=e,a.forEach(((e,t)=>{t.isValidDocument()||(l=l.add(e))}))})).next((()=>n.localDocuments.getOverlayedDocuments(e,a))).next((i=>{s=i;const o=[];for(const e of t){const t=js(e,s.get(e.key).overlayedDocument);null!=t&&o.push(new $s(e.key,t,zi(t.value.mapValue),Rs.exists(!0)))}return n.mutationQueue.addMutationBatch(e,r,o,t)})).next((t=>{o=t;const r=t.applyToLocalDocumentSet(s,l);return n.documentOverlayCache.saveOverlays(e,t.batchId,r)}))})).then((()=>({batchId:o.batchId,changes:io(s)})))}(r.localStore,t);r.sharedClientState.addPendingMutation(e.batchId),function(e,t,n){let r=e.oc[e.currentUser.toKey()];r||(r=new ai(Br)),r=r.insert(t,n),e.oc[e.currentUser.toKey()]=r}(r,e.batchId,n),await Gl(r,e.changes),await sl(r.remoteStore)}catch(e){const t=vl(e,"Failed to persist write");n.reject(t)}}(await function(e){return ru(e).then((e=>e.syncEngine))}(e),t,n))),n.promise}(bu(e),t)}!function(e,t=!0){!function(e){br=e}(i.Jn),(0,i.Xd)(new s.wA("firestore",((e,{options:n})=>{const r=e.getProvider("app").getImmediate(),i=new vu(r,new Lr(e.getProvider("auth-internal")),new Vr(e.getProvider("app-check-internal")));return n=Object.assign({useFetchStreams:t},n),i._setSettings(n),i}),"PUBLIC")),(0,i.KN)(vr,"3.4.13",e),(0,i.KN)(vr,"3.4.13","esm2017")}()},5648:function(e,t,n){n.d(t,{Ep:function(){return u},aU:function(){return r},cP:function(){return c},lX:function(){return o}});var r,i=n(7462);!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));var s="beforeunload";function o(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,o=n.history;function h(){var e=n.location,t=e.pathname,r=e.search,i=e.hash,s=o.state||{};return[s.idx,{pathname:t,search:r,hash:i,state:s.usr||null,key:s.key||"default"}]}var f=null;n.addEventListener("popstate",(function(){if(f)v.call(f),f=null;else{var e=r.Pop,t=h(),n=t[0],i=t[1];if(v.length){if(null!=n){var s=m-n;s&&(f={action:e,location:i,retry:function(){C(-1*s)}},C(s))}}else _(e)}}));var d=r.Pop,p=h(),m=p[0],g=p[1],y=l(),v=l();function A(e){return"string"==typeof e?e:u(e)}function b(e,t){return void 0===t&&(t=null),(0,i.Z)({pathname:g.pathname,hash:"",search:""},"string"==typeof e?c(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function w(e,t){return[{usr:e.state,key:e.key,idx:t},A(e)]}function E(e,t,n){return!v.length||(v.call({action:e,location:t,retry:n}),!1)}function _(e){d=e;var t=h();m=t[0],g=t[1],y.call({action:d,location:g})}function C(e){o.go(e)}return null==m&&(m=0,o.replaceState((0,i.Z)({},o.state,{idx:m}),"")),{get action(){return d},get location(){return g},createHref:A,push:function e(t,i){var s=r.Push,a=b(t,i);if(E(s,a,(function(){e(t,i)}))){var l=w(a,m+1),u=l[0],c=l[1];try{o.pushState(u,"",c)}catch(e){n.location.assign(c)}_(s)}},replace:function e(t,n){var i=r.Replace,s=b(t,n);if(E(i,s,(function(){e(t,n)}))){var a=w(s,m),l=a[0],u=a[1];o.replaceState(l,"",u),_(i)}},go:C,back:function(){C(-1)},forward:function(){C(1)},listen:function(e){return y.push(e)},block:function(e){var t=v.push(e);return 1===v.length&&n.addEventListener(s,a),function(){t(),v.length||n.removeEventListener(s,a)}}}}function a(e){e.preventDefault(),e.returnValue=""}function l(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,i=void 0===r?"":r,s=e.hash,o=void 0===s?"":s;return i&&"?"!==i&&(n+="?"===i.charAt(0)?i:"?"+i),o&&"#"!==o&&(n+="#"===o.charAt(0)?o:"#"+o),n}function c(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}},8679:function(e,t,n){var r=n(1296),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},s={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function l(e){return r.isMemo(e)?o:a[e.$$typeof]||i}a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},a[r.Memo]=o;var u=Object.defineProperty,c=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var i=d(n);i&&i!==p&&e(t,i,r)}var o=c(n);h&&(o=o.concat(h(n)));for(var a=l(t),m=l(n),g=0;g<o.length;++g){var y=o[g];if(!(s[y]||r&&r[y]||m&&m[y]||a&&a[y])){var v=f(n,y);try{u(t,y,v)}catch(e){}}}}return t}},6103:function(e,t){var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,s=n?Symbol.for("react.fragment"):60107,o=n?Symbol.for("react.strict_mode"):60108,a=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,A=n?Symbol.for("react.responder"):60118,b=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case h:case s:case a:case o:case d:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case m:case l:return e;default:return t}}case i:return t}}}function E(e){return w(e)===h}t.AsyncMode=c,t.ConcurrentMode=h,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=f,t.Fragment=s,t.Lazy=g,t.Memo=m,t.Portal=i,t.Profiler=a,t.StrictMode=o,t.Suspense=d,t.isAsyncMode=function(e){return E(e)||w(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return w(e)===u},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===f},t.isFragment=function(e){return w(e)===s},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===a},t.isStrictMode=function(e){return w(e)===o},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===s||e===h||e===a||e===o||e===d||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===A||e.$$typeof===b||e.$$typeof===y)},t.typeOf=w},1296:function(e,t,n){e.exports=n(6103)},4448:function(e,t,n){var r=n(7294),i=n(3840);function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,a={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(a[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},p={};function m(e,t,n,r,i,s,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=o}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function A(e,t,n,r){var i=g.hasOwnProperty(t)?g[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!h.call(p,e)||!h.call(d,e)&&(f.test(e)?p[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),E=Symbol.for("react.portal"),_=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),T=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),S=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),x=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var M,F=Object.assign;function U(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var V=!1;function j(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),s=r.stack.split("\n"),o=i.length-1,a=s.length-1;1<=o&&0<=a&&i[o]!==s[a];)a--;for(;1<=o&&0<=a;o--,a--)if(i[o]!==s[a]){if(1!==o||1!==a)do{if(o--,0>--a||i[o]!==s[a]){var l="\n"+i[o].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=o&&0<=a);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function z(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case E:return"Portal";case T:return"Profiler";case C:return"StrictMode";case O:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case x:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,s=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,s.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&A(e,"checked",t,!1)}function Y(e,t){X(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(s(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(s(92));if(te(n)){if(1<n.length)throw Error(s(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function se(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ae(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,he=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(de).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var ye=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(s(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(s(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(s(62))}}function Ae(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,_e=null,Ce=null;function Te(e){if(e=Ai(e)){if("function"!=typeof Ee)throw Error(s(280));var t=e.stateNode;t&&(t=wi(t),Ee(e.stateNode,e.type,t))}}function ke(e){_e?Ce?Ce.push(e):Ce=[e]:_e=e}function Se(){if(_e){var e=_e,t=Ce;if(Ce=_e=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Ie(e,t){return e(t)}function Oe(){}var Ne=!1;function xe(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Ie(e,t,n)}finally{Ne=!1,(null!==_e||null!==Ce)&&(Oe(),Se())}}function Pe(e,t){var n=e.stateNode;if(null===n)return null;var r=wi(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(s(231,t,typeof n));return n}var De=!1;if(c)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){De=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(ce){De=!1}function Le(e,t,n,r,i,s,o,a,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Me=!1,Fe=null,Ue=!1,Ve=null,je={onError:function(e){Me=!0,Fe=e}};function ze(e,t,n,r,i,s,o,a,l){Me=!1,Fe=null,Le.apply(je,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Be(e)!==e)throw Error(s(188))}function qe(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(s(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return He(i),e;if(o===r)return He(i),t;o=o.sibling}throw Error(s(188))}if(n.return!==r.return)n=i,r=o;else{for(var a=!1,l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a)throw Error(s(189))}}if(n.alternate!==r)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ke=i.unstable_scheduleCallback,Ge=i.unstable_cancelCallback,Qe=i.unstable_shouldYield,Je=i.unstable_requestPaint,Xe=i.unstable_now,Ye=i.unstable_getCurrentPriorityLevel,Ze=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,st=null,ot=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(at(e)/lt|0)|0},at=Math.log,lt=Math.LN2,ut=64,ct=4194304;function ht(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,s=e.pingedLanes,o=268435455&n;if(0!==o){var a=o&~i;0!==a?r=ht(a):0!=(s&=o)&&(r=ht(s))}else 0!=(o=n&~i)?r=ht(o):0!==s&&(r=ht(s));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(s=t&-t)||16===i&&0!=(4194240&s)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-ot(t)),r|=e[n],t&=~i;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var At=0;function bt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Et,_t,Ct,Tt,kt=!1,St=[],It=null,Ot=null,Nt=null,xt=new Map,Pt=new Map,Dt=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":It=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":xt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pt.delete(t.pointerId)}}function Mt(e,t,n,r,i,s){return null===e||e.nativeEvent!==s?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:s,targetContainers:[i]},null!==t&&null!==(t=Ai(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Ft(e){var t=vi(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void Tt(e.priority,(function(){_t(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ut(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Ai(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);be=r,n.target.dispatchEvent(r),be=null,t.shift()}return!0}function Vt(e,t,n){Ut(e)&&n.delete(t)}function jt(){kt=!1,null!==It&&Ut(It)&&(It=null),null!==Ot&&Ut(Ot)&&(Ot=null),null!==Nt&&Ut(Nt)&&(Nt=null),xt.forEach(Vt),Pt.forEach(Vt)}function zt(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,jt)))}function Bt(e){function t(t){return zt(t,e)}if(0<St.length){zt(St[0],e);for(var n=1;n<St.length;n++){var r=St[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==It&&zt(It,e),null!==Ot&&zt(Ot,e),null!==Nt&&zt(Nt,e),xt.forEach(t),Pt.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Dt.shift()}var $t=b.ReactCurrentBatchConfig,Ht=!0;function qt(e,t,n,r){var i=At,s=$t.transition;$t.transition=null;try{At=1,Kt(e,t,n,r)}finally{At=i,$t.transition=s}}function Wt(e,t,n,r){var i=At,s=$t.transition;$t.transition=null;try{At=4,Kt(e,t,n,r)}finally{At=i,$t.transition=s}}function Kt(e,t,n,r){if(Ht){var i=Qt(e,t,n,r);if(null===i)Hr(e,t,r,Gt,n),Lt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return It=Mt(It,e,t,n,r,i),!0;case"dragenter":return Ot=Mt(Ot,e,t,n,r,i),!0;case"mouseover":return Nt=Mt(Nt,e,t,n,r,i),!0;case"pointerover":var s=i.pointerId;return xt.set(s,Mt(xt.get(s)||null,e,t,n,r,i)),!0;case"gotpointercapture":return s=i.pointerId,Pt.set(s,Mt(Pt.get(s)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Rt.indexOf(e)){for(;null!==i;){var s=Ai(i);if(null!==s&&wt(s),null===(s=Qt(e,t,n,r))&&Hr(e,t,r,Gt,n),s===i)break;i=s}null!==i&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Gt=null;function Qt(e,t,n,r){if(Gt=null,null!==(e=vi(e=we(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Yt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Yt,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,s=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[s-t];t++);return Zt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function sn(e){function t(t,n,r,i,s){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=s,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(i):i[o]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,an,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=sn(un),hn=F({},un,{view:0,detail:0}),fn=sn(hn),dn=F({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:an}}),pn=sn(dn),mn=sn(F({},dn,{dataTransfer:0})),gn=sn(F({},hn,{relatedTarget:0})),yn=sn(F({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=F({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),An=sn(vn),bn=sn(F({},un,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function Tn(){return Cn}var kn=F({},hn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Sn=sn(kn),In=sn(F({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(F({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tn})),Nn=sn(F({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),xn=F({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Pn=sn(xn),Dn=[9,13,27,32],Rn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Mn=c&&"TextEvent"in window&&!Ln,Fn=c&&(!Rn||Ln&&8<Ln&&11>=Ln),Un=String.fromCharCode(32),Vn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function qn(e,t,n,r){ke(r),0<(t=Wr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Kn=null;function Gn(e){Ur(e,0)}function Qn(e){if(K(bi(e)))return e}function Jn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Yn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Yn=Zn}else Yn=!1;Xn=Yn&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),Kn=Wn=null)}function nr(e){if("value"===e.propertyName&&Qn(Kn)){var t=[];qn(t,Kn,e,we(e)),xe(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Kn)}function sr(e,t){if("click"===e)return Qn(t)}function or(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!h.call(t,i)||!ar(e[i],t[i]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&hr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,s=Math.min(r.start,i);r=void 0===r.end?s:Math.min(r.end,i),!e.extend&&s>r&&(i=r,r=s,s=i),i=cr(n,s);var o=cr(n,r);i&&o&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),s>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,Ar=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Ar||null==gr||gr!==G(r)||(r="selectionStart"in(r=gr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Wr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},_r={},Cr={};function Tr(e){if(_r[e])return _r[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return _r[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var kr=Tr("animationend"),Sr=Tr("animationiteration"),Ir=Tr("animationstart"),Or=Tr("transitionend"),Nr=new Map,xr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Pr(e,t){Nr.set(e,t),l(t,[e])}for(var Dr=0;Dr<xr.length;Dr++){var Rr=xr[Dr];Pr(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Pr(kr,"onAnimationEnd"),Pr(Sr,"onAnimationIteration"),Pr(Ir,"onAnimationStart"),Pr("dblclick","onDoubleClick"),Pr("focusin","onFocus"),Pr("focusout","onBlur"),Pr(Or,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Fr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,a,l,u){if(ze.apply(this,arguments),Me){if(!Me)throw Error(s(198));var c=Fe;Me=!1,Fe=null,Ue||(Ue=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function Ur(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var s=void 0;if(t)for(var o=r.length-1;0<=o;o--){var a=r[o],l=a.instance,u=a.currentTarget;if(a=a.listener,l!==s&&i.isPropagationStopped())break e;Fr(i,a,u),s=l}else for(o=0;o<r.length;o++){if(l=(a=r[o]).instance,u=a.currentTarget,a=a.listener,l!==s&&i.isPropagationStopped())break e;Fr(i,a,u),s=l}}}if(Ue)throw e=Ve,Ue=!1,Ve=null,e}function Vr(e,t){var n=t[mi];void 0===n&&(n=t[mi]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var zr="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[zr]){e[zr]=!0,o.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[zr]||(t[zr]=!0,jr("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Jt(t)){case 1:var i=qt;break;case 4:i=Wt;break;default:i=Kt}n=i.bind(null,t,n,e),i=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,i){var s=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var a=r.stateNode.containerInfo;if(a===i||8===a.nodeType&&a.parentNode===i)break;if(4===o)for(o=r.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;o=o.return}for(;null!==a;){if(null===(o=vi(a)))return;if(5===(l=o.tag)||6===l){r=s=o;continue e}a=a.parentNode}}r=r.return}xe((function(){var r=s,i=we(n),o=[];e:{var a=Nr.get(e);if(void 0!==a){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Sn;break;case"focusin":u="focus",l=gn;break;case"focusout":u="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case kr:case Sr:case Ir:l=yn;break;case Or:l=Nn;break;case"scroll":l=fn;break;case"wheel":l=Pn;break;case"copy":case"cut":case"paste":l=An;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=In}var c=0!=(4&t),h=!c&&"scroll"===e,f=c?null!==a?a+"Capture":null:a;c=[];for(var d,p=r;null!==p;){var m=(d=p).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==f&&null!=(m=Pe(p,f))&&c.push(qr(p,m,d))),h)break;p=p.return}0<c.length&&(a=new l(a,u,null,n,i),o.push({event:a,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(a="mouseover"===e||"pointerover"===e)||n===be||!(u=n.relatedTarget||n.fromElement)||!vi(u)&&!u[pi])&&(l||a)&&(a=i.window===i?i:(a=i.ownerDocument)?a.defaultView||a.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?vi(u):null)&&(u!==(h=Be(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=pn,m="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=In,m="onPointerLeave",f="onPointerEnter",p="pointer"),h=null==l?a:bi(l),d=null==u?a:bi(u),(a=new c(m,p+"leave",l,n,i)).target=h,a.relatedTarget=d,m=null,vi(i)===r&&((c=new c(f,p+"enter",u,n,i)).target=d,c.relatedTarget=h,m=c),h=m,l&&u)e:{for(f=u,p=0,d=c=l;d;d=Kr(d))p++;for(d=0,m=f;m;m=Kr(m))d++;for(;0<p-d;)c=Kr(c),p--;for(;0<d-p;)f=Kr(f),d--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=Kr(c),f=Kr(f)}c=null}else c=null;null!==l&&Gr(o,a,l,c,!1),null!==u&&null!==h&&Gr(o,h,u,c,!0)}if("select"===(l=(a=r?bi(r):window).nodeName&&a.nodeName.toLowerCase())||"input"===l&&"file"===a.type)var g=Jn;else if(Hn(a))if(Xn)g=or;else{g=ir;var y=rr}else(l=a.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(g=sr);switch(g&&(g=g(e,r))?qn(o,g,n,i):(y&&y(e,a,r),"focusout"===e&&(y=a._wrapperState)&&y.controlled&&"number"===a.type&&ee(a,"number",a.value)),y=r?bi(r):window,e){case"focusin":(Hn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":Ar=!0;break;case"contextmenu":case"mouseup":case"dragend":Ar=!1,br(o,n,i);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":br(o,n,i)}var v;if(Rn)e:{switch(e){case"compositionstart":var A="onCompositionStart";break e;case"compositionend":A="onCompositionEnd";break e;case"compositionupdate":A="onCompositionUpdate";break e}A=void 0}else Bn?jn(e,n)&&(A="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(A="onCompositionStart");A&&(Fn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==A?"onCompositionEnd"===A&&Bn&&(v=en()):(Yt="value"in(Xt=i)?Xt.value:Xt.textContent,Bn=!0)),0<(y=Wr(r,A)).length&&(A=new bn(A,e,null,n,i),o.push({event:A,listeners:y}),(v||null!==(v=zn(n)))&&(A.data=v))),(v=Mn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Vn=!0,Un);case"textInput":return(e=t.data)===Un&&Vn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Rn&&jn(e,t)?(e=en(),Zt=Yt=Xt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(i=new bn("onBeforeInput","beforeinput",null,n,i),o.push({event:i,listeners:r}),i.data=v)}Ur(o,t)}))}function qr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,s=i.stateNode;5===i.tag&&null!==s&&(i=s,null!=(s=Pe(e,n))&&r.unshift(qr(e,s,i)),null!=(s=Pe(e,t))&&r.push(qr(e,s,i))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,i){for(var s=t._reactName,o=[];null!==n&&n!==r;){var a=n,l=a.alternate,u=a.stateNode;if(null!==l&&l===r)break;5===a.tag&&null!==u&&(a=u,i?null!=(l=Pe(n,s))&&o.unshift(qr(n,l,a)):i||null!=(l=Pe(n,s))&&o.push(qr(n,l,a))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Qr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Jr,"")}function Yr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(s(425))}function Zr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,si="function"==typeof Promise?Promise:void 0,oi="function"==typeof queueMicrotask?queueMicrotask:void 0!==si?function(e){return si.resolve(null).then(e).catch(ai)}:ri;function ai(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);Bt(t)}function ui(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var hi=Math.random().toString(36).slice(2),fi="__reactFiber$"+hi,di="__reactProps$"+hi,pi="__reactContainer$"+hi,mi="__reactEvents$"+hi,gi="__reactListeners$"+hi,yi="__reactHandles$"+hi;function vi(e){var t=e[fi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pi]||n[fi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ci(e);null!==e;){if(n=e[fi])return n;e=ci(e)}return t}n=(e=n).parentNode}return null}function Ai(e){return!(e=e[fi]||e[pi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function bi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(s(33))}function wi(e){return e[di]||null}var Ei=[],_i=-1;function Ci(e){return{current:e}}function Ti(e){0>_i||(e.current=Ei[_i],Ei[_i]=null,_i--)}function ki(e,t){_i++,Ei[_i]=e.current,e.current=t}var Si={},Ii=Ci(Si),Oi=Ci(!1),Ni=Si;function xi(e,t){var n=e.type.contextTypes;if(!n)return Si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,s={};for(i in n)s[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=s),s}function Pi(e){return null!=e.childContextTypes}function Di(){Ti(Oi),Ti(Ii)}function Ri(e,t,n){if(Ii.current!==Si)throw Error(s(168));ki(Ii,t),ki(Oi,n)}function Li(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(s(108,$(e)||"Unknown",i));return F({},n,r)}function Mi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Si,Ni=Ii.current,ki(Ii,e),ki(Oi,Oi.current),!0}function Fi(e,t,n){var r=e.stateNode;if(!r)throw Error(s(169));n?(e=Li(e,t,Ni),r.__reactInternalMemoizedMergedChildContext=e,Ti(Oi),Ti(Ii),ki(Ii,e)):Ti(Oi),ki(Oi,n)}var Ui=null,Vi=!1,ji=!1;function zi(e){null===Ui?Ui=[e]:Ui.push(e)}function Bi(){if(!ji&&null!==Ui){ji=!0;var e=0,t=At;try{var n=Ui;for(At=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ui=null,Vi=!1}catch(t){throw null!==Ui&&(Ui=Ui.slice(e+1)),Ke(Ze,Bi),t}finally{At=t,ji=!1}}return null}var $i=[],Hi=0,qi=null,Wi=0,Ki=[],Gi=0,Qi=null,Ji=1,Xi="";function Yi(e,t){$i[Hi++]=Wi,$i[Hi++]=qi,qi=e,Wi=t}function Zi(e,t,n){Ki[Gi++]=Ji,Ki[Gi++]=Xi,Ki[Gi++]=Qi,Qi=e;var r=Ji;e=Xi;var i=32-ot(r)-1;r&=~(1<<i),n+=1;var s=32-ot(t)+i;if(30<s){var o=i-i%5;s=(r&(1<<o)-1).toString(32),r>>=o,i-=o,Ji=1<<32-ot(t)+i|n<<i|r,Xi=s+e}else Ji=1<<s|n<<i|r,Xi=e}function es(e){null!==e.return&&(Yi(e,1),Zi(e,1,0))}function ts(e){for(;e===qi;)qi=$i[--Hi],$i[Hi]=null,Wi=$i[--Hi],$i[Hi]=null;for(;e===Qi;)Qi=Ki[--Gi],Ki[Gi]=null,Xi=Ki[--Gi],Ki[Gi]=null,Ji=Ki[--Gi],Ki[Gi]=null}var ns=null,rs=null,is=!1,ss=null;function os(e,t){var n=xu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function as(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ns=e,rs=ui(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ns=e,rs=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qi?{id:Ji,overflow:Xi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=xu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ns=e,rs=null,!0);default:return!1}}function ls(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function us(e){if(is){var t=rs;if(t){var n=t;if(!as(e,t)){if(ls(e))throw Error(s(418));t=ui(n.nextSibling);var r=ns;t&&as(e,t)?os(r,n):(e.flags=-4097&e.flags|2,is=!1,ns=e)}}else{if(ls(e))throw Error(s(418));e.flags=-4097&e.flags|2,is=!1,ns=e}}}function cs(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ns=e}function hs(e){if(e!==ns)return!1;if(!is)return cs(e),is=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=rs)){if(ls(e))throw fs(),Error(s(418));for(;t;)os(e,t),t=ui(t.nextSibling)}if(cs(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){rs=ui(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}rs=null}}else rs=ns?ui(e.stateNode.nextSibling):null;return!0}function fs(){for(var e=rs;e;)e=ui(e.nextSibling)}function ds(){rs=ns=null,is=!1}function ps(e){null===ss?ss=[e]:ss.push(e)}var ms=b.ReactCurrentBatchConfig;function gs(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ys=Ci(null),vs=null,As=null,bs=null;function ws(){bs=As=vs=null}function Es(e){var t=ys.current;Ti(ys),e._currentValue=t}function _s(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Cs(e,t){vs=e,bs=As=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ba=!0),e.firstContext=null)}function Ts(e){var t=e._currentValue;if(bs!==e)if(e={context:e,memoizedValue:t,next:null},null===As){if(null===vs)throw Error(s(308));As=e,vs.dependencies={lanes:0,firstContext:e}}else As=As.next=e;return t}var ks=null;function Ss(e){null===ks?ks=[e]:ks.push(e)}function Is(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,Ss(t)):(n.next=i.next,i.next=n),t.interleaved=n,Os(e,r)}function Os(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ns=!1;function xs(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ps(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ds(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Rs(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Il)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Os(e,n)}return null===(i=r.interleaved)?(t.next=t,Ss(r)):(t.next=i.next,i.next=t),r.interleaved=t,Os(e,n)}function Ls(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Ms(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,s=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===s?i=s=o:s=s.next=o,n=n.next}while(null!==n);null===s?i=s=t:s=s.next=t}else i=s=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:s,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fs(e,t,n,r){var i=e.updateQueue;Ns=!1;var s=i.firstBaseUpdate,o=i.lastBaseUpdate,a=i.shared.pending;if(null!==a){i.shared.pending=null;var l=a,u=l.next;l.next=null,null===o?s=u:o.next=u,o=l;var c=e.alternate;null!==c&&(a=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===a?c.firstBaseUpdate=u:a.next=u,c.lastBaseUpdate=l)}if(null!==s){var h=i.baseState;for(o=0,c=u=l=null,a=s;;){var f=a.lane,d=a.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:d,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,m=a;switch(f=t,d=n,m.tag){case 1:if("function"==typeof(p=m.payload)){h=p.call(d,h,f);break e}h=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=m.payload)?p.call(d,h,f):p))break e;h=F({},h,f);break e;case 2:Ns=!0}}null!==a.callback&&0!==a.lane&&(e.flags|=64,null===(f=i.effects)?i.effects=[a]:f.push(a))}else d={eventTime:d,lane:f,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===c?(u=c=d,l=h):c=c.next=d,o|=f;if(null===(a=a.next)){if(null===(a=i.shared.pending))break;a=(f=a).next,f.next=null,i.lastBaseUpdate=f,i.shared.pending=null}}if(null===c&&(l=h),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{o|=i.lane,i=i.next}while(i!==t)}else null===s&&(i.shared.lanes=0);Ml|=o,e.lanes=o,e.memoizedState=h}}function Us(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(s(191,i));i.call(r)}}}var Vs=(new r.Component).refs;function js(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var zs={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),s=Ds(r,i);s.payload=t,null!=n&&(s.callback=n),null!==(t=Rs(e,s,i))&&(nu(t,e,i,r),Ls(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),s=Ds(r,i);s.tag=1,s.payload=t,null!=n&&(s.callback=n),null!==(t=Rs(e,s,i))&&(nu(t,e,i,r),Ls(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),i=Ds(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=Rs(e,i,r))&&(nu(t,e,r,n),Ls(t,e,r))}};function Bs(e,t,n,r,i,s,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,s,o):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,s))}function $s(e,t,n){var r=!1,i=Si,s=t.contextType;return"object"==typeof s&&null!==s?s=Ts(s):(i=Pi(t)?Ni:Ii.current,s=(r=null!=(r=t.contextTypes))?xi(e,i):Si),t=new t(n,s),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=zs,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=s),t}function Hs(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&zs.enqueueReplaceState(t,t.state,null)}function qs(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Vs,xs(e);var s=t.contextType;"object"==typeof s&&null!==s?i.context=Ts(s):(s=Pi(t)?Ni:Ii.current,i.context=xi(e,s)),i.state=e.memoizedState,"function"==typeof(s=t.getDerivedStateFromProps)&&(js(e,t,s,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&zs.enqueueReplaceState(i,i.state,null),Fs(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ws(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var r=n.stateNode}if(!r)throw Error(s(147,e));var i=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=i.refs;t===Vs&&(t=i.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(s(284));if(!n._owner)throw Error(s(290,e))}return e}function Ks(e,t){throw e=Object.prototype.toString.call(t),Error(s(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Gs(e){return(0,e._init)(e._payload)}function Qs(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Du(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function a(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Fu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var s=n.type;return s===_?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===P&&Gs(s)===t.type)?((r=i(t,n.props)).ref=Ws(e,t,n),r.return=e,r):((r=Ru(n.type,n.key,n.props,null,e.mode,r)).ref=Ws(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Uu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function h(e,t,n,r,s){return null===t||7!==t.tag?((t=Lu(n,e.mode,r,s)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ru(t.type,t.key,t.props,null,e.mode,n)).ref=Ws(e,null,t),n.return=e,n;case E:return(t=Uu(t,e.mode,n)).return=e,t;case P:return f(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Lu(t,e.mode,n,null)).return=e,t;Ks(e,t)}return null}function d(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?u(e,t,n,r):null;case E:return n.key===i?c(e,t,n,r):null;case P:return d(e,t,(i=n._init)(n._payload),r)}if(te(n)||L(n))return null!==i?null:h(e,t,n,r,null);Ks(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case P:return p(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||L(r))return h(t,e=e.get(n)||null,r,i,null);Ks(t,r)}return null}function m(i,s,a,l){for(var u=null,c=null,h=s,m=s=0,g=null;null!==h&&m<a.length;m++){h.index>m?(g=h,h=null):g=h.sibling;var y=d(i,h,a[m],l);if(null===y){null===h&&(h=g);break}e&&h&&null===y.alternate&&t(i,h),s=o(y,s,m),null===c?u=y:c.sibling=y,c=y,h=g}if(m===a.length)return n(i,h),is&&Yi(i,m),u;if(null===h){for(;m<a.length;m++)null!==(h=f(i,a[m],l))&&(s=o(h,s,m),null===c?u=h:c.sibling=h,c=h);return is&&Yi(i,m),u}for(h=r(i,h);m<a.length;m++)null!==(g=p(h,i,m,a[m],l))&&(e&&null!==g.alternate&&h.delete(null===g.key?m:g.key),s=o(g,s,m),null===c?u=g:c.sibling=g,c=g);return e&&h.forEach((function(e){return t(i,e)})),is&&Yi(i,m),u}function g(i,a,l,u){var c=L(l);if("function"!=typeof c)throw Error(s(150));if(null==(l=c.call(l)))throw Error(s(151));for(var h=c=null,m=a,g=a=0,y=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var A=d(i,m,v.value,u);if(null===A){null===m&&(m=y);break}e&&m&&null===A.alternate&&t(i,m),a=o(A,a,g),null===h?c=A:h.sibling=A,h=A,m=y}if(v.done)return n(i,m),is&&Yi(i,g),c;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=f(i,v.value,u))&&(a=o(v,a,g),null===h?c=v:h.sibling=v,h=v);return is&&Yi(i,g),c}for(m=r(i,m);!v.done;g++,v=l.next())null!==(v=p(m,i,g,v.value,u))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),a=o(v,a,g),null===h?c=v:h.sibling=v,h=v);return e&&m.forEach((function(e){return t(i,e)})),is&&Yi(i,g),c}return function e(r,s,o,l){if("object"==typeof o&&null!==o&&o.type===_&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var u=o.key,c=s;null!==c;){if(c.key===u){if((u=o.type)===_){if(7===c.tag){n(r,c.sibling),(s=i(c,o.props.children)).return=r,r=s;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===P&&Gs(u)===c.type){n(r,c.sibling),(s=i(c,o.props)).ref=Ws(r,c,o),s.return=r,r=s;break e}n(r,c);break}t(r,c),c=c.sibling}o.type===_?((s=Lu(o.props.children,r.mode,l,o.key)).return=r,r=s):((l=Ru(o.type,o.key,o.props,null,r.mode,l)).ref=Ws(r,s,o),l.return=r,r=l)}return a(r);case E:e:{for(c=o.key;null!==s;){if(s.key===c){if(4===s.tag&&s.stateNode.containerInfo===o.containerInfo&&s.stateNode.implementation===o.implementation){n(r,s.sibling),(s=i(s,o.children||[])).return=r,r=s;break e}n(r,s);break}t(r,s),s=s.sibling}(s=Uu(o,r.mode,l)).return=r,r=s}return a(r);case P:return e(r,s,(c=o._init)(o._payload),l)}if(te(o))return m(r,s,o,l);if(L(o))return g(r,s,o,l);Ks(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==s&&6===s.tag?(n(r,s.sibling),(s=i(s,o)).return=r,r=s):(n(r,s),(s=Fu(o,r.mode,l)).return=r,r=s),a(r)):n(r,s)}}var Js=Qs(!0),Xs=Qs(!1),Ys={},Zs=Ci(Ys),eo=Ci(Ys),to=Ci(Ys);function no(e){if(e===Ys)throw Error(s(174));return e}function ro(e,t){switch(ki(to,t),ki(eo,e),ki(Zs,Ys),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ti(Zs),ki(Zs,t)}function io(){Ti(Zs),Ti(eo),Ti(to)}function so(e){no(to.current);var t=no(Zs.current),n=le(t,e.type);t!==n&&(ki(eo,e),ki(Zs,n))}function oo(e){eo.current===e&&(Ti(Zs),Ti(eo))}var ao=Ci(0);function lo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var uo=[];function co(){for(var e=0;e<uo.length;e++)uo[e]._workInProgressVersionPrimary=null;uo.length=0}var ho=b.ReactCurrentDispatcher,fo=b.ReactCurrentBatchConfig,po=0,mo=null,go=null,yo=null,vo=!1,Ao=!1,bo=0,wo=0;function Eo(){throw Error(s(321))}function _o(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function Co(e,t,n,r,i,o){if(po=o,mo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ho.current=null===e||null===e.memoizedState?aa:la,e=n(r,i),Ao){o=0;do{if(Ao=!1,bo=0,25<=o)throw Error(s(301));o+=1,yo=go=null,t.updateQueue=null,ho.current=ua,e=n(r,i)}while(Ao)}if(ho.current=oa,t=null!==go&&null!==go.next,po=0,yo=go=mo=null,vo=!1,t)throw Error(s(300));return e}function To(){var e=0!==bo;return bo=0,e}function ko(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yo?mo.memoizedState=yo=e:yo=yo.next=e,yo}function So(){if(null===go){var e=mo.alternate;e=null!==e?e.memoizedState:null}else e=go.next;var t=null===yo?mo.memoizedState:yo.next;if(null!==t)yo=t,go=e;else{if(null===e)throw Error(s(310));e={memoizedState:(go=e).memoizedState,baseState:go.baseState,baseQueue:go.baseQueue,queue:go.queue,next:null},null===yo?mo.memoizedState=yo=e:yo=yo.next=e}return yo}function Io(e,t){return"function"==typeof t?t(e):t}function Oo(e){var t=So(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=go,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var a=i.next;i.next=o.next,o.next=a}r.baseQueue=i=o,n.pending=null}if(null!==i){o=i.next,r=r.baseState;var l=a=null,u=null,c=o;do{var h=c.lane;if((po&h)===h)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:h,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,mo.lanes|=h,Ml|=h}c=c.next}while(null!==c&&c!==o);null===u?a=r:u.next=l,ar(r,t.memoizedState)||(ba=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{o=i.lane,mo.lanes|=o,Ml|=o,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function No(e){var t=So(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var a=i=i.next;do{o=e(o,a.action),a=a.next}while(a!==i);ar(o,t.memoizedState)||(ba=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function xo(){}function Po(e,t){var n=mo,r=So(),i=t(),o=!ar(r.memoizedState,i);if(o&&(r.memoizedState=i,ba=!0),r=r.queue,Ho(Lo.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==yo&&1&yo.memoizedState.tag){if(n.flags|=2048,Vo(9,Ro.bind(null,n,r,i,t),void 0,null),null===Ol)throw Error(s(349));0!=(30&po)||Do(n,t,i)}return i}function Do(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mo.updateQueue)?(t={lastEffect:null,stores:null},mo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ro(e,t,n,r){t.value=n,t.getSnapshot=r,Mo(t)&&Fo(e)}function Lo(e,t,n){return n((function(){Mo(t)&&Fo(e)}))}function Mo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ar(e,n)}catch(e){return!0}}function Fo(e){var t=Os(e,1);null!==t&&nu(t,e,1,-1)}function Uo(e){var t=ko();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Io,lastRenderedState:e},t.queue=e,e=e.dispatch=na.bind(null,mo,e),[t.memoizedState,e]}function Vo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mo.updateQueue)?(t={lastEffect:null,stores:null},mo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function jo(){return So().memoizedState}function zo(e,t,n,r){var i=ko();mo.flags|=e,i.memoizedState=Vo(1|t,n,void 0,void 0===r?null:r)}function Bo(e,t,n,r){var i=So();r=void 0===r?null:r;var s=void 0;if(null!==go){var o=go.memoizedState;if(s=o.destroy,null!==r&&_o(r,o.deps))return void(i.memoizedState=Vo(t,n,s,r))}mo.flags|=e,i.memoizedState=Vo(1|t,n,s,r)}function $o(e,t){return zo(8390656,8,e,t)}function Ho(e,t){return Bo(2048,8,e,t)}function qo(e,t){return Bo(4,2,e,t)}function Wo(e,t){return Bo(4,4,e,t)}function Ko(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Go(e,t,n){return n=null!=n?n.concat([e]):null,Bo(4,4,Ko.bind(null,t,e),n)}function Qo(){}function Jo(e,t){var n=So();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&_o(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xo(e,t){var n=So();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&_o(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Yo(e,t,n){return 0==(21&po)?(e.baseState&&(e.baseState=!1,ba=!0),e.memoizedState=n):(ar(n,t)||(n=mt(),mo.lanes|=n,Ml|=n,e.baseState=!0),t)}function Zo(e,t){var n=At;At=0!==n&&4>n?n:4,e(!0);var r=fo.transition;fo.transition={};try{e(!1),t()}finally{At=n,fo.transition=r}}function ea(){return So().memoizedState}function ta(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ra(e)?ia(t,n):null!==(n=Is(e,t,n,r))&&(nu(n,e,r,eu()),sa(n,t,r))}function na(e,t,n){var r=tu(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ra(e))ia(t,i);else{var s=e.alternate;if(0===e.lanes&&(null===s||0===s.lanes)&&null!==(s=t.lastRenderedReducer))try{var o=t.lastRenderedState,a=s(o,n);if(i.hasEagerState=!0,i.eagerState=a,ar(a,o)){var l=t.interleaved;return null===l?(i.next=i,Ss(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Is(e,t,i,r))&&(nu(n,e,r,i=eu()),sa(n,t,r))}}function ra(e){var t=e.alternate;return e===mo||null!==t&&t===mo}function ia(e,t){Ao=vo=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function sa(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var oa={readContext:Ts,useCallback:Eo,useContext:Eo,useEffect:Eo,useImperativeHandle:Eo,useInsertionEffect:Eo,useLayoutEffect:Eo,useMemo:Eo,useReducer:Eo,useRef:Eo,useState:Eo,useDebugValue:Eo,useDeferredValue:Eo,useTransition:Eo,useMutableSource:Eo,useSyncExternalStore:Eo,useId:Eo,unstable_isNewReconciler:!1},aa={readContext:Ts,useCallback:function(e,t){return ko().memoizedState=[e,void 0===t?null:t],e},useContext:Ts,useEffect:$o,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,zo(4194308,4,Ko.bind(null,t,e),n)},useLayoutEffect:function(e,t){return zo(4194308,4,e,t)},useInsertionEffect:function(e,t){return zo(4,2,e,t)},useMemo:function(e,t){var n=ko();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ko();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ta.bind(null,mo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ko().memoizedState=e},useState:Uo,useDebugValue:Qo,useDeferredValue:function(e){return ko().memoizedState=e},useTransition:function(){var e=Uo(!1),t=e[0];return e=Zo.bind(null,e[1]),ko().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mo,i=ko();if(is){if(void 0===n)throw Error(s(407));n=n()}else{if(n=t(),null===Ol)throw Error(s(349));0!=(30&po)||Do(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,$o(Lo.bind(null,r,o,e),[e]),r.flags|=2048,Vo(9,Ro.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=ko(),t=Ol.identifierPrefix;if(is){var n=Xi;t=":"+t+"R"+(n=(Ji&~(1<<32-ot(Ji)-1)).toString(32)+n),0<(n=bo++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wo++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},la={readContext:Ts,useCallback:Jo,useContext:Ts,useEffect:Ho,useImperativeHandle:Go,useInsertionEffect:qo,useLayoutEffect:Wo,useMemo:Xo,useReducer:Oo,useRef:jo,useState:function(){return Oo(Io)},useDebugValue:Qo,useDeferredValue:function(e){return Yo(So(),go.memoizedState,e)},useTransition:function(){return[Oo(Io)[0],So().memoizedState]},useMutableSource:xo,useSyncExternalStore:Po,useId:ea,unstable_isNewReconciler:!1},ua={readContext:Ts,useCallback:Jo,useContext:Ts,useEffect:Ho,useImperativeHandle:Go,useInsertionEffect:qo,useLayoutEffect:Wo,useMemo:Xo,useReducer:No,useRef:jo,useState:function(){return No(Io)},useDebugValue:Qo,useDeferredValue:function(e){var t=So();return null===go?t.memoizedState=e:Yo(t,go.memoizedState,e)},useTransition:function(){return[No(Io)[0],So().memoizedState]},useMutableSource:xo,useSyncExternalStore:Po,useId:ea,unstable_isNewReconciler:!1};function ca(e,t){try{var n="",r=t;do{n+=z(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function ha(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fa(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var da="function"==typeof WeakMap?WeakMap:Map;function pa(e,t,n){(n=Ds(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hl||(Hl=!0,ql=r),fa(0,t)},n}function ma(e,t,n){(n=Ds(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){fa(0,t)}}var s=e.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(n.callback=function(){fa(0,t),"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ga(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new da;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Tu.bind(null,e,t,n),t.then(e,e))}function ya(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function va(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ds(-1,1)).tag=2,Rs(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var Aa=b.ReactCurrentOwner,ba=!1;function wa(e,t,n,r){t.child=null===e?Xs(t,null,n,r):Js(t,e.child,n,r)}function Ea(e,t,n,r,i){n=n.render;var s=t.ref;return Cs(t,i),r=Co(e,t,n,r,s,i),n=To(),null===e||ba?(is&&n&&es(t),t.flags|=1,wa(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ha(e,t,i))}function _a(e,t,n,r,i){if(null===e){var s=n.type;return"function"!=typeof s||Pu(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ru(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,Ca(e,t,s,r,i))}if(s=e.child,0==(e.lanes&i)){var o=s.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)return Ha(e,t,i)}return t.flags|=1,(e=Du(s,r)).ref=t.ref,e.return=t,t.child=e}function Ca(e,t,n,r,i){if(null!==e){var s=e.memoizedProps;if(lr(s,r)&&e.ref===t.ref){if(ba=!1,t.pendingProps=r=s,0==(e.lanes&i))return t.lanes=e.lanes,Ha(e,t,i);0!=(131072&e.flags)&&(ba=!0)}}return Sa(e,t,n,r,i)}function Ta(e,t,n){var r=t.pendingProps,i=r.children,s=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ki(Dl,Pl),Pl|=n;else{if(0==(1073741824&n))return e=null!==s?s.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ki(Dl,Pl),Pl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==s?s.baseLanes:n,ki(Dl,Pl),Pl|=r}else null!==s?(r=s.baseLanes|n,t.memoizedState=null):r=n,ki(Dl,Pl),Pl|=r;return wa(e,t,i,n),t.child}function ka(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Sa(e,t,n,r,i){var s=Pi(n)?Ni:Ii.current;return s=xi(t,s),Cs(t,i),n=Co(e,t,n,r,s,i),r=To(),null===e||ba?(is&&r&&es(t),t.flags|=1,wa(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ha(e,t,i))}function Ia(e,t,n,r,i){if(Pi(n)){var s=!0;Mi(t)}else s=!1;if(Cs(t,i),null===t.stateNode)$a(e,t),$s(t,n,r),qs(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,a=t.memoizedProps;o.props=a;var l=o.context,u=n.contextType;u="object"==typeof u&&null!==u?Ts(u):xi(t,u=Pi(n)?Ni:Ii.current);var c=n.getDerivedStateFromProps,h="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;h||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(a!==r||l!==u)&&Hs(t,o,r,u),Ns=!1;var f=t.memoizedState;o.state=f,Fs(t,r,o,i),l=t.memoizedState,a!==r||f!==l||Oi.current||Ns?("function"==typeof c&&(js(t,n,c,r),l=t.memoizedState),(a=Ns||Bs(t,n,a,r,f,l,u))?(h||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=u,r=a):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Ps(e,t),a=t.memoizedProps,u=t.type===t.elementType?a:gs(t.type,a),o.props=u,h=t.pendingProps,f=o.context,l="object"==typeof(l=n.contextType)&&null!==l?Ts(l):xi(t,l=Pi(n)?Ni:Ii.current);var d=n.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(a!==h||f!==l)&&Hs(t,o,r,l),Ns=!1,f=t.memoizedState,o.state=f,Fs(t,r,o,i);var p=t.memoizedState;a!==h||f!==p||Oi.current||Ns?("function"==typeof d&&(js(t,n,d,r),p=t.memoizedState),(u=Ns||Bs(t,n,u,r,f,p,l)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=l,r=u):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Oa(e,t,n,r,s,i)}function Oa(e,t,n,r,i,s){ka(e,t);var o=0!=(128&t.flags);if(!r&&!o)return i&&Fi(t,n,!1),Ha(e,t,s);r=t.stateNode,Aa.current=t;var a=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Js(t,e.child,null,s),t.child=Js(t,null,a,s)):wa(e,t,a,s),t.memoizedState=r.state,i&&Fi(t,n,!0),t.child}function Na(e){var t=e.stateNode;t.pendingContext?Ri(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ri(0,t.context,!1),ro(e,t.containerInfo)}function xa(e,t,n,r,i){return ds(),ps(i),t.flags|=256,wa(e,t,n,r),t.child}var Pa,Da,Ra,La={dehydrated:null,treeContext:null,retryLane:0};function Ma(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fa(e,t,n){var r,i=t.pendingProps,o=ao.current,a=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(a=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),ki(ao,1&o),null===e)return us(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,a?(i=t.mode,a=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==a?(a.childLanes=0,a.pendingProps=l):a=Mu(l,i,0,null),e=Lu(e,i,n,null),a.return=t,e.return=t,a.sibling=e,t.child=a,t.child.memoizedState=Ma(n),t.memoizedState=La,e):Ua(t,l));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,t,n,r,i,o,a){if(n)return 256&t.flags?(t.flags&=-257,Va(e,t,a,r=ha(Error(s(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=Mu({mode:"visible",children:r.children},i,0,null),(o=Lu(o,i,a,null)).flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,0!=(1&t.mode)&&Js(t,e.child,null,a),t.child.memoizedState=Ma(a),t.memoizedState=La,o);if(0==(1&t.mode))return Va(e,t,a,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Va(e,t,a,r=ha(o=Error(s(419)),r,void 0))}if(l=0!=(a&e.childLanes),ba||l){if(null!==(r=Ol)){switch(a&-a){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|a))?0:i)&&i!==o.retryLane&&(o.retryLane=i,Os(e,i),nu(r,e,i,-1))}return mu(),Va(e,t,a,r=ha(Error(s(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Su.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,rs=ui(i.nextSibling),ns=t,is=!0,ss=null,null!==e&&(Ki[Gi++]=Ji,Ki[Gi++]=Xi,Ki[Gi++]=Qi,Ji=e.id,Xi=e.overflow,Qi=t),(t=Ua(t,r.children)).flags|=4096,t)}(e,t,l,i,r,o,n);if(a){a=i.fallback,l=t.mode,r=(o=e.child).sibling;var u={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==o?((i=t.child).childLanes=0,i.pendingProps=u,t.deletions=null):(i=Du(o,u)).subtreeFlags=14680064&o.subtreeFlags,null!==r?a=Du(r,a):(a=Lu(a,l,n,null)).flags|=2,a.return=t,i.return=t,i.sibling=a,t.child=i,i=a,a=t.child,l=null===(l=e.child.memoizedState)?Ma(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},a.memoizedState=l,a.childLanes=e.childLanes&~n,t.memoizedState=La,i}return e=(a=e.child).sibling,i=Du(a,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function Ua(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Va(e,t,n,r){return null!==r&&ps(r),Js(t,e.child,null,n),(e=Ua(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ja(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),_s(e.return,t,n)}function za(e,t,n,r,i){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailMode=i)}function Ba(e,t,n){var r=t.pendingProps,i=r.revealOrder,s=r.tail;if(wa(e,t,r.children,n),0!=(2&(r=ao.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ja(e,n,t);else if(19===e.tag)ja(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ki(ao,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===lo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),za(t,!1,i,n,s);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===lo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}za(t,!0,n,null,s);break;case"together":za(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $a(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ha(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ml|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(n=Du(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Du(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function qa(e,t){if(!is)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Wa(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ka(e,t,n){var r=t.pendingProps;switch(ts(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Wa(t),null;case 1:case 17:return Pi(t.type)&&Di(),Wa(t),null;case 3:return r=t.stateNode,io(),Ti(Oi),Ti(Ii),co(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(hs(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ss&&(ou(ss),ss=null))),Wa(t),null;case 5:oo(t);var i=no(to.current);if(n=t.type,null!==e&&null!=t.stateNode)Da(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(s(166));return Wa(t),null}if(e=no(Zs.current),hs(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[fi]=t,r[di]=o,e=0!=(1&t.mode),n){case"dialog":Vr("cancel",r),Vr("close",r);break;case"iframe":case"object":case"embed":Vr("load",r);break;case"video":case"audio":for(i=0;i<Lr.length;i++)Vr(Lr[i],r);break;case"source":Vr("error",r);break;case"img":case"image":case"link":Vr("error",r),Vr("load",r);break;case"details":Vr("toggle",r);break;case"input":J(r,o),Vr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Vr("invalid",r);break;case"textarea":ie(r,o),Vr("invalid",r)}for(var l in ve(n,o),i=null,o)if(o.hasOwnProperty(l)){var u=o[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==o.suppressHydrationWarning&&Yr(r.textContent,u,e),i=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==o.suppressHydrationWarning&&Yr(r.textContent,u,e),i=["children",""+u]):a.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Vr("scroll",r)}switch(n){case"input":W(r),Z(r,o,!0);break;case"textarea":W(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Zr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ae(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fi]=t,e[di]=r,Pa(e,t),t.stateNode=e;e:{switch(l=Ae(n,r),n){case"dialog":Vr("cancel",e),Vr("close",e),i=r;break;case"iframe":case"object":case"embed":Vr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Lr.length;i++)Vr(Lr[i],e);i=r;break;case"source":Vr("error",e),i=r;break;case"img":case"image":case"link":Vr("error",e),Vr("load",e),i=r;break;case"details":Vr("toggle",e),i=r;break;case"input":J(e,r),i=Q(e,r),Vr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=F({},r,{value:void 0}),Vr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Vr("invalid",e)}for(o in ve(n,i),u=i)if(u.hasOwnProperty(o)){var c=u[o];"style"===o?ge(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&he(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(a.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Vr("scroll",e):null!=c&&A(e,o,c,l))}switch(n){case"input":W(e),Z(e,r,!1);break;case"textarea":W(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Wa(t),null;case 6:if(e&&null!=t.stateNode)Ra(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(s(166));if(n=no(to.current),no(Zs.current),hs(t)){if(r=t.stateNode,n=t.memoizedProps,r[fi]=t,(o=r.nodeValue!==n)&&null!==(e=ns))switch(e.tag){case 3:Yr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yr(r.nodeValue,n,0!=(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fi]=t,t.stateNode=r}return Wa(t),null;case 13:if(Ti(ao),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(is&&null!==rs&&0!=(1&t.mode)&&0==(128&t.flags))fs(),ds(),t.flags|=98560,o=!1;else if(o=hs(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(s(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(s(317));o[fi]=t}else ds(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Wa(t),o=!1}else null!==ss&&(ou(ss),ss=null),o=!0;if(!o)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ao.current)?0===Rl&&(Rl=3):mu())),null!==t.updateQueue&&(t.flags|=4),Wa(t),null);case 4:return io(),null===e&&Br(t.stateNode.containerInfo),Wa(t),null;case 10:return Es(t.type._context),Wa(t),null;case 19:if(Ti(ao),null===(o=t.memoizedState))return Wa(t),null;if(r=0!=(128&t.flags),null===(l=o.rendering))if(r)qa(o,!1);else{if(0!==Rl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=lo(e))){for(t.flags|=128,qa(o,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(l=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ki(ao,1&ao.current|2),t.child}e=e.sibling}null!==o.tail&&Xe()>Bl&&(t.flags|=128,r=!0,qa(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=lo(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),qa(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!is)return Wa(t),null}else 2*Xe()-o.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=128,r=!0,qa(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=o.last)?n.sibling=l:t.child=l,o.last=l)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Xe(),t.sibling=null,n=ao.current,ki(ao,r?1&n|2:1&n),t):(Wa(t),null);case 22:case 23:return hu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Pl)&&(Wa(t),6&t.subtreeFlags&&(t.flags|=8192)):Wa(t),null;case 24:case 25:return null}throw Error(s(156,t.tag))}function Ga(e,t){switch(ts(t),t.tag){case 1:return Pi(t.type)&&Di(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return io(),Ti(Oi),Ti(Ii),co(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return oo(t),null;case 13:if(Ti(ao),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(s(340));ds()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ti(ao),null;case 4:return io(),null;case 10:return Es(t.type._context),null;case 22:case 23:return hu(),null;default:return null}}Pa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Da=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,no(Zs.current);var s,o=null;switch(n){case"input":i=Q(e,i),r=Q(e,r),o=[];break;case"select":i=F({},i,{value:void 0}),r=F({},r,{value:void 0}),o=[];break;case"textarea":i=re(e,i),r=re(e,r),o=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ve(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(s in l)l.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(a.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(s in l)!l.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in u)u.hasOwnProperty(s)&&l[s]!==u[s]&&(n||(n={}),n[s]=u[s])}else n||(o||(o=[]),o.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(o=o||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(o=o||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(a.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Vr("scroll",e),o||l===u||(o=[])):(o=o||[]).push(c,u))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},Ra=function(e,t,n,r){n!==r&&(t.flags|=4)};var Qa=!1,Ja=!1,Xa="function"==typeof WeakSet?WeakSet:Set,Ya=null;function Za(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cu(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Cu(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var s=i.destroy;i.destroy=void 0,void 0!==s&&el(t,n,s)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function sl(e){var t=e.alternate;null!==t&&(e.alternate=null,sl(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fi],delete t[di],delete t[mi],delete t[gi],delete t[yi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ol(e){return 5===e.tag||3===e.tag||4===e.tag}function al(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ol(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,hl=!1;function fl(e,t,n){for(n=n.child;null!==n;)dl(e,t,n),n=n.sibling}function dl(e,t,n){if(st&&"function"==typeof st.onCommitFiberUnmount)try{st.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Ja||Za(n,t);case 6:var r=cl,i=hl;cl=null,fl(e,t,n),hl=i,null!==(cl=r)&&(hl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(hl?(e=cl,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),Bt(e)):li(cl,n.stateNode));break;case 4:r=cl,i=hl,cl=n.stateNode.containerInfo,hl=!0,fl(e,t,n),cl=r,hl=i;break;case 0:case 11:case 14:case 15:if(!Ja&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var s=i,o=s.destroy;s=s.tag,void 0!==o&&(0!=(2&s)||0!=(4&s))&&el(n,t,o),i=i.next}while(i!==r)}fl(e,t,n);break;case 1:if(!Ja&&(Za(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cu(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Ja=(r=Ja)||null!==n.memoizedState,fl(e,t,n),Ja=r):fl(e,t,n);break;default:fl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xa),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,a=t,l=a;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,hl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,hl=!0;break e}l=l.return}if(null===cl)throw Error(s(160));dl(o,a,i),cl=null,hl=!1;var u=i.alternate;null!==u&&(u.return=null),i.return=null}catch(e){Cu(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gl(t,e),t=t.sibling}function gl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),yl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Cu(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:ml(t,e),yl(e),512&r&&null!==n&&Za(n,n.return);break;case 5:if(ml(t,e),yl(e),512&r&&null!==n&&Za(n,n.return),32&e.flags){var i=e.stateNode;try{fe(i,"")}catch(t){Cu(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var o=e.memoizedProps,a=null!==n?n.memoizedProps:o,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===o.type&&null!=o.name&&X(i,o),Ae(l,a);var c=Ae(l,o);for(a=0;a<u.length;a+=2){var h=u[a],f=u[a+1];"style"===h?ge(i,f):"dangerouslySetInnerHTML"===h?he(i,f):"children"===h?fe(i,f):A(i,h,f,c)}switch(l){case"input":Y(i,o);break;case"textarea":se(i,o);break;case"select":var d=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var p=o.value;null!=p?ne(i,!!o.multiple,p,!1):d!==!!o.multiple&&(null!=o.defaultValue?ne(i,!!o.multiple,o.defaultValue,!0):ne(i,!!o.multiple,o.multiple?[]:"",!1))}i[di]=o}catch(t){Cu(e,e.return,t)}}break;case 6:if(ml(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(s(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(t){Cu(e,e.return,t)}}break;case 3:if(ml(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:ml(t,e),yl(e);break;case 13:ml(t,e),yl(e),8192&(i=e.child).flags&&(o=null!==i.memoizedState,i.stateNode.isHidden=o,!o||null!==i.alternate&&null!==i.alternate.memoizedState||(zl=Xe())),4&r&&pl(e);break;case 22:if(h=null!==n&&null!==n.memoizedState,1&e.mode?(Ja=(c=Ja)||h,ml(t,e),Ja=c):ml(t,e),yl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!h&&0!=(1&e.mode))for(Ya=e,h=e.child;null!==h;){for(f=Ya=h;null!==Ya;){switch(p=(d=Ya).child,d.tag){case 0:case 11:case 14:case 15:nl(4,d,d.return);break;case 1:Za(d,d.return);var m=d.stateNode;if("function"==typeof m.componentWillUnmount){r=d,n=d.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cu(r,n,e)}}break;case 5:Za(d,d.return);break;case 22:if(null!==d.memoizedState){wl(f);continue}}null!==p?(p.return=d,Ya=p):wl(f)}h=h.sibling}e:for(h=null,f=e;;){if(5===f.tag){if(null===h){h=f;try{i=f.stateNode,c?"function"==typeof(o=i.style).setProperty?o.setProperty("display","none","important"):o.display="none":(l=f.stateNode,a=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",a))}catch(t){Cu(e,e.return,t)}}}else if(6===f.tag){if(null===h)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;h===f&&(h=null),f=f.return}h===f&&(h=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:ml(t,e),yl(e),4&r&&pl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ol(n)){var r=n;break e}n=n.return}throw Error(s(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(fe(i,""),r.flags&=-33),ul(e,al(e),i);break;case 3:case 4:var o=r.stateNode.containerInfo;ll(e,al(e),o);break;default:throw Error(s(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vl(e,t,n){Ya=e,Al(e,t,n)}function Al(e,t,n){for(var r=0!=(1&e.mode);null!==Ya;){var i=Ya,s=i.child;if(22===i.tag&&r){var o=null!==i.memoizedState||Qa;if(!o){var a=i.alternate,l=null!==a&&null!==a.memoizedState||Ja;a=Qa;var u=Ja;if(Qa=o,(Ja=l)&&!u)for(Ya=i;null!==Ya;)l=(o=Ya).child,22===o.tag&&null!==o.memoizedState?El(i):null!==l?(l.return=o,Ya=l):El(i);for(;null!==s;)Ya=s,Al(s,t,n),s=s.sibling;Ya=i,Qa=a,Ja=u}bl(e)}else 0!=(8772&i.subtreeFlags)&&null!==s?(s.return=i,Ya=s):bl(e)}}function bl(e){for(;null!==Ya;){var t=Ya;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ja||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ja)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:gs(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&Us(t,o,r);break;case 3:var a=t.updateQueue;if(null!==a){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Us(t,a,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var h=c.memoizedState;if(null!==h){var f=h.dehydrated;null!==f&&Bt(f)}}}break;default:throw Error(s(163))}Ja||512&t.flags&&il(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Ya=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ya=n;break}Ya=t.return}}function wl(e){for(;null!==Ya;){var t=Ya;if(t===e){Ya=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ya=n;break}Ya=t.return}}function El(e){for(;null!==Ya;){var t=Ya;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Cu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Cu(t,i,e)}}var s=t.return;try{il(t)}catch(e){Cu(t,s,e)}break;case 5:var o=t.return;try{il(t)}catch(e){Cu(t,o,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Ya=null;break}var a=t.sibling;if(null!==a){a.return=t.return,Ya=a;break}Ya=t.return}}var _l,Cl=Math.ceil,Tl=b.ReactCurrentDispatcher,kl=b.ReactCurrentOwner,Sl=b.ReactCurrentBatchConfig,Il=0,Ol=null,Nl=null,xl=0,Pl=0,Dl=Ci(0),Rl=0,Ll=null,Ml=0,Fl=0,Ul=0,Vl=null,jl=null,zl=0,Bl=1/0,$l=null,Hl=!1,ql=null,Wl=null,Kl=!1,Gl=null,Ql=0,Jl=0,Xl=null,Yl=-1,Zl=0;function eu(){return 0!=(6&Il)?Xe():-1!==Yl?Yl:Yl=Xe()}function tu(e){return 0==(1&e.mode)?1:0!=(2&Il)&&0!==xl?xl&-xl:null!==ms.transition?(0===Zl&&(Zl=mt()),Zl):0!==(e=At)?e:e=void 0===(e=window.event)?16:Jt(e.type)}function nu(e,t,n,r){if(50<Jl)throw Jl=0,Xl=null,Error(s(185));yt(e,n,r),0!=(2&Il)&&e===Ol||(e===Ol&&(0==(2&Il)&&(Fl|=n),4===Rl&&au(e,xl)),ru(e,r),1===n&&0===Il&&0==(1&t.mode)&&(Bl=Xe()+500,Vi&&Bi()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var o=31-ot(s),a=1<<o,l=i[o];-1===l?0!=(a&n)&&0==(a&r)||(i[o]=dt(a,t)):l<=t&&(e.expiredLanes|=a),s&=~a}}(e,t);var r=ft(e,e===Ol?xl:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Vi=!0,zi(e)}(lu.bind(null,e)):zi(lu.bind(null,e)),oi((function(){0==(6&Il)&&Bi()})),n=null;else{switch(bt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ou(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Yl=-1,Zl=0,0!=(6&Il))throw Error(s(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=ft(e,e===Ol?xl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gu(e,r);else{t=r;var i=Il;Il|=2;var o=pu();for(Ol===e&&xl===t||($l=null,Bl=Xe()+500,fu(e,t));;)try{vu();break}catch(t){du(e,t)}ws(),Tl.current=o,Il=i,null!==Nl?t=0:(Ol=null,xl=0,t=Rl)}if(0!==t){if(2===t&&0!==(i=pt(e))&&(r=i,t=su(e,i)),1===t)throw n=Ll,fu(e,0),au(e,r),ru(e,Xe()),n;if(6===t)au(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],s=i.getSnapshot;i=i.value;try{if(!ar(s(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=gu(e,r))&&0!==(o=pt(e))&&(r=o,t=su(e,o)),1===t))throw n=Ll,fu(e,0),au(e,r),ru(e,Xe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(s(345));case 2:case 5:wu(e,jl,$l);break;case 3:if(au(e,r),(130023424&r)===r&&10<(t=zl+500-Xe())){if(0!==ft(e,0))break;if(((i=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(wu.bind(null,e,jl,$l),t);break}wu(e,jl,$l);break;case 4:if(au(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var a=31-ot(r);o=1<<a,(a=t[a])>i&&(i=a),r&=~o}if(r=i,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cl(r/1960))-r)){e.timeoutHandle=ri(wu.bind(null,e,jl,$l),r);break}wu(e,jl,$l);break;default:throw Error(s(329))}}}return ru(e,Xe()),e.callbackNode===n?iu.bind(null,e):null}function su(e,t){var n=Vl;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=gu(e,t))&&(t=jl,jl=n,null!==t&&ou(t)),e}function ou(e){null===jl?jl=e:jl.push.apply(jl,e)}function au(e,t){for(t&=~Ul,t&=~Fl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(0!=(6&Il))throw Error(s(327));Eu();var t=ft(e,0);if(0==(1&t))return ru(e,Xe()),null;var n=gu(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=su(e,r))}if(1===n)throw n=Ll,fu(e,0),au(e,t),ru(e,Xe()),n;if(6===n)throw Error(s(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,jl,$l),ru(e,Xe()),null}function uu(e,t){var n=Il;Il|=1;try{return e(t)}finally{0===(Il=n)&&(Bl=Xe()+500,Vi&&Bi())}}function cu(e){null!==Gl&&0===Gl.tag&&0==(6&Il)&&Eu();var t=Il;Il|=1;var n=Sl.transition,r=At;try{if(Sl.transition=null,At=1,e)return e()}finally{At=r,Sl.transition=n,0==(6&(Il=t))&&Bi()}}function hu(){Pl=Dl.current,Ti(Dl)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(ts(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Di();break;case 3:io(),Ti(Oi),Ti(Ii),co();break;case 5:oo(r);break;case 4:io();break;case 13:case 19:Ti(ao);break;case 10:Es(r.type._context);break;case 22:case 23:hu()}n=n.return}if(Ol=e,Nl=e=Du(e.current,null),xl=Pl=t,Rl=0,Ll=null,Ul=Fl=Ml=0,jl=Vl=null,null!==ks){for(t=0;t<ks.length;t++)if(null!==(r=(n=ks[t]).interleaved)){n.interleaved=null;var i=r.next,s=n.pending;if(null!==s){var o=s.next;s.next=i,r.next=o}n.pending=r}ks=null}return e}function du(e,t){for(;;){var n=Nl;try{if(ws(),ho.current=oa,vo){for(var r=mo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}vo=!1}if(po=0,yo=go=mo=null,Ao=!1,bo=0,kl.current=null,null===n||null===n.return){Rl=1,Ll=t,Nl=null;break}e:{var o=e,a=n.return,l=n,u=t;if(t=xl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,h=l,f=h.tag;if(0==(1&h.mode)&&(0===f||11===f||15===f)){var d=h.alternate;d?(h.updateQueue=d.updateQueue,h.memoizedState=d.memoizedState,h.lanes=d.lanes):(h.updateQueue=null,h.memoizedState=null)}var p=ya(a);if(null!==p){p.flags&=-257,va(p,a,l,0,t),1&p.mode&&ga(o,c,t),u=c;var m=(t=p).updateQueue;if(null===m){var g=new Set;g.add(u),t.updateQueue=g}else m.add(u);break e}if(0==(1&t)){ga(o,c,t),mu();break e}u=Error(s(426))}else if(is&&1&l.mode){var y=ya(a);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),va(y,a,l,0,t),ps(ca(u,l));break e}}o=u=ca(u,l),4!==Rl&&(Rl=2),null===Vl?Vl=[o]:Vl.push(o),o=a;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,Ms(o,pa(0,u,t));break e;case 1:l=u;var v=o.type,A=o.stateNode;if(0==(128&o.flags)&&("function"==typeof v.getDerivedStateFromError||null!==A&&"function"==typeof A.componentDidCatch&&(null===Wl||!Wl.has(A)))){o.flags|=65536,t&=-t,o.lanes|=t,Ms(o,ma(o,l,t));break e}}o=o.return}while(null!==o)}bu(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function pu(){var e=Tl.current;return Tl.current=oa,null===e?oa:e}function mu(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Ol||0==(268435455&Ml)&&0==(268435455&Fl)||au(Ol,xl)}function gu(e,t){var n=Il;Il|=2;var r=pu();for(Ol===e&&xl===t||($l=null,fu(e,t));;)try{yu();break}catch(t){du(e,t)}if(ws(),Il=n,Tl.current=r,null!==Nl)throw Error(s(261));return Ol=null,xl=0,Rl}function yu(){for(;null!==Nl;)Au(Nl)}function vu(){for(;null!==Nl&&!Qe();)Au(Nl)}function Au(e){var t=_l(e.alternate,e,Pl);e.memoizedProps=e.pendingProps,null===t?bu(e):Nl=t,kl.current=null}function bu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ka(n,t,Pl)))return void(Nl=n)}else{if(null!==(n=Ga(n,t)))return n.flags&=32767,void(Nl=n);if(null===e)return Rl=6,void(Nl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Rl&&(Rl=5)}function wu(e,t,n){var r=At,i=Sl.transition;try{Sl.transition=null,At=1,function(e,t,n,r){do{Eu()}while(null!==Gl);if(0!=(6&Il))throw Error(s(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(s(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-ot(n),s=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~s}}(e,o),e===Ol&&(Nl=Ol=null,xl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Kl||(Kl=!0,Ou(tt,(function(){return Eu(),null}))),o=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||o){o=Sl.transition,Sl.transition=null;var a=At;At=1;var l=Il;Il|=4,kl.current=null,function(e,t){if(ei=Ht,dr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var a=0,l=-1,u=-1,c=0,h=0,f=e,d=null;t:for(;;){for(var p;f!==n||0!==i&&3!==f.nodeType||(l=a+i),f!==o||0!==r&&3!==f.nodeType||(u=a+r),3===f.nodeType&&(a+=f.nodeValue.length),null!==(p=f.firstChild);)d=f,f=p;for(;;){if(f===e)break t;if(d===n&&++c===i&&(l=a),d===o&&++h===r&&(u=a),null!==(p=f.nextSibling))break;d=(f=d).parentNode}f=p}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Ht=!1,Ya=t;null!==Ya;)if(e=(t=Ya).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ya=e;else for(;null!==Ya;){t=Ya;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=t.stateNode,A=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:gs(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=A}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(s(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ya=e;break}Ya=t.return}m=tl,tl=!1}(e,n),gl(n,e),pr(ti),Ht=!!ei,ti=ei=null,e.current=n,vl(n,e,i),Je(),Il=l,At=a,Sl.transition=o}else e.current=n;if(Kl&&(Kl=!1,Gl=e,Ql=i),0===(o=e.pendingLanes)&&(Wl=null),function(e){if(st&&"function"==typeof st.onCommitFiberRoot)try{st.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ru(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Hl)throw Hl=!1,e=ql,ql=null,e;0!=(1&Ql)&&0!==e.tag&&Eu(),0!=(1&(o=e.pendingLanes))?e===Xl?Jl++:(Jl=0,Xl=e):Jl=0,Bi()}(e,t,n,r)}finally{Sl.transition=i,At=r}return null}function Eu(){if(null!==Gl){var e=bt(Ql),t=Sl.transition,n=At;try{if(Sl.transition=null,At=16>e?16:e,null===Gl)var r=!1;else{if(e=Gl,Gl=null,Ql=0,0!=(6&Il))throw Error(s(331));var i=Il;for(Il|=4,Ya=e.current;null!==Ya;){var o=Ya,a=o.child;if(0!=(16&Ya.flags)){var l=o.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Ya=c;null!==Ya;){var h=Ya;switch(h.tag){case 0:case 11:case 15:nl(8,h,o)}var f=h.child;if(null!==f)f.return=h,Ya=f;else for(;null!==Ya;){var d=(h=Ya).sibling,p=h.return;if(sl(h),h===c){Ya=null;break}if(null!==d){d.return=p,Ya=d;break}Ya=p}}}var m=o.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Ya=o}}if(0!=(2064&o.subtreeFlags)&&null!==a)a.return=o,Ya=a;else e:for(;null!==Ya;){if(0!=(2048&(o=Ya).flags))switch(o.tag){case 0:case 11:case 15:nl(9,o,o.return)}var v=o.sibling;if(null!==v){v.return=o.return,Ya=v;break e}Ya=o.return}}var A=e.current;for(Ya=A;null!==Ya;){var b=(a=Ya).child;if(0!=(2064&a.subtreeFlags)&&null!==b)b.return=a,Ya=b;else e:for(a=A;null!==Ya;){if(0!=(2048&(l=Ya).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Cu(l,l.return,e)}if(l===a){Ya=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Ya=w;break e}Ya=l.return}}if(Il=i,Bi(),st&&"function"==typeof st.onPostCommitFiberRoot)try{st.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{At=n,Sl.transition=t}}return!1}function _u(e,t,n){e=Rs(e,t=pa(0,t=ca(n,t),1),1),t=eu(),null!==e&&(yt(e,1,t),ru(e,t))}function Cu(e,t,n){if(3===e.tag)_u(e,e,n);else for(;null!==t;){if(3===t.tag){_u(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){t=Rs(t,e=ma(t,e=ca(n,e),1),1),e=eu(),null!==t&&(yt(t,1,e),ru(t,e));break}}t=t.return}}function Tu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Ol===e&&(xl&n)===n&&(4===Rl||3===Rl&&(130023424&xl)===xl&&500>Xe()-zl?fu(e,0):Ul|=n),ru(e,t)}function ku(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=eu();null!==(e=Os(e,t))&&(yt(e,t,n),ru(e,n))}function Su(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ku(e,n)}function Iu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(s(314))}null!==r&&r.delete(t),ku(e,n)}function Ou(e,t){return Ke(e,t)}function Nu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function xu(e,t,n,r){return new Nu(e,t,n,r)}function Pu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Du(e,t){var n=e.alternate;return null===n?((n=xu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ru(e,t,n,r,i,o){var a=2;if(r=e,"function"==typeof e)Pu(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case _:return Lu(n.children,i,o,t);case C:a=8,i|=8;break;case T:return(e=xu(12,n,t,2|i)).elementType=T,e.lanes=o,e;case O:return(e=xu(13,n,t,i)).elementType=O,e.lanes=o,e;case N:return(e=xu(19,n,t,i)).elementType=N,e.lanes=o,e;case D:return Mu(n,i,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:a=10;break e;case S:a=9;break e;case I:a=11;break e;case x:a=14;break e;case P:a=16,r=null;break e}throw Error(s(130,null==e?e:typeof e,""))}return(t=xu(a,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Lu(e,t,n,r){return(e=xu(7,e,r,t)).lanes=n,e}function Mu(e,t,n,r){return(e=xu(22,e,r,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function Fu(e,t,n){return(e=xu(6,e,null,t)).lanes=n,e}function Uu(e,t,n){return(t=xu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function ju(e,t,n,r,i,s,o,a,l){return e=new Vu(e,t,n,a,l),1===t?(t=1,!0===s&&(t|=8)):t=0,s=xu(3,null,null,t),e.current=s,s.stateNode=e,s.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},xs(s),e}function zu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bu(e){if(!e)return Si;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(s(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Pi(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(s(171))}if(1===e.tag){var n=e.type;if(Pi(n))return Li(e,n,t)}return t}function $u(e,t,n,r,i,s,o,a,l){return(e=ju(n,r,!0,e,0,s,0,a,l)).context=Bu(null),n=e.current,(s=Ds(r=eu(),i=tu(n))).callback=null!=t?t:null,Rs(n,s,i),e.current.lanes=i,yt(e,i,r),ru(e,r),e}function Hu(e,t,n,r){var i=t.current,s=eu(),o=tu(i);return n=Bu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ds(s,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Rs(i,t,o))&&(nu(e,i,o,s),Ls(e,i,o)),o}function qu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}_l=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oi.current)ba=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ba=!1,function(e,t,n){switch(t.tag){case 3:Na(t),ds();break;case 5:so(t);break;case 1:Pi(t.type)&&Mi(t);break;case 4:ro(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;ki(ys,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(ki(ao,1&ao.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fa(e,t,n):(ki(ao,1&ao.current),null!==(e=Ha(e,t,n))?e.sibling:null);ki(ao,1&ao.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ba(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ki(ao,ao.current),r)break;return null;case 22:case 23:return t.lanes=0,Ta(e,t,n)}return Ha(e,t,n)}(e,t,n);ba=0!=(131072&e.flags)}else ba=!1,is&&0!=(1048576&t.flags)&&Zi(t,Wi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$a(e,t),e=t.pendingProps;var i=xi(t,Ii.current);Cs(t,n),i=Co(null,t,r,e,i,n);var o=To();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Pi(r)?(o=!0,Mi(t)):o=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,xs(t),i.updater=zs,t.stateNode=i,i._reactInternals=t,qs(t,r,e,n),t=Oa(null,t,r,!0,o,n)):(t.tag=0,is&&o&&es(t),wa(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch($a(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Pu(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===x)return 14}return 2}(r),e=gs(r,e),i){case 0:t=Sa(null,t,r,e,n);break e;case 1:t=Ia(null,t,r,e,n);break e;case 11:t=Ea(null,t,r,e,n);break e;case 14:t=_a(null,t,r,gs(r.type,e),n);break e}throw Error(s(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,Sa(e,t,r,i=t.elementType===r?i:gs(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ia(e,t,r,i=t.elementType===r?i:gs(r,i),n);case 3:e:{if(Na(t),null===e)throw Error(s(387));r=t.pendingProps,i=(o=t.memoizedState).element,Ps(e,t),Fs(t,r,null,n);var a=t.memoizedState;if(r=a.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=xa(e,t,r,n,i=ca(Error(s(423)),t));break e}if(r!==i){t=xa(e,t,r,n,i=ca(Error(s(424)),t));break e}for(rs=ui(t.stateNode.containerInfo.firstChild),ns=t,is=!0,ss=null,n=Xs(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ds(),r===i){t=Ha(e,t,n);break e}wa(e,t,r,n)}t=t.child}return t;case 5:return so(t),null===e&&us(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,a=i.children,ni(r,i)?a=null:null!==o&&ni(r,o)&&(t.flags|=32),ka(e,t),wa(e,t,a,n),t.child;case 6:return null===e&&us(t),null;case 13:return Fa(e,t,n);case 4:return ro(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Js(t,null,r,n):wa(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ea(e,t,r,i=t.elementType===r?i:gs(r,i),n);case 7:return wa(e,t,t.pendingProps,n),t.child;case 8:case 12:return wa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,a=i.value,ki(ys,r._currentValue),r._currentValue=a,null!==o)if(ar(o.value,a)){if(o.children===i.children&&!Oi.current){t=Ha(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var l=o.dependencies;if(null!==l){a=o.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===o.tag){(u=Ds(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var h=(c=c.shared).pending;null===h?u.next=u:(u.next=h.next,h.next=u),c.pending=u}}o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),_s(o.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===o.tag)a=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(a=o.return))throw Error(s(341));a.lanes|=n,null!==(l=a.alternate)&&(l.lanes|=n),_s(a,n,t),a=o.sibling}else a=o.child;if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===t){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}wa(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Cs(t,n),r=r(i=Ts(i)),t.flags|=1,wa(e,t,r,n),t.child;case 14:return i=gs(r=t.type,t.pendingProps),_a(e,t,r,i=gs(r.type,i),n);case 15:return Ca(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:gs(r,i),$a(e,t),t.tag=1,Pi(r)?(e=!0,Mi(t)):e=!1,Cs(t,n),$s(t,r,i),qs(t,r,i,n),Oa(null,t,r,!0,e,n);case 19:return Ba(e,t,n);case 22:return Ta(e,t,n)}throw Error(s(156,t.tag))};var Gu="function"==typeof reportError?reportError:function(e){console.error(e)};function Qu(e){this._internalRoot=e}function Ju(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function ec(e,t,n,r,i){var s=n._reactRootContainer;if(s){var o=s;if("function"==typeof i){var a=i;i=function(){var e=qu(o);a.call(e)}}Hu(t,o,e,i)}else o=function(e,t,n,r,i){if(i){if("function"==typeof r){var s=r;r=function(){var e=qu(o);s.call(e)}}var o=$u(t,r,e,0,null,!1,0,"",Zu);return e._reactRootContainer=o,e[pi]=o.current,Br(8===e.nodeType?e.parentNode:e),cu(),o}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var a=r;r=function(){var e=qu(l);a.call(e)}}var l=ju(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=l,e[pi]=l.current,Br(8===e.nodeType?e.parentNode:e),cu((function(){Hu(t,l,n,r)})),l}(n,t,e,i,r);return qu(o)}Ju.prototype.render=Qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(s(409));Hu(e,t,null,null)},Ju.prototype.unmount=Qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Hu(null,e,null,null)})),t[pi]=null}},Ju.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&Ft(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ht(t.pendingLanes);0!==n&&(vt(t,1|n),ru(t,Xe()),0==(6&Il)&&(Bl=Xe()+500,Bi()))}break;case 13:cu((function(){var t=Os(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Ku(e,1)}},Et=function(e){if(13===e.tag){var t=Os(e,134217728);null!==t&&nu(t,e,134217728,eu()),Ku(e,134217728)}},_t=function(e){if(13===e.tag){var t=tu(e),n=Os(e,t);null!==n&&nu(n,e,t,eu()),Ku(e,t)}},Ct=function(){return At},Tt=function(e,t){var n=At;try{return At=e,t()}finally{At=n}},Ee=function(e,t,n){switch(t){case"input":if(Y(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=wi(r);if(!i)throw Error(s(90));K(r),Y(r,i)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ie=uu,Oe=cu;var tc={usingClientEntryPoint:!1,Events:[Ai,bi,wi,ke,Se,uu]},nc={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(rc),st=ic}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(s(200));return zu(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(s(299));var n=!1,r="",i=Gu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=ju(e,1,!1,null,0,n,0,r,i),e[pi]=t.current,Br(8===e.nodeType?e.parentNode:e),new Qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(s(188));throw e=Object.keys(e).join(","),Error(s(268,e))}return null===(e=qe(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Yu(t))throw Error(s(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(s(405));var r=null!=n&&n.hydratedSources||null,i=!1,o="",a=Gu;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),t=$u(t,null,e,1,null!=n?n:null,i,0,o,a),e[pi]=t.current,Br(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Ju(t)},t.render=function(e,t,n){if(!Yu(t))throw Error(s(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Yu(e))throw Error(s(40));return!!e._reactRootContainer&&(cu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[pi]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Yu(n))throw Error(s(200));if(null==e||void 0===e._reactInternals)throw Error(s(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:function(e,t,n){!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:function(e,t){if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},9864:function(e,t,n){n(9921)},9704:function(e,t,n){n.d(t,{zt:function(){return c},I0:function(){return m},v9:function(){return A}});var r=n(7294),i=r.createContext(null),s=function(e){e()},o=function(){return s},a={notify:function(){},get:function(){return[]}};function l(e,t){var n,r=a;function i(){l.onStateChange&&l.onStateChange()}function s(){n||(n=t?t.addNestedSub(i):e.subscribe(i),r=function(){var e=o(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}())}var l={addNestedSub:function(e){return s(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:i,isSubscribed:function(){return Boolean(n)},trySubscribe:s,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=a)},getListeners:function(){return r}};return l}var u="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,c=function(e){var t=e.store,n=e.context,s=e.children,o=(0,r.useMemo)((function(){var e=l(t);return{store:t,subscription:e}}),[t]),a=(0,r.useMemo)((function(){return t.getState()}),[t]);u((function(){var e=o.subscription;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,a]);var c=n||i;return r.createElement(c.Provider,{value:o},s)};function h(){return(0,r.useContext)(i)}function f(e){void 0===e&&(e=i);var t=e===i?h:function(){return(0,r.useContext)(e)};return function(){return t().store}}n(8679),n(9864),n(7462);var d=f();function p(e){void 0===e&&(e=i);var t=e===i?d:f(e);return function(){return t().dispatch}}var m=p(),g=function(e,t){return e===t};function y(e){void 0===e&&(e=i);var t=e===i?h:function(){return(0,r.useContext)(e)};return function(e,n){void 0===n&&(n=g);var i=t(),s=function(e,t,n,i){var s,o=(0,r.useReducer)((function(e){return e+1}),0)[1],a=(0,r.useMemo)((function(){return l(n,i)}),[n,i]),c=(0,r.useRef)(),h=(0,r.useRef)(),f=(0,r.useRef)(),d=(0,r.useRef)(),p=n.getState();try{if(e!==h.current||p!==f.current||c.current){var m=e(p);s=void 0!==d.current&&t(m,d.current)?d.current:m}else s=d.current}catch(e){throw c.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\n"),e}return u((function(){h.current=e,f.current=p,d.current=s,c.current=void 0})),u((function(){function e(){try{var e=n.getState();if(e===f.current)return;var r=h.current(e);if(t(r,d.current))return;d.current=r,f.current=e}catch(e){c.current=e}o()}return a.onStateChange=e,a.trySubscribe(),e(),function(){return a.tryUnsubscribe()}}),[n,a]),s}(e,n,i.store,i.subscription);return(0,r.useDebugValue)(s),s}}var v,A=y();v=n(3935).unstable_batchedUpdates,s=v},9711:function(e,t,n){n.d(t,{OL:function(){return f},VK:function(){return c},rU:function(){return h}});var r=n(7294),i=n(5648),s=n(6974);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function a(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}const l=["onClick","reloadDocument","replace","state","target","to"],u=["aria-current","caseSensitive","className","end","style","to","children"];function c(e){let{basename:t,children:n,window:o}=e,a=(0,r.useRef)();null==a.current&&(a.current=(0,i.lX)({window:o}));let l=a.current,[u,c]=(0,r.useState)({action:l.action,location:l.location});return(0,r.useLayoutEffect)((()=>l.listen(c)),[l]),(0,r.createElement)(s.F0,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:l})}const h=(0,r.forwardRef)((function(e,t){let{onClick:n,reloadDocument:u,replace:c=!1,state:h,target:f,to:d}=e,p=a(e,l),m=(0,s.oQ)(d),g=function(e,t){let{target:n,replace:o,state:a}=void 0===t?{}:t,l=(0,s.s0)(),u=(0,s.TH)(),c=(0,s.WU)(e);return(0,r.useCallback)((t=>{if(!(0!==t.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(t))){t.preventDefault();let n=!!o||(0,i.Ep)(u)===(0,i.Ep)(c);l(e,{replace:n,state:a})}}),[u,l,c,o,a,n,e])}(d,{replace:c,state:h,target:f});return(0,r.createElement)("a",o({},p,{href:m,onClick:function(e){n&&n(e),e.defaultPrevented||u||g(e)},ref:t,target:f}))})),f=(0,r.forwardRef)((function(e,t){let{"aria-current":n="page",caseSensitive:i=!1,className:l="",end:c=!1,style:f,to:d,children:p}=e,m=a(e,u),g=(0,s.TH)(),y=(0,s.WU)(d),v=g.pathname,A=y.pathname;i||(v=v.toLowerCase(),A=A.toLowerCase());let b,w=v===A||!c&&v.startsWith(A)&&"/"===v.charAt(A.length),E=w?n:void 0;b="function"==typeof l?l({isActive:w}):[l,w?"active":null].filter(Boolean).join(" ");let _="function"==typeof f?f({isActive:w}):f;return(0,r.createElement)(h,o({},m,{"aria-current":E,className:b,ref:t,style:_,to:d}),"function"==typeof p?p({isActive:w}):p)}))},6974:function(e,t,n){n.d(t,{AW:function(){return N},F0:function(){return x},Fg:function(){return I},TH:function(){return C},WU:function(){return S},Z5:function(){return P},j3:function(){return O},oQ:function(){return E},s0:function(){return T}});var r=n(5648),i=n(7294);const s=(0,i.createContext)(null),o=(0,i.createContext)(null),a=(0,i.createContext)({outlet:null,matches:[]});function l(e,t){if(!e)throw new Error(t)}function u(e,t,n){void 0===n&&(n="/");let i=y(("string"==typeof t?(0,r.cP)(t):t).pathname||"/",n);if(null==i)return null;let s=c(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(s);let o=null;for(let e=0;null==o&&e<s.length;++e)o=p(s[e],i);return o}function c(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,i)=>{let s={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};s.relativePath.startsWith("/")&&(s.relativePath.startsWith(r)||l(!1),s.relativePath=s.relativePath.slice(r.length));let o=v([r,s.relativePath]),a=n.concat(s);e.children&&e.children.length>0&&(!0===e.index&&l(!1),c(e.children,t,a,o)),(null!=e.path||e.index)&&t.push({path:o,score:d(o,e.index),routesMeta:a})})),t}const h=/^:\w+$/,f=e=>"*"===e;function d(e,t){let n=e.split("/"),r=n.length;return n.some(f)&&(r+=-2),t&&(r+=2),n.filter((e=>!f(e))).reduce(((e,t)=>e+(h.test(t)?3:""===t?1:10)),r)}function p(e,t){let{routesMeta:n}=e,r={},i="/",s=[];for(let e=0;e<n.length;++e){let o=n[e],a=e===n.length-1,l="/"===i?t:t.slice(i.length)||"/",u=m({path:o.relativePath,caseSensitive:o.caseSensitive,end:a},l);if(!u)return null;Object.assign(r,u.params);let c=o.route;s.push({params:r,pathname:v([i,u.pathname]),pathnameBase:A(v([i,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(i=v([i,u.pathnameBase]))}return s}function m(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):i+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(i,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=t.match(n);if(!i)return null;let s=i[0],o=s.replace(/(.)\/+$/,"$1"),a=i.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=a[n]||"";o=s.slice(0,s.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(a[n]||""),e}),{}),pathname:s,pathnameBase:o,pattern:e}}function g(e,t,n){let i,s="string"==typeof e?(0,r.cP)(e):e,o=""===e||""===s.pathname?"/":s.pathname;if(null==o)i=n;else{let e=t.length-1;if(o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e-=1;s.pathname=t.join("/")}i=e>=0?t[e]:"/"}let a=function(e,t){void 0===t&&(t="/");let{pathname:n,search:i="",hash:s=""}="string"==typeof e?(0,r.cP)(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:b(i),hash:w(s)}}(s,i);return o&&"/"!==o&&o.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function y(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const v=e=>e.join("/").replace(/\/\/+/g,"/"),A=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),b=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",w=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function E(e){_()||l(!1);let{basename:t,navigator:n}=(0,i.useContext)(s),{hash:o,pathname:a,search:u}=S(e),c=a;if("/"!==t){let n=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?(0,r.cP)(e).pathname:e.pathname}(e),i=null!=n&&n.endsWith("/");c="/"===a?t+(i?"/":""):v([t,a])}return n.createHref({pathname:c,search:u,hash:o})}function _(){return null!=(0,i.useContext)(o)}function C(){return _()||l(!1),(0,i.useContext)(o).location}function T(){_()||l(!1);let{basename:e,navigator:t}=(0,i.useContext)(s),{matches:n}=(0,i.useContext)(a),{pathname:r}=C(),o=JSON.stringify(n.map((e=>e.pathnameBase))),u=(0,i.useRef)(!1);return(0,i.useEffect)((()=>{u.current=!0})),(0,i.useCallback)((function(n,i){if(void 0===i&&(i={}),!u.current)return;if("number"==typeof n)return void t.go(n);let s=g(n,JSON.parse(o),r);"/"!==e&&(s.pathname=v([e,s.pathname])),(i.replace?t.replace:t.push)(s,i.state)}),[e,t,o,r])}const k=(0,i.createContext)(null);function S(e){let{matches:t}=(0,i.useContext)(a),{pathname:n}=C(),r=JSON.stringify(t.map((e=>e.pathnameBase)));return(0,i.useMemo)((()=>g(e,JSON.parse(r),n)),[e,r,n])}function I(e){let{to:t,replace:n,state:r}=e;_()||l(!1);let s=T();return(0,i.useEffect)((()=>{s(t,{replace:n,state:r})})),null}function O(e){return function(e){let t=(0,i.useContext)(a).outlet;return t?(0,i.createElement)(k.Provider,{value:e},t):t}(e.context)}function N(e){l(!1)}function x(e){let{basename:t="/",children:n=null,location:a,navigationType:u=r.aU.Pop,navigator:c,static:h=!1}=e;_()&&l(!1);let f=A(t),d=(0,i.useMemo)((()=>({basename:f,navigator:c,static:h})),[f,c,h]);"string"==typeof a&&(a=(0,r.cP)(a));let{pathname:p="/",search:m="",hash:g="",state:v=null,key:b="default"}=a,w=(0,i.useMemo)((()=>{let e=y(p,f);return null==e?null:{pathname:e,search:m,hash:g,state:v,key:b}}),[f,p,m,g,v,b]);return null==w?null:(0,i.createElement)(s.Provider,{value:d},(0,i.createElement)(o.Provider,{children:n,value:{location:w,navigationType:u}}))}function P(e){let{children:t,location:n}=e;return function(e,t){_()||l(!1);let{matches:n}=(0,i.useContext)(a),s=n[n.length-1],o=s?s.params:{},c=(s&&s.pathname,s?s.pathnameBase:"/");s&&s.route;let h,f=C();if(t){var d;let e="string"==typeof t?(0,r.cP)(t):t;"/"===c||(null==(d=e.pathname)?void 0:d.startsWith(c))||l(!1),h=e}else h=f;let p=h.pathname||"/",m=u(e,{pathname:"/"===c?p:p.slice(c.length)||"/"});return function(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,r,s)=>(0,i.createElement)(a.Provider,{children:void 0!==r.route.element?r.route.element:n,value:{outlet:n,matches:t.concat(e.slice(0,s+1))}})),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:v([c,e.pathname]),pathnameBase:"/"===e.pathnameBase?c:v([c,e.pathnameBase])}))),n)}(D(t),n)}function D(e){let t=[];return i.Children.forEach(e,(e=>{if(!(0,i.isValidElement)(e))return;if(e.type===i.Fragment)return void t.push.apply(t,D(e.props.children));e.type!==N&&l(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=D(e.props.children)),t.push(n)})),t}},2408:function(e,t){var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),s=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),h=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),d=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function v(){}function A(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var b=A.prototype=new v;b.constructor=A,m(b,y.prototype),b.isPureReactComponent=!0;var w=Array.isArray,E=Object.prototype.hasOwnProperty,_={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var i,s={},o=null,a=null;if(null!=t)for(i in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(o=""+t.key),t)E.call(t,i)&&!C.hasOwnProperty(i)&&(s[i]=t[i]);var l=arguments.length-2;if(1===l)s.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];s.children=u}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===s[i]&&(s[i]=l[i]);return{$$typeof:n,type:e,key:o,ref:a,props:s,_owner:_.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var S=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,i,s,o){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var l=!1;if(null===e)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return o=o(l=e),e=""===s?"."+I(l,0):s,w(o)?(i="",null!=e&&(i=e.replace(S,"$&/")+"/"),O(o,t,i,"",(function(e){return e}))):null!=o&&(k(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,i+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(S,"$&/")+"/")+e)),t.push(o)),1;if(l=0,s=""===s?".":s+":",w(e))for(var u=0;u<e.length;u++){var c=s+I(a=e[u],u);l+=O(a,t,i,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(a=e.next()).done;)l+=O(a=a.value,t,i,c=s+I(a,u++),o);else if("object"===a)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function N(e,t,n){if(null==e)return e;var r=[],i=0;return O(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function x(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},D={transition:null},R={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:D,ReactCurrentOwner:_};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=i,t.Profiler=o,t.PureComponent=A,t.StrictMode=s,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=m({},e.props),s=e.key,o=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,a=_.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!C.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:n,type:e.type,key:s,ref:o,props:i,_owner:a}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:x}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return P.current.useCallback(e,t)},t.useContext=function(e){return P.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return P.current.useDeferredValue(e)},t.useEffect=function(e,t){return P.current.useEffect(e,t)},t.useId=function(){return P.current.useId()},t.useImperativeHandle=function(e,t,n){return P.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return P.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.current.useMemo(e,t)},t.useReducer=function(e,t,n){return P.current.useReducer(e,t,n)},t.useRef=function(e){return P.current.useRef(e)},t.useState=function(e){return P.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return P.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return P.current.useTransition()},t.version="18.2.0"},7294:function(e,t,n){e.exports=n(2408)},53:function(e,t){function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<s(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,o=i>>>1;r<o;){var a=2*(r+1)-1,l=e[a],u=a+1,c=e[u];if(0>s(l,n))u<i&&0>s(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[a]=n,r=a);else{if(!(u<i&&0>s(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function s(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var a=Date,l=a.now();t.unstable_now=function(){return a.now()-l}}var u=[],c=[],h=1,f=null,d=3,p=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(g=!1,b(e),!m)if(null!==r(u))m=!0,D(E);else{var t=r(c);null!==t&&R(w,t.startTime-e)}}function E(e,n){m=!1,g&&(g=!1,v(k),k=-1),p=!0;var s=d;try{for(b(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!O());){var o=f.callback;if("function"==typeof o){f.callback=null,d=f.priorityLevel;var a=o(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof a?f.callback=a:f===r(u)&&i(u),b(n)}else i(u);f=r(u)}if(null!==f)var l=!0;else{var h=r(c);null!==h&&R(w,h.startTime-n),l=!1}return l}finally{f=null,d=s,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var _,C=!1,T=null,k=-1,S=5,I=-1;function O(){return!(t.unstable_now()-I<S)}function N(){if(null!==T){var e=t.unstable_now();I=e;var n=!0;try{n=T(!0,e)}finally{n?_():(C=!1,T=null)}}else C=!1}if("function"==typeof A)_=function(){A(N)};else if("undefined"!=typeof MessageChannel){var x=new MessageChannel,P=x.port2;x.port1.onmessage=N,_=function(){P.postMessage(null)}}else _=function(){y(N,0)};function D(e){T=e,C||(C=!0,_())}function R(e,n){k=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||p||(m=!0,D(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,i,s){var o=t.unstable_now();switch(s="object"==typeof s&&null!==s&&"number"==typeof(s=s.delay)&&0<s?o+s:o,e){case 1:var a=-1;break;case 2:a=250;break;case 5:a=1073741823;break;case 4:a=1e4;break;default:a=5e3}return e={id:h++,callback:i,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>o?(e.sortIndex=s,n(c,e),null===r(u)&&e===r(c)&&(g?(v(k),k=-1):g=!0,R(w,s-o))):(e.sortIndex=a,n(u,e),m||p||(m=!0,D(E))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},3840:function(e,t,n){e.exports=n(53)},5202:function(e,t,n){var r=n(3379),i=n.n(r),s=n(5982);i()(s.Z,{insert:"head",singleton:!1}),s.Z.locals},3379:function(e,t,n){var r,i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function o(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},r=[],i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var h=o(c),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==h?(s[h].references++,s[h].updater(f)):s.push({identifier:c,updater:m(f,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var s=n.nc;s&&(r.nonce=s)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function h(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var s=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(s,o[t]):e.appendChild(s)}}function f(e,t,n){var r=n.css,i=n.media,s=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,p=0;function m(e,t){var n,r,i;if(t.singleton){var s=p++;n=d||(d=l(t)),r=h.bind(null,n,s,!1),i=h.bind(null,n,s,!0)}else n=l(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=o(n[r]);s[i].references--}for(var l=a(e,t),u=0;u<n.length;u++){var c=o(n[u]);0===s[c].references&&(s[c].updater(),s.splice(c,1))}n=l}}}},4586:function(e,t,n){var r;n.d(t,{Z:function(){return c}});var i=new Uint8Array(16);function s(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}for(var o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,a=function(e){return"string"==typeof e&&o.test(e)},l=[],u=0;u<256;++u)l.push((u+256).toString(16).substr(1));var c=function(e,t,n){var r=(e=e||{}).random||(e.rng||s)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n}(r)}},7462:function(e,t,n){function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:function(){return r}})},389:function(e,t,n){n.d(t,{Jn:function(){return R},qX:function(){return x},Xd:function(){return N},Mq:function(){return M},ZF:function(){return L},KN:function(){return F}});var r=n(8463),i=n(3333),s=n(4444);let o,a;const l=new WeakMap,u=new WeakMap,c=new WeakMap,h=new WeakMap,f=new WeakMap;let d={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return u.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return m(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function p(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(g(this),e),m(l.get(this))}:function(...e){return m(t.apply(g(this),e))}:function(e,...n){const r=t.call(g(this),e,...n);return c.set(r,e.sort?e.sort():[e]),m(r)}:(e instanceof IDBTransaction&&function(e){if(u.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),r()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));u.set(e,t)}(e),n=e,(o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,d):e);var t,n}function m(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(m(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&l.set(t,e)})).catch((()=>{})),f.set(t,e),t}(e);if(h.has(e))return h.get(e);const t=p(e);return t!==e&&(h.set(e,t),f.set(t,e)),t}const g=e=>f.get(e),y=["get","getKey","getAll","getAllKeys","count"],v=["put","add","delete","clear"],A=new Map;function b(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(A.get(t))return A.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=v.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!y.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let o=s.store;return r&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),i&&s.done]))[0]};return A.set(t,s),s}var w;w=d,d={...w,get:(e,t,n)=>b(e,t)||w.get(e,t,n),has:(e,t)=>!!b(e,t)||w.has(e,t)};class E{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const _="@firebase/app",C="0.7.29",T=new i.Yd("@firebase/app"),k={[_]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},S=new Map,I=new Map;function O(e,t){try{e.container.addComponent(t)}catch(n){T.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function N(e){const t=e.name;if(I.has(t))return T.debug(`There were multiple attempts to register component ${t}.`),!1;I.set(t,e);for(const t of S.values())O(t,e);return!0}function x(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const P=new s.LL("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","storage-open":"Error thrown when opening storage. Original error: {$originalErrorMessage}.","storage-get":"Error thrown when reading from storage. Original error: {$originalErrorMessage}.","storage-set":"Error thrown when writing to storage. Original error: {$originalErrorMessage}.","storage-delete":"Error thrown when deleting from storage. Original error: {$originalErrorMessage}."});class D{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new r.wA("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw P.create("app-deleted",{appName:this._name})}}const R="9.9.1";function L(e,t={}){"object"!=typeof t&&(t={name:t});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},t),i=n.name;if("string"!=typeof i||!i)throw P.create("bad-app-name",{appName:String(i)});const o=S.get(i);if(o){if((0,s.vZ)(e,o.options)&&(0,s.vZ)(n,o.config))return o;throw P.create("duplicate-app",{appName:i})}const a=new r.H0(i);for(const e of I.values())a.addComponent(e);const l=new D(e,n,a);return S.set(i,l),l}function M(e="[DEFAULT]"){const t=S.get(e);if(!t)throw P.create("no-app",{appName:e});return t}function F(e,t,n){var i;let s=null!==(i=k[e])&&void 0!==i?i:e;n&&(s+=`-${n}`);const o=s.match(/\s|\//),a=t.match(/\s|\//);if(o||a){const e=[`Unable to register library "${s}" with version "${t}":`];return o&&e.push(`library name "${s}" contains illegal characters (whitespace or "/")`),o&&a&&e.push("and"),a&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void T.warn(e.join(" "))}N(new r.wA(`${s}-version`,(()=>({library:s,version:t})),"VERSION"))}const U="firebase-heartbeat-store";let V=null;function j(){return V||(V=function(e,t,{blocked:n,upgrade:r,blocking:i,terminated:s}={}){const o=indexedDB.open(e,t),a=m(o);return r&&o.addEventListener("upgradeneeded",(e=>{r(m(o.result),e.oldVersion,e.newVersion,m(o.transaction))})),n&&o.addEventListener("blocked",(()=>n())),a.then((e=>{s&&e.addEventListener("close",(()=>s())),i&&e.addEventListener("versionchange",(()=>i()))})).catch((()=>{})),a}("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(U)}}).catch((e=>{throw P.create("storage-open",{originalErrorMessage:e.message})}))),V}async function z(e,t){var n;try{const n=(await j()).transaction(U,"readwrite"),r=n.objectStore(U);return await r.put(t,B(e)),n.done}catch(e){throw P.create("storage-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message})}}function B(e){return`${e.name}!${e.options.appId}`}class ${constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new q(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=H();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=H(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let r=e.slice();for(const i of e){const e=n.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),W(n)>t){e.dates.pop();break}}else if(n.push({agent:i.agent,dates:[i.date]}),W(n)>t){n.pop();break}r=r.slice(1)}return{heartbeatsToSend:n,unsentEntries:r}}(this._heartbeatsCache.heartbeats),r=(0,s.L)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),r}}function H(){return(new Date).toISOString().substring(0,10)}class q{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,s.hl)()&&(0,s.eu)().then((()=>!0)).catch((()=>!1))}async read(){return await this._canUseIndexedDBPromise&&await async function(e){var t;try{return(await j()).transaction(U).objectStore(U).get(B(e))}catch(e){throw P.create("storage-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message})}}(this.app)||{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return z(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return z(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function W(e){return(0,s.L)(JSON.stringify({version:2,heartbeats:e})).length}N(new r.wA("platform-logger",(e=>new E(e)),"PRIVATE")),N(new r.wA("heartbeat",(e=>new $(e)),"PRIVATE")),F(_,C,""),F(_,C,"esm2017"),F("fire-js","")},8463:function(e,t,n){n.d(t,{H0:function(){return a},wA:function(){return i}});var r=n(4444);class i{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const s="[DEFAULT]";class o{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new r.BH;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(r)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:s})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const r=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(r);return r}onInit(e,t){var n;const r=this.normalizeInstanceIdentifier(t),i=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;i.add(e),this.onInitCallbacks.set(r,i);const s=this.instances.get(r);return s&&e(s,r),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const r of n)try{r(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(r=e,r===s?void 0:r),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var r;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:s:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class a{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new o(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},3333:function(e,t,n){n.d(t,{Yd:function(){return u},in:function(){return i}});const r=[];var i;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));const s={debug:i.DEBUG,verbose:i.VERBOSE,info:i.INFO,warn:i.WARN,error:i.ERROR,silent:i.SILENT},o=i.INFO,a={[i.DEBUG]:"log",[i.VERBOSE]:"log",[i.INFO]:"info",[i.WARN]:"warn",[i.ERROR]:"error"},l=(e,t,...n)=>{if(t<e.logLevel)return;const r=(new Date).toISOString(),i=a[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${r}]  ${e.name}:`,...n)};class u{constructor(e){this.name=e,this._logLevel=o,this._logHandler=l,this._userLogHandler=null,r.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in i))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?s[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,i.DEBUG,...e),this._logHandler(this,i.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,i.VERBOSE,...e),this._logHandler(this,i.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,i.INFO,...e),this._logHandler(this,i.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,i.WARN,...e),this._logHandler(this,i.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,i.ERROR,...e),this._logHandler(this,i.ERROR,...e)}}},6042:function(e,t,n){n.d(t,{Ix:function(){return S}});var r=n(7294);function i(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=i(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var s=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=i(e))&&(r&&(r+=" "),r+=t);return r};function o(e){return"number"==typeof e&&!isNaN(e)}function a(e){return"boolean"==typeof e}function l(e){return"string"==typeof e}function u(e){return"function"==typeof e}function c(e){return l(e)||u(e)?e:null}function h(e){return 0===e||e}function f(e){return(0,r.isValidElement)(e)||l(e)||u(e)||o(e)}const d={TOP_LEFT:"top-left",TOP_RIGHT:"top-right",TOP_CENTER:"top-center",BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",BOTTOM_CENTER:"bottom-center"},p={INFO:"info",SUCCESS:"success",WARNING:"warning",ERROR:"error",DEFAULT:"default"};function m(e){let{enter:t,exit:n,appendPosition:i=!1,collapse:s=!0,collapseDuration:o=300}=e;return function(e){let{children:a,position:l,preventExitTransition:u,done:c,nodeRef:h,isIn:f}=e;const d=i?t+"--"+l:t,p=i?n+"--"+l:n,m=(0,r.useRef)(),g=(0,r.useRef)(0);function y(e){if(e.target!==h.current)return;const t=h.current;t.dispatchEvent(new Event("d")),t.removeEventListener("animationend",y),t.removeEventListener("animationcancel",y),0===g.current&&"animationcancel"!==e.type&&(t.className=m.current)}function v(){const e=h.current;e.removeEventListener("animationend",v),s?function(e,t,n){void 0===n&&(n=300);const{scrollHeight:r,style:i}=e;requestAnimationFrame((()=>{i.minHeight="initial",i.height=r+"px",i.transition="all "+n+"ms",requestAnimationFrame((()=>{i.height="0",i.padding="0",i.margin="0",setTimeout(t,n)}))}))}(e,c,o):c()}return(0,r.useLayoutEffect)((()=>{!function(){const e=h.current;m.current=e.className,e.className+=" "+d,e.addEventListener("animationend",y),e.addEventListener("animationcancel",y)}()}),[]),(0,r.useEffect)((()=>{f||(u?v():function(){g.current=1;const e=h.current;e.className+=" "+p,e.addEventListener("animationend",v)}())}),[f]),r.createElement(r.Fragment,null,a)}}function g(e,t){return{content:e.content,containerId:e.props.containerId,id:e.props.toastId,theme:e.props.theme,type:e.props.type,data:e.props.data||{},isLoading:e.props.isLoading,icon:e.props.icon,status:t}}const y={list:new Map,emitQueue:new Map,on(e,t){return this.list.has(e)||this.list.set(e,[]),this.list.get(e).push(t),this},off(e,t){if(t){const n=this.list.get(e).filter((e=>e!==t));return this.list.set(e,n),this}return this.list.delete(e),this},cancelEmit(e){const t=this.emitQueue.get(e);return t&&(t.forEach(clearTimeout),this.emitQueue.delete(e)),this},emit(e){this.list.has(e)&&this.list.get(e).forEach((t=>{const n=setTimeout((()=>{t(...[].slice.call(arguments,1))}),0);this.emitQueue.has(e)||this.emitQueue.set(e,[]),this.emitQueue.get(e).push(n)}))}},v=e=>{let{theme:t,type:n,...i}=e;return r.createElement("svg",{viewBox:"0 0 24 24",width:"100%",height:"100%",fill:"colored"===t?"currentColor":"var(--toastify-icon-color-"+n+")",...i})},A={info:function(e){return r.createElement(v,{...e},r.createElement("path",{d:"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z"}))},warning:function(e){return r.createElement(v,{...e},r.createElement("path",{d:"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z"}))},success:function(e){return r.createElement(v,{...e},r.createElement("path",{d:"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z"}))},error:function(e){return r.createElement(v,{...e},r.createElement("path",{d:"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z"}))},spinner:function(){return r.createElement("div",{className:"Toastify__spinner"})}};function b(e){const[,t]=(0,r.useReducer)((e=>e+1),0),[n,i]=(0,r.useState)([]),s=(0,r.useRef)(null),d=(0,r.useRef)(new Map).current,p=e=>-1!==n.indexOf(e),m=(0,r.useRef)({toastKey:1,displayedToast:0,count:0,queue:[],props:e,containerId:null,isToastActive:p,getToast:e=>d.get(e)}).current;function v(e){let{containerId:t}=e;const{limit:n}=m.props;!n||t&&m.containerId!==t||(m.count-=m.queue.length,m.queue=[])}function b(e){i((t=>h(e)?t.filter((t=>t!==e)):[]))}function w(){const{toastContent:e,toastProps:t,staleId:n}=m.queue.shift();_(e,t,n)}function E(e,n){let{delay:i,staleId:p,...v}=n;if(!f(e)||function(e){return!s.current||m.props.enableMultiContainer&&e.containerId!==m.props.containerId||d.has(e.toastId)&&null==e.updateId}(v))return;const{toastId:E,updateId:C,data:T}=v,{props:k}=m,S=()=>b(E),I=null==C;I&&m.count++;const O={toastId:E,updateId:C,data:T,containerId:v.containerId,isLoading:v.isLoading,theme:v.theme||k.theme,icon:null!=v.icon?v.icon:k.icon,isIn:!1,key:v.key||m.toastKey++,type:v.type,closeToast:S,closeButton:v.closeButton,rtl:k.rtl,position:v.position||k.position,transition:v.transition||k.transition,className:c(v.className||k.toastClassName),bodyClassName:c(v.bodyClassName||k.bodyClassName),style:v.style||k.toastStyle,bodyStyle:v.bodyStyle||k.bodyStyle,onClick:v.onClick||k.onClick,pauseOnHover:a(v.pauseOnHover)?v.pauseOnHover:k.pauseOnHover,pauseOnFocusLoss:a(v.pauseOnFocusLoss)?v.pauseOnFocusLoss:k.pauseOnFocusLoss,draggable:a(v.draggable)?v.draggable:k.draggable,draggablePercent:v.draggablePercent||k.draggablePercent,draggableDirection:v.draggableDirection||k.draggableDirection,closeOnClick:a(v.closeOnClick)?v.closeOnClick:k.closeOnClick,progressClassName:c(v.progressClassName||k.progressClassName),progressStyle:v.progressStyle||k.progressStyle,autoClose:!v.isLoading&&(N=v.autoClose,x=k.autoClose,!1===N||o(N)&&N>0?N:x),hideProgressBar:a(v.hideProgressBar)?v.hideProgressBar:k.hideProgressBar,progress:v.progress,role:v.role||k.role,deleteToast(){const e=g(d.get(E),"removed");d.delete(E),y.emit(4,e);const n=m.queue.length;if(m.count=h(E)?m.count-1:m.count-m.displayedToast,m.count<0&&(m.count=0),n>0){const e=h(E)?1:m.props.limit;if(1===n||1===e)m.displayedToast++,w();else{const t=e>n?n:e;m.displayedToast=t;for(let e=0;e<t;e++)w()}}else t()}};var N,x;O.iconOut=function(e){let{theme:t,type:n,isLoading:i,icon:s}=e,a=null;const c={theme:t,type:n};return!1===s||(u(s)?a=s(c):(0,r.isValidElement)(s)?a=(0,r.cloneElement)(s,c):l(s)||o(s)?a=s:i?a=A.spinner():(e=>e in A)(n)&&(a=A[n](c))),a}(O),u(v.onOpen)&&(O.onOpen=v.onOpen),u(v.onClose)&&(O.onClose=v.onClose),O.closeButton=k.closeButton,!1===v.closeButton||f(v.closeButton)?O.closeButton=v.closeButton:!0===v.closeButton&&(O.closeButton=!f(k.closeButton)||k.closeButton);let P=e;(0,r.isValidElement)(e)&&!l(e.type)?P=(0,r.cloneElement)(e,{closeToast:S,toastProps:O,data:T}):u(e)&&(P=e({closeToast:S,toastProps:O,data:T})),k.limit&&k.limit>0&&m.count>k.limit&&I?m.queue.push({toastContent:P,toastProps:O,staleId:p}):o(i)?setTimeout((()=>{_(P,O,p)}),i):_(P,O,p)}function _(e,t,n){const{toastId:r}=t;n&&d.delete(n);const s={content:e,props:t};d.set(r,s),i((e=>[...e,r].filter((e=>e!==n)))),y.emit(4,g(s,null==s.props.updateId?"added":"updated"))}return(0,r.useEffect)((()=>(m.containerId=e.containerId,y.cancelEmit(3).on(0,E).on(1,(e=>s.current&&b(e))).on(5,v).emit(2,m),()=>{d.clear(),y.emit(3,m)})),[]),(0,r.useEffect)((()=>{m.props=e,m.isToastActive=p,m.displayedToast=n.length})),{getToastToRender:function(t){const n=new Map,r=Array.from(d.values());return e.newestOnTop&&r.reverse(),r.forEach((e=>{const{position:t}=e.props;n.has(t)||n.set(t,[]),n.get(t).push(e)})),Array.from(n,(e=>t(e[0],e[1])))},containerRef:s,isToastActive:p}}function w(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientX:e.clientX}function E(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientY:e.clientY}function _(e){let{closeToast:t,theme:n,ariaLabel:i="close"}=e;return r.createElement("button",{className:"Toastify__close-button Toastify__close-button--"+n,type:"button",onClick:e=>{e.stopPropagation(),t(e)},"aria-label":i},r.createElement("svg",{"aria-hidden":"true",viewBox:"0 0 14 16"},r.createElement("path",{fillRule:"evenodd",d:"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"})))}function C(e){let{delay:t,isRunning:n,closeToast:i,type:o,hide:a,className:l,style:c,controlledProgress:h,progress:f,rtl:d,isIn:p,theme:m}=e;const g={...c,animationDuration:t+"ms",animationPlayState:n?"running":"paused",opacity:a?0:1};h&&(g.transform="scaleX("+f+")");const y=s("Toastify__progress-bar",h?"Toastify__progress-bar--controlled":"Toastify__progress-bar--animated","Toastify__progress-bar-theme--"+m,"Toastify__progress-bar--"+o,{"Toastify__progress-bar--rtl":d}),v=u(l)?l({rtl:d,type:o,defaultClassName:y}):s(y,l),A={[h&&f>=1?"onTransitionEnd":"onAnimationEnd"]:h&&f<1?null:()=>{p&&i()}};return r.createElement("div",{role:"progressbar","aria-hidden":a?"true":"false","aria-label":"notification timer",className:v,style:g,...A})}C.defaultProps={type:p.DEFAULT,hide:!1};const T=e=>{const{isRunning:t,preventExitTransition:n,toastRef:i,eventHandlers:o}=function(e){const[t,n]=(0,r.useState)(!1),[i,s]=(0,r.useState)(!1),o=(0,r.useRef)(null),a=(0,r.useRef)({start:0,x:0,y:0,delta:0,removalDistance:0,canCloseOnClick:!0,canDrag:!1,boundingRect:null,didMove:!1}).current,l=(0,r.useRef)(e),{autoClose:c,pauseOnHover:h,closeToast:f,onClick:d,closeOnClick:p}=e;function m(t){if(e.draggable){a.didMove=!1,document.addEventListener("mousemove",A),document.addEventListener("mouseup",b),document.addEventListener("touchmove",A),document.addEventListener("touchend",b);const n=o.current;a.canCloseOnClick=!0,a.canDrag=!0,a.boundingRect=n.getBoundingClientRect(),n.style.transition="",a.x=w(t.nativeEvent),a.y=E(t.nativeEvent),"x"===e.draggableDirection?(a.start=a.x,a.removalDistance=n.offsetWidth*(e.draggablePercent/100)):(a.start=a.y,a.removalDistance=n.offsetHeight*(80===e.draggablePercent?1.5*e.draggablePercent:e.draggablePercent/100))}}function g(){if(a.boundingRect){const{top:t,bottom:n,left:r,right:i}=a.boundingRect;e.pauseOnHover&&a.x>=r&&a.x<=i&&a.y>=t&&a.y<=n?v():y()}}function y(){n(!0)}function v(){n(!1)}function A(n){const r=o.current;a.canDrag&&r&&(a.didMove=!0,t&&v(),a.x=w(n),a.y=E(n),"x"===e.draggableDirection?a.delta=a.x-a.start:a.delta=a.y-a.start,a.start!==a.x&&(a.canCloseOnClick=!1),r.style.transform="translate"+e.draggableDirection+"("+a.delta+"px)",r.style.opacity=""+(1-Math.abs(a.delta/a.removalDistance)))}function b(){document.removeEventListener("mousemove",A),document.removeEventListener("mouseup",b),document.removeEventListener("touchmove",A),document.removeEventListener("touchend",b);const t=o.current;if(a.canDrag&&a.didMove&&t){if(a.canDrag=!1,Math.abs(a.delta)>a.removalDistance)return s(!0),void e.closeToast();t.style.transition="transform 0.2s, opacity 0.2s",t.style.transform="translate"+e.draggableDirection+"(0)",t.style.opacity="1"}}(0,r.useEffect)((()=>{l.current=e})),(0,r.useEffect)((()=>(o.current&&o.current.addEventListener("d",y,{once:!0}),u(e.onOpen)&&e.onOpen((0,r.isValidElement)(e.children)&&e.children.props),()=>{const e=l.current;u(e.onClose)&&e.onClose((0,r.isValidElement)(e.children)&&e.children.props)})),[]),(0,r.useEffect)((()=>(e.pauseOnFocusLoss&&(document.hasFocus()||v(),window.addEventListener("focus",y),window.addEventListener("blur",v)),()=>{e.pauseOnFocusLoss&&(window.removeEventListener("focus",y),window.removeEventListener("blur",v))})),[e.pauseOnFocusLoss]);const _={onMouseDown:m,onTouchStart:m,onMouseUp:g,onTouchEnd:g};return c&&h&&(_.onMouseEnter=v,_.onMouseLeave=y),p&&(_.onClick=e=>{d&&d(e),a.canCloseOnClick&&f()}),{playToast:y,pauseToast:v,isRunning:t,preventExitTransition:i,toastRef:o,eventHandlers:_}}(e),{closeButton:a,children:l,autoClose:c,onClick:h,type:f,hideProgressBar:d,closeToast:p,transition:m,position:g,className:y,style:v,bodyClassName:A,bodyStyle:b,progressClassName:T,progressStyle:k,updateId:S,role:I,progress:O,rtl:N,toastId:x,deleteToast:P,isIn:D,isLoading:R,iconOut:L,theme:M}=e,F=s("Toastify__toast","Toastify__toast-theme--"+M,"Toastify__toast--"+f,{"Toastify__toast--rtl":N}),U=u(y)?y({rtl:N,position:g,type:f,defaultClassName:F}):s(F,y),V=!!O,j={closeToast:p,type:f,theme:M};let z=null;return!1===a||(z=u(a)?a(j):r.isValidElement(a)?r.cloneElement(a,j):_(j)),r.createElement(m,{isIn:D,done:P,position:g,preventExitTransition:n,nodeRef:i},r.createElement("div",{id:x,onClick:h,className:U,...o,style:v,ref:i},r.createElement("div",{...D&&{role:I},className:u(A)?A({type:f}):s("Toastify__toast-body",A),style:b},null!=L&&r.createElement("div",{className:s("Toastify__toast-icon",{"Toastify--animate-icon Toastify__zoom-enter":!R})},L),r.createElement("div",null,l)),z,(c||V)&&r.createElement(C,{...S&&!V?{key:"pb-"+S}:{},rtl:N,theme:M,delay:c,isRunning:t,isIn:D,closeToast:p,hide:d,type:f,style:k,className:T,controlledProgress:V,progress:O})))},k=m({enter:"Toastify--animate Toastify__bounce-enter",exit:"Toastify--animate Toastify__bounce-exit",appendPosition:!0}),S=(m({enter:"Toastify--animate Toastify__slide-enter",exit:"Toastify--animate Toastify__slide-exit",appendPosition:!0}),m({enter:"Toastify--animate Toastify__zoom-enter",exit:"Toastify--animate Toastify__zoom-exit"}),m({enter:"Toastify--animate Toastify__flip-enter",exit:"Toastify--animate Toastify__flip-exit"}),(0,r.forwardRef)(((e,t)=>{const{getToastToRender:n,containerRef:i,isToastActive:o}=b(e),{className:a,style:l,rtl:h,containerId:f}=e;function d(e){const t=s("Toastify__toast-container","Toastify__toast-container--"+e,{"Toastify__toast-container--rtl":h});return u(a)?a({position:e,rtl:h,defaultClassName:t}):s(t,c(a))}return(0,r.useEffect)((()=>{t&&(t.current=i.current)}),[]),r.createElement("div",{ref:i,className:"Toastify",id:f},n(((e,t)=>{const n=t.length?{...l}:{...l,pointerEvents:"none"};return r.createElement("div",{className:d(e),style:n,key:"container-"+e},t.map(((e,n)=>{let{content:i,props:s}=e;return r.createElement(T,{...s,isIn:o(s.toastId),style:{...s.style,"--nth":n+1,"--len":t.length},key:"toast-"+s.key},i)})))})))})));S.displayName="ToastContainer",S.defaultProps={position:d.TOP_RIGHT,transition:k,rtl:!1,autoClose:5e3,hideProgressBar:!1,closeButton:_,pauseOnHover:!0,pauseOnFocusLoss:!0,closeOnClick:!0,newestOnTop:!1,draggable:!0,draggablePercent:80,draggableDirection:"x",role:"alert",theme:"light"};let I,O=new Map,N=[];function x(){return Math.random().toString(36).substring(2,9)}function P(e){return e&&(l(e.toastId)||o(e.toastId))?e.toastId:x()}function D(e,t){return O.size>0?y.emit(0,e,t):N.push({content:e,options:t}),t.toastId}function R(e,t){return{...t,type:t&&t.type||e,toastId:P(t)}}function L(e){return(t,n)=>D(t,R(e,n))}function M(e,t){return D(e,R(p.DEFAULT,t))}M.loading=(e,t)=>D(e,R(p.DEFAULT,{isLoading:!0,autoClose:!1,closeOnClick:!1,closeButton:!1,draggable:!1,...t})),M.promise=function(e,t,n){let r,{pending:i,error:s,success:o}=t;i&&(r=l(i)?M.loading(i,n):M.loading(i.render,{...n,...i}));const a={isLoading:null,autoClose:null,closeOnClick:null,closeButton:null,draggable:null,delay:100},c=(e,t,i)=>{if(null==t)return void M.dismiss(r);const s={type:e,...a,...n,data:i},o=l(t)?{render:t}:t;return r?M.update(r,{...s,...o}):M(o.render,{...s,...o}),i},h=u(e)?e():e;return h.then((e=>c("success",o,e))).catch((e=>c("error",s,e))),h},M.success=L(p.SUCCESS),M.info=L(p.INFO),M.error=L(p.ERROR),M.warning=L(p.WARNING),M.warn=M.warning,M.dark=(e,t)=>D(e,R(p.DEFAULT,{theme:"dark",...t})),M.dismiss=e=>y.emit(1,e),M.clearWaitingQueue=function(e){return void 0===e&&(e={}),y.emit(5,e)},M.isActive=e=>{let t=!1;return O.forEach((n=>{n.isToastActive&&n.isToastActive(e)&&(t=!0)})),t},M.update=function(e,t){void 0===t&&(t={}),setTimeout((()=>{const n=function(e,t){let{containerId:n}=t;const r=O.get(n||I);return r?r.getToast(e):null}(e,t);if(n){const{props:r,content:i}=n,s={...r,...t,toastId:t.toastId||e,updateId:x()};s.toastId!==e&&(s.staleId=e);const o=s.render||i;delete s.render,D(o,s)}}),0)},M.done=e=>{M.update(e,{progress:1})},M.onChange=e=>(y.on(4,e),()=>{y.off(4,e)}),M.POSITION=d,M.TYPE=p,y.on(2,(e=>{I=e.containerId||e,O.set(I,e),N.forEach((e=>{y.emit(0,e.content,e.options)})),N=[]})).on(3,(e=>{O.delete(e.containerId||e),0===O.size&&y.off(0).off(1).off(5)}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,